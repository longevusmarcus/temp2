import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { TaxIDFormat } from "./taxidformat.js";
export type LicenseKeyCustomerMetadata = string | number | boolean;
export type LicenseKeyCustomerTaxId = string | TaxIDFormat;
export type LicenseKeyCustomer = {
    /**
     * The ID of the customer.
     */
    id: string;
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    /**
     * The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.
     */
    externalId: string | null;
    /**
     * The email address of the customer. This must be unique within the organization.
     */
    email: string;
    /**
     * Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.
     */
    emailVerified: boolean;
    /**
     * The name of the customer.
     */
    name: string | null;
    billingAddress: Address | null;
    taxId: Array<string | TaxIDFormat | null> | null;
    /**
     * The ID of the organization owning the customer.
     */
    organizationId: string;
    /**
     * Timestamp for when the customer was soft deleted.
     */
    deletedAt: Date | null;
    avatarUrl: string;
};
/** @internal */
export declare const LicenseKeyCustomerMetadata$inboundSchema: z.ZodType<LicenseKeyCustomerMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type LicenseKeyCustomerMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const LicenseKeyCustomerMetadata$outboundSchema: z.ZodType<LicenseKeyCustomerMetadata$Outbound, z.ZodTypeDef, LicenseKeyCustomerMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LicenseKeyCustomerMetadata$ {
    /** @deprecated use `LicenseKeyCustomerMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LicenseKeyCustomerMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `LicenseKeyCustomerMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LicenseKeyCustomerMetadata$Outbound, z.ZodTypeDef, LicenseKeyCustomerMetadata>;
    /** @deprecated use `LicenseKeyCustomerMetadata$Outbound` instead. */
    type Outbound = LicenseKeyCustomerMetadata$Outbound;
}
export declare function licenseKeyCustomerMetadataToJSON(licenseKeyCustomerMetadata: LicenseKeyCustomerMetadata): string;
export declare function licenseKeyCustomerMetadataFromJSON(jsonString: string): SafeParseResult<LicenseKeyCustomerMetadata, SDKValidationError>;
/** @internal */
export declare const LicenseKeyCustomerTaxId$inboundSchema: z.ZodType<LicenseKeyCustomerTaxId, z.ZodTypeDef, unknown>;
/** @internal */
export type LicenseKeyCustomerTaxId$Outbound = string | string;
/** @internal */
export declare const LicenseKeyCustomerTaxId$outboundSchema: z.ZodType<LicenseKeyCustomerTaxId$Outbound, z.ZodTypeDef, LicenseKeyCustomerTaxId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LicenseKeyCustomerTaxId$ {
    /** @deprecated use `LicenseKeyCustomerTaxId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `LicenseKeyCustomerTaxId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `LicenseKeyCustomerTaxId$Outbound` instead. */
    type Outbound = LicenseKeyCustomerTaxId$Outbound;
}
export declare function licenseKeyCustomerTaxIdToJSON(licenseKeyCustomerTaxId: LicenseKeyCustomerTaxId): string;
export declare function licenseKeyCustomerTaxIdFromJSON(jsonString: string): SafeParseResult<LicenseKeyCustomerTaxId, SDKValidationError>;
/** @internal */
export declare const LicenseKeyCustomer$inboundSchema: z.ZodType<LicenseKeyCustomer, z.ZodTypeDef, unknown>;
/** @internal */
export type LicenseKeyCustomer$Outbound = {
    id: string;
    created_at: string;
    modified_at: string | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    external_id: string | null;
    email: string;
    email_verified: boolean;
    name: string | null;
    billing_address: Address$Outbound | null;
    tax_id: Array<string | string | null> | null;
    organization_id: string;
    deleted_at: string | null;
    avatar_url: string;
};
/** @internal */
export declare const LicenseKeyCustomer$outboundSchema: z.ZodType<LicenseKeyCustomer$Outbound, z.ZodTypeDef, LicenseKeyCustomer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LicenseKeyCustomer$ {
    /** @deprecated use `LicenseKeyCustomer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LicenseKeyCustomer, z.ZodTypeDef, unknown>;
    /** @deprecated use `LicenseKeyCustomer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LicenseKeyCustomer$Outbound, z.ZodTypeDef, LicenseKeyCustomer>;
    /** @deprecated use `LicenseKeyCustomer$Outbound` instead. */
    type Outbound = LicenseKeyCustomer$Outbound;
}
export declare function licenseKeyCustomerToJSON(licenseKeyCustomer: LicenseKeyCustomer): string;
export declare function licenseKeyCustomerFromJSON(jsonString: string): SafeParseResult<LicenseKeyCustomer, SDKValidationError>;
//# sourceMappingURL=licensekeycustomer.d.ts.map