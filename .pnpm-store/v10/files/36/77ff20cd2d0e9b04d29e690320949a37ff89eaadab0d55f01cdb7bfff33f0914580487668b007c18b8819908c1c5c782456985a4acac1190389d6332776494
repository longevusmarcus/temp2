/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitDownloadablesSubscriber$inboundSchema, BenefitDownloadablesSubscriber$outboundSchema, } from "./benefitdownloadablessubscriber.js";
import { BenefitGrantDownloadablesProperties$inboundSchema, BenefitGrantDownloadablesProperties$outboundSchema, } from "./benefitgrantdownloadablesproperties.js";
import { CustomerPortalCustomer$inboundSchema, CustomerPortalCustomer$outboundSchema, } from "./customerportalcustomer.js";
/** @internal */
export const CustomerBenefitGrantDownloadables$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    granted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    revoked_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    customer_id: z.string(),
    benefit_id: z.string(),
    subscription_id: z.nullable(z.string()),
    order_id: z.nullable(z.string()),
    is_granted: z.boolean(),
    is_revoked: z.boolean(),
    customer: CustomerPortalCustomer$inboundSchema,
    benefit: BenefitDownloadablesSubscriber$inboundSchema,
    properties: BenefitGrantDownloadablesProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "granted_at": "grantedAt",
        "revoked_at": "revokedAt",
        "customer_id": "customerId",
        "benefit_id": "benefitId",
        "subscription_id": "subscriptionId",
        "order_id": "orderId",
        "is_granted": "isGranted",
        "is_revoked": "isRevoked",
    });
});
/** @internal */
export const CustomerBenefitGrantDownloadables$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    grantedAt: z.nullable(z.date().transform(v => v.toISOString())),
    revokedAt: z.nullable(z.date().transform(v => v.toISOString())),
    customerId: z.string(),
    benefitId: z.string(),
    subscriptionId: z.nullable(z.string()),
    orderId: z.nullable(z.string()),
    isGranted: z.boolean(),
    isRevoked: z.boolean(),
    customer: CustomerPortalCustomer$outboundSchema,
    benefit: BenefitDownloadablesSubscriber$outboundSchema,
    properties: BenefitGrantDownloadablesProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        grantedAt: "granted_at",
        revokedAt: "revoked_at",
        customerId: "customer_id",
        benefitId: "benefit_id",
        subscriptionId: "subscription_id",
        orderId: "order_id",
        isGranted: "is_granted",
        isRevoked: "is_revoked",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerBenefitGrantDownloadables$;
(function (CustomerBenefitGrantDownloadables$) {
    /** @deprecated use `CustomerBenefitGrantDownloadables$inboundSchema` instead. */
    CustomerBenefitGrantDownloadables$.inboundSchema = CustomerBenefitGrantDownloadables$inboundSchema;
    /** @deprecated use `CustomerBenefitGrantDownloadables$outboundSchema` instead. */
    CustomerBenefitGrantDownloadables$.outboundSchema = CustomerBenefitGrantDownloadables$outboundSchema;
})(CustomerBenefitGrantDownloadables$ || (CustomerBenefitGrantDownloadables$ = {}));
export function customerBenefitGrantDownloadablesToJSON(customerBenefitGrantDownloadables) {
    return JSON.stringify(CustomerBenefitGrantDownloadables$outboundSchema.parse(customerBenefitGrantDownloadables));
}
export function customerBenefitGrantDownloadablesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerBenefitGrantDownloadables$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerBenefitGrantDownloadables' from JSON`);
}
//# sourceMappingURL=customerbenefitgrantdownloadables.js.map