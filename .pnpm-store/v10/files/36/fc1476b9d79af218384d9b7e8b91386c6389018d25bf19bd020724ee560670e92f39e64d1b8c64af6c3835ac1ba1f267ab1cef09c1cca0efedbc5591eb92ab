/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const CustomerCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomerCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerCreateMetadata$;
(function (CustomerCreateMetadata$) {
    /** @deprecated use `CustomerCreateMetadata$inboundSchema` instead. */
    CustomerCreateMetadata$.inboundSchema = CustomerCreateMetadata$inboundSchema;
    /** @deprecated use `CustomerCreateMetadata$outboundSchema` instead. */
    CustomerCreateMetadata$.outboundSchema = CustomerCreateMetadata$outboundSchema;
})(CustomerCreateMetadata$ || (CustomerCreateMetadata$ = {}));
export function customerCreateMetadataToJSON(customerCreateMetadata) {
    return JSON.stringify(CustomerCreateMetadata$outboundSchema.parse(customerCreateMetadata));
}
export function customerCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerCreateMetadata' from JSON`);
}
/** @internal */
export const CustomerCreateTaxId$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const CustomerCreateTaxId$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerCreateTaxId$;
(function (CustomerCreateTaxId$) {
    /** @deprecated use `CustomerCreateTaxId$inboundSchema` instead. */
    CustomerCreateTaxId$.inboundSchema = CustomerCreateTaxId$inboundSchema;
    /** @deprecated use `CustomerCreateTaxId$outboundSchema` instead. */
    CustomerCreateTaxId$.outboundSchema = CustomerCreateTaxId$outboundSchema;
})(CustomerCreateTaxId$ || (CustomerCreateTaxId$ = {}));
export function customerCreateTaxIdToJSON(customerCreateTaxId) {
    return JSON.stringify(CustomerCreateTaxId$outboundSchema.parse(customerCreateTaxId));
}
export function customerCreateTaxIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerCreateTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerCreateTaxId' from JSON`);
}
/** @internal */
export const CustomerCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    external_id: z.nullable(z.string()).optional(),
    email: z.string(),
    name: z.nullable(z.string()).optional(),
    billing_address: z.nullable(Address$inboundSchema).optional(),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))).optional(),
    organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "external_id": "externalId",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CustomerCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    externalId: z.nullable(z.string()).optional(),
    email: z.string(),
    name: z.nullable(z.string()).optional(),
    billingAddress: z.nullable(Address$outboundSchema).optional(),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))).optional(),
    organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        externalId: "external_id",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerCreate$;
(function (CustomerCreate$) {
    /** @deprecated use `CustomerCreate$inboundSchema` instead. */
    CustomerCreate$.inboundSchema = CustomerCreate$inboundSchema;
    /** @deprecated use `CustomerCreate$outboundSchema` instead. */
    CustomerCreate$.outboundSchema = CustomerCreate$outboundSchema;
})(CustomerCreate$ || (CustomerCreate$ = {}));
export function customerCreateToJSON(customerCreate) {
    return JSON.stringify(CustomerCreate$outboundSchema.parse(customerCreate));
}
export function customerCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerCreate' from JSON`);
}
//# sourceMappingURL=customercreate.js.map