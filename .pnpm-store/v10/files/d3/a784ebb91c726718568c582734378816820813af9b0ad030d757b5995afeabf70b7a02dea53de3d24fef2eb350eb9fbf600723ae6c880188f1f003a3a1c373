/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceFileRead$inboundSchema, ListResourceFileRead$outboundSchema, } from "../components/listresourcefileread.js";
/** @internal */
export const FilesListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.string()).optional(),
    ids: z.nullable(z.array(z.string())).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
export const FilesListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.string()).optional(),
    ids: z.nullable(z.array(z.string())).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FilesListRequest$;
(function (FilesListRequest$) {
    /** @deprecated use `FilesListRequest$inboundSchema` instead. */
    FilesListRequest$.inboundSchema = FilesListRequest$inboundSchema;
    /** @deprecated use `FilesListRequest$outboundSchema` instead. */
    FilesListRequest$.outboundSchema = FilesListRequest$outboundSchema;
})(FilesListRequest$ || (FilesListRequest$ = {}));
export function filesListRequestToJSON(filesListRequest) {
    return JSON.stringify(FilesListRequest$outboundSchema.parse(filesListRequest));
}
export function filesListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FilesListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesListRequest' from JSON`);
}
/** @internal */
export const FilesListResponse$inboundSchema = z.object({
    Result: ListResourceFileRead$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const FilesListResponse$outboundSchema = z.object({
    result: ListResourceFileRead$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FilesListResponse$;
(function (FilesListResponse$) {
    /** @deprecated use `FilesListResponse$inboundSchema` instead. */
    FilesListResponse$.inboundSchema = FilesListResponse$inboundSchema;
    /** @deprecated use `FilesListResponse$outboundSchema` instead. */
    FilesListResponse$.outboundSchema = FilesListResponse$outboundSchema;
})(FilesListResponse$ || (FilesListResponse$ = {}));
export function filesListResponseToJSON(filesListResponse) {
    return JSON.stringify(FilesListResponse$outboundSchema.parse(filesListResponse));
}
export function filesListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FilesListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesListResponse' from JSON`);
}
//# sourceMappingURL=fileslist.js.map