/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { OrganizationDetails$inboundSchema, OrganizationDetails$outboundSchema, } from "./organizationdetails.js";
import { OrganizationFeatureSettings$inboundSchema, OrganizationFeatureSettings$outboundSchema, } from "./organizationfeaturesettings.js";
import { OrganizationSocialLink$inboundSchema, OrganizationSocialLink$outboundSchema, } from "./organizationsociallink.js";
import { OrganizationSubscriptionSettings$inboundSchema, OrganizationSubscriptionSettings$outboundSchema, } from "./organizationsubscriptionsettings.js";
/** @internal */
export const OrganizationCreate$inboundSchema = z.object({
    name: z.string(),
    slug: z.string(),
    avatar_url: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    website: z.nullable(z.string()).optional(),
    socials: z.nullable(z.array(OrganizationSocialLink$inboundSchema)).optional(),
    details: z.nullable(OrganizationDetails$inboundSchema).optional(),
    feature_settings: z.nullable(OrganizationFeatureSettings$inboundSchema)
        .optional(),
    subscription_settings: z.nullable(OrganizationSubscriptionSettings$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "avatar_url": "avatarUrl",
        "feature_settings": "featureSettings",
        "subscription_settings": "subscriptionSettings",
    });
});
/** @internal */
export const OrganizationCreate$outboundSchema = z.object({
    name: z.string(),
    slug: z.string(),
    avatarUrl: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    website: z.nullable(z.string()).optional(),
    socials: z.nullable(z.array(OrganizationSocialLink$outboundSchema))
        .optional(),
    details: z.nullable(OrganizationDetails$outboundSchema).optional(),
    featureSettings: z.nullable(OrganizationFeatureSettings$outboundSchema)
        .optional(),
    subscriptionSettings: z.nullable(OrganizationSubscriptionSettings$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        avatarUrl: "avatar_url",
        featureSettings: "feature_settings",
        subscriptionSettings: "subscription_settings",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrganizationCreate$;
(function (OrganizationCreate$) {
    /** @deprecated use `OrganizationCreate$inboundSchema` instead. */
    OrganizationCreate$.inboundSchema = OrganizationCreate$inboundSchema;
    /** @deprecated use `OrganizationCreate$outboundSchema` instead. */
    OrganizationCreate$.outboundSchema = OrganizationCreate$outboundSchema;
})(OrganizationCreate$ || (OrganizationCreate$ = {}));
export function organizationCreateToJSON(organizationCreate) {
    return JSON.stringify(OrganizationCreate$outboundSchema.parse(organizationCreate));
}
export function organizationCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrganizationCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrganizationCreate' from JSON`);
}
//# sourceMappingURL=organizationcreate.js.map