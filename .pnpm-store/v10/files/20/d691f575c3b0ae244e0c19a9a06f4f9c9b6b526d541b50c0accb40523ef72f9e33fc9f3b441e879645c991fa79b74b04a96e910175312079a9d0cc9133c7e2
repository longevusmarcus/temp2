"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomersListResponse$ = exports.CustomersListResponse$outboundSchema = exports.CustomersListResponse$inboundSchema = exports.CustomersListRequest$ = exports.CustomersListRequest$outboundSchema = exports.CustomersListRequest$inboundSchema = exports.CustomersListQueryParamOrganizationIDFilter$ = exports.CustomersListQueryParamOrganizationIDFilter$outboundSchema = exports.CustomersListQueryParamOrganizationIDFilter$inboundSchema = void 0;
exports.customersListQueryParamOrganizationIDFilterToJSON = customersListQueryParamOrganizationIDFilterToJSON;
exports.customersListQueryParamOrganizationIDFilterFromJSON = customersListQueryParamOrganizationIDFilterFromJSON;
exports.customersListRequestToJSON = customersListRequestToJSON;
exports.customersListRequestFromJSON = customersListRequestFromJSON;
exports.customersListResponseToJSON = customersListResponseToJSON;
exports.customersListResponseFromJSON = customersListResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customerslist_js_1 = require("../components/customerslist.js");
const customersortproperty_js_1 = require("../components/customersortproperty.js");
const listresourcecustomer_js_1 = require("../components/listresourcecustomer.js");
/** @internal */
exports.CustomersListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.CustomersListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomersListQueryParamOrganizationIDFilter$;
(function (CustomersListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `CustomersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    CustomersListQueryParamOrganizationIDFilter$.inboundSchema = exports.CustomersListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `CustomersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    CustomersListQueryParamOrganizationIDFilter$.outboundSchema = exports.CustomersListQueryParamOrganizationIDFilter$outboundSchema;
})(CustomersListQueryParamOrganizationIDFilter$ || (exports.CustomersListQueryParamOrganizationIDFilter$ = CustomersListQueryParamOrganizationIDFilter$ = {}));
function customersListQueryParamOrganizationIDFilterToJSON(customersListQueryParamOrganizationIDFilter) {
    return JSON.stringify(exports.CustomersListQueryParamOrganizationIDFilter$outboundSchema.parse(customersListQueryParamOrganizationIDFilter));
}
function customersListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomersListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomersListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
exports.CustomersListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    email: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(customersortproperty_js_1.CustomerSortProperty$inboundSchema)).optional(),
    metadata: z.nullable(z.record(z.lazy(() => customerslist_js_1.MetadataQuery$inboundSchema)))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.CustomersListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    email: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(customersortproperty_js_1.CustomerSortProperty$outboundSchema)).optional(),
    metadata: z.nullable(z.record(z.lazy(() => customerslist_js_1.MetadataQuery$outboundSchema)))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomersListRequest$;
(function (CustomersListRequest$) {
    /** @deprecated use `CustomersListRequest$inboundSchema` instead. */
    CustomersListRequest$.inboundSchema = exports.CustomersListRequest$inboundSchema;
    /** @deprecated use `CustomersListRequest$outboundSchema` instead. */
    CustomersListRequest$.outboundSchema = exports.CustomersListRequest$outboundSchema;
})(CustomersListRequest$ || (exports.CustomersListRequest$ = CustomersListRequest$ = {}));
function customersListRequestToJSON(customersListRequest) {
    return JSON.stringify(exports.CustomersListRequest$outboundSchema.parse(customersListRequest));
}
function customersListRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomersListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomersListRequest' from JSON`);
}
/** @internal */
exports.CustomersListResponse$inboundSchema = z.object({
    Result: listresourcecustomer_js_1.ListResourceCustomer$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Result": "result",
    });
});
/** @internal */
exports.CustomersListResponse$outboundSchema = z.object({
    result: listresourcecustomer_js_1.ListResourceCustomer$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomersListResponse$;
(function (CustomersListResponse$) {
    /** @deprecated use `CustomersListResponse$inboundSchema` instead. */
    CustomersListResponse$.inboundSchema = exports.CustomersListResponse$inboundSchema;
    /** @deprecated use `CustomersListResponse$outboundSchema` instead. */
    CustomersListResponse$.outboundSchema = exports.CustomersListResponse$outboundSchema;
})(CustomersListResponse$ || (exports.CustomersListResponse$ = CustomersListResponse$ = {}));
function customersListResponseToJSON(customersListResponse) {
    return JSON.stringify(exports.CustomersListResponse$outboundSchema.parse(customersListResponse));
}
function customersListResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomersListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomersListResponse' from JSON`);
}
//# sourceMappingURL=customerslist.js.map