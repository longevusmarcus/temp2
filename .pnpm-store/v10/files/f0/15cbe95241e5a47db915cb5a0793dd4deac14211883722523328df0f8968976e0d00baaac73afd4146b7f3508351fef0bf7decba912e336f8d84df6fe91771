/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Pledger$inboundSchema = z.object({
    name: z.string(),
    github_username: z.nullable(z.string()),
    avatar_url: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "github_username": "githubUsername",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
export const Pledger$outboundSchema = z.object({
    name: z.string(),
    githubUsername: z.nullable(z.string()),
    avatarUrl: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        githubUsername: "github_username",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Pledger$;
(function (Pledger$) {
    /** @deprecated use `Pledger$inboundSchema` instead. */
    Pledger$.inboundSchema = Pledger$inboundSchema;
    /** @deprecated use `Pledger$outboundSchema` instead. */
    Pledger$.outboundSchema = Pledger$outboundSchema;
})(Pledger$ || (Pledger$ = {}));
export function pledgerToJSON(pledger) {
    return JSON.stringify(Pledger$outboundSchema.parse(pledger));
}
export function pledgerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Pledger$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Pledger' from JSON`);
}
//# sourceMappingURL=pledger.js.map