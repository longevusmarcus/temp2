"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Customers = void 0;
const customersCreate_js_1 = require("../funcs/customersCreate.js");
const customersDelete_js_1 = require("../funcs/customersDelete.js");
const customersDeleteExternal_js_1 = require("../funcs/customersDeleteExternal.js");
const customersGet_js_1 = require("../funcs/customersGet.js");
const customersGetExternal_js_1 = require("../funcs/customersGetExternal.js");
const customersGetState_js_1 = require("../funcs/customersGetState.js");
const customersGetStateExternal_js_1 = require("../funcs/customersGetStateExternal.js");
const customersList_js_1 = require("../funcs/customersList.js");
const customersUpdate_js_1 = require("../funcs/customersUpdate.js");
const customersUpdateExternal_js_1 = require("../funcs/customersUpdateExternal.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class Customers extends sdks_js_1.ClientSDK {
    /**
     * List Customers
     *
     * @remarks
     * List customers.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async list(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, customersList_js_1.customersList)(this, request, options));
    }
    /**
     * Create Customer
     *
     * @remarks
     * Create a customer.
     *
     * **Scopes**: `customers:write`
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersCreate_js_1.customersCreate)(this, request, options));
    }
    /**
     * Get Customer
     *
     * @remarks
     * Get a customer by ID.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersGet_js_1.customersGet)(this, request, options));
    }
    /**
     * Update Customer
     *
     * @remarks
     * Update a customer.
     *
     * **Scopes**: `customers:write`
     */
    async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersUpdate_js_1.customersUpdate)(this, request, options));
    }
    /**
     * Delete Customer
     *
     * @remarks
     * Delete a customer.
     *
     * This action cannot be undone and will immediately:
     * - Cancel any active subscriptions for the customer
     * - Revoke all their benefits
     * - Clear any `external_id`
     *
     * Use it only in the context of deleting a user within your
     * own service. Otherwise, use more granular API endpoints to cancel
     * a specific subscription or revoke certain benefits.
     *
     * Note: The customers information will nonetheless be retained for historic
     * orders and subscriptions.
     *
     * **Scopes**: `customers:write`
     */
    async delete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersDelete_js_1.customersDelete)(this, request, options));
    }
    /**
     * Get Customer by External ID
     *
     * @remarks
     * Get a customer by external ID.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async getExternal(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersGetExternal_js_1.customersGetExternal)(this, request, options));
    }
    /**
     * Update Customer by External ID
     *
     * @remarks
     * Update a customer by external ID.
     *
     * **Scopes**: `customers:write`
     */
    async updateExternal(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersUpdateExternal_js_1.customersUpdateExternal)(this, request, options));
    }
    /**
     * Delete Customer by External ID
     *
     * @remarks
     * Delete a customer by external ID.
     *
     * Immediately cancels any active subscriptions and revokes any active benefits.
     *
     * **Scopes**: `customers:write`
     */
    async deleteExternal(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersDeleteExternal_js_1.customersDeleteExternal)(this, request, options));
    }
    /**
     * Get Customer State
     *
     * @remarks
     * Get a customer state by ID.
     *
     * The customer state includes information about
     * the customer's active subscriptions and benefits.
     *
     * It's the ideal endpoint to use when you need to get a full overview
     * of a customer's status.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async getState(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersGetState_js_1.customersGetState)(this, request, options));
    }
    /**
     * Get Customer State by External ID
     *
     * @remarks
     * Get a customer state by external ID.
     *
     * The customer state includes information about
     * the customer's active subscriptions and benefits.
     *
     * It's the ideal endpoint to use when you need to get a full overview
     * of a customer's status.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async getStateExternal(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customersGetStateExternal_js_1.customersGetStateExternal)(this, request, options));
    }
}
exports.Customers = Customers;
//# sourceMappingURL=customers.js.map