/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { checkoutsClientConfirm } from "../funcs/checkoutsClientConfirm.js";
import { checkoutsClientGet } from "../funcs/checkoutsClientGet.js";
import { checkoutsClientUpdate } from "../funcs/checkoutsClientUpdate.js";
import { checkoutsCreate } from "../funcs/checkoutsCreate.js";
import { checkoutsGet } from "../funcs/checkoutsGet.js";
import { checkoutsList } from "../funcs/checkoutsList.js";
import { checkoutsUpdate } from "../funcs/checkoutsUpdate.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class Checkouts extends ClientSDK {
    /**
     * List Checkout Sessions
     *
     * @remarks
     * List checkout sessions.
     *
     * **Scopes**: `checkouts:read` `checkouts:write`
     */
    async list(request, options) {
        return unwrapResultIterator(checkoutsList(this, request, options));
    }
    /**
     * Create Checkout Session
     *
     * @remarks
     * Create a checkout session.
     *
     * **Scopes**: `checkouts:write`
     */
    async create(request, options) {
        return unwrapAsync(checkoutsCreate(this, request, options));
    }
    /**
     * Get Checkout Session
     *
     * @remarks
     * Get a checkout session by ID.
     *
     * **Scopes**: `checkouts:read` `checkouts:write`
     */
    async get(request, options) {
        return unwrapAsync(checkoutsGet(this, request, options));
    }
    /**
     * Update Checkout Session
     *
     * @remarks
     * Update a checkout session.
     *
     * **Scopes**: `checkouts:write`
     */
    async update(request, options) {
        return unwrapAsync(checkoutsUpdate(this, request, options));
    }
    /**
     * Get Checkout Session from Client
     *
     * @remarks
     * Get a checkout session by client secret.
     */
    async clientGet(request, options) {
        return unwrapAsync(checkoutsClientGet(this, request, options));
    }
    /**
     * Update Checkout Session from Client
     *
     * @remarks
     * Update a checkout session by client secret.
     */
    async clientUpdate(request, options) {
        return unwrapAsync(checkoutsClientUpdate(this, request, options));
    }
    /**
     * Confirm Checkout Session from Client
     *
     * @remarks
     * Confirm a checkout session by client secret.
     *
     * Orders and subscriptions will be processed.
     */
    async clientConfirm(request, options) {
        return unwrapAsync(checkoutsClientConfirm(this, request, options));
    }
}
//# sourceMappingURL=checkouts.js.map