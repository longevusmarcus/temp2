/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { benefitsCreate } from "../funcs/benefitsCreate.js";
import { benefitsDelete } from "../funcs/benefitsDelete.js";
import { benefitsGet } from "../funcs/benefitsGet.js";
import { benefitsGrants } from "../funcs/benefitsGrants.js";
import { benefitsList } from "../funcs/benefitsList.js";
import { benefitsUpdate } from "../funcs/benefitsUpdate.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class Benefits extends ClientSDK {
    /**
     * List Benefits
     *
     * @remarks
     * List benefits.
     *
     * **Scopes**: `benefits:read` `benefits:write`
     */
    async list(request, options) {
        return unwrapResultIterator(benefitsList(this, request, options));
    }
    /**
     * Create Benefit
     *
     * @remarks
     * Create a benefit.
     *
     * **Scopes**: `benefits:write`
     */
    async create(request, options) {
        return unwrapAsync(benefitsCreate(this, request, options));
    }
    /**
     * Get Benefit
     *
     * @remarks
     * Get a benefit by ID.
     *
     * **Scopes**: `benefits:read` `benefits:write`
     */
    async get(request, options) {
        return unwrapAsync(benefitsGet(this, request, options));
    }
    /**
     * Update Benefit
     *
     * @remarks
     * Update a benefit.
     *
     * **Scopes**: `benefits:write`
     */
    async update(request, options) {
        return unwrapAsync(benefitsUpdate(this, request, options));
    }
    /**
     * Delete Benefit
     *
     * @remarks
     * Delete a benefit.
     *
     * > [!WARNING]
     * > Every grants associated with the benefit will be revoked.
     * > Users will lose access to the benefit.
     *
     * **Scopes**: `benefits:write`
     */
    async delete(request, options) {
        return unwrapAsync(benefitsDelete(this, request, options));
    }
    /**
     * List Benefit Grants
     *
     * @remarks
     * List the individual grants for a benefit.
     *
     * It's especially useful to check if a user has been granted a benefit.
     *
     * **Scopes**: `benefits:read` `benefits:write`
     */
    async grants(request, options) {
        return unwrapResultIterator(benefitsGrants(this, request, options));
    }
}
//# sourceMappingURL=benefits.js.map