import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { RefundReason } from "./refundreason.js";
import { RefundStatus } from "./refundstatus.js";
export type RefundMetadata = string | number | boolean;
export type Refund = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    status: RefundStatus;
    reason: RefundReason;
    amount: number;
    taxAmount: number;
    currency: string;
    organizationId: string;
    orderId: string;
    subscriptionId: string | null;
    customerId: string;
    revokeBenefits: boolean;
};
/** @internal */
export declare const RefundMetadata$inboundSchema: z.ZodType<RefundMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type RefundMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const RefundMetadata$outboundSchema: z.ZodType<RefundMetadata$Outbound, z.ZodTypeDef, RefundMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RefundMetadata$ {
    /** @deprecated use `RefundMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RefundMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `RefundMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RefundMetadata$Outbound, z.ZodTypeDef, RefundMetadata>;
    /** @deprecated use `RefundMetadata$Outbound` instead. */
    type Outbound = RefundMetadata$Outbound;
}
export declare function refundMetadataToJSON(refundMetadata: RefundMetadata): string;
export declare function refundMetadataFromJSON(jsonString: string): SafeParseResult<RefundMetadata, SDKValidationError>;
/** @internal */
export declare const Refund$inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown>;
/** @internal */
export type Refund$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    status: string;
    reason: string;
    amount: number;
    tax_amount: number;
    currency: string;
    organization_id: string;
    order_id: string;
    subscription_id: string | null;
    customer_id: string;
    revoke_benefits: boolean;
};
/** @internal */
export declare const Refund$outboundSchema: z.ZodType<Refund$Outbound, z.ZodTypeDef, Refund>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Refund$ {
    /** @deprecated use `Refund$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown>;
    /** @deprecated use `Refund$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Refund$Outbound, z.ZodTypeDef, Refund>;
    /** @deprecated use `Refund$Outbound` instead. */
    type Outbound = Refund$Outbound;
}
export declare function refundToJSON(refund: Refund): string;
export declare function refundFromJSON(jsonString: string): SafeParseResult<Refund, SDKValidationError>;
//# sourceMappingURL=refund.d.ts.map