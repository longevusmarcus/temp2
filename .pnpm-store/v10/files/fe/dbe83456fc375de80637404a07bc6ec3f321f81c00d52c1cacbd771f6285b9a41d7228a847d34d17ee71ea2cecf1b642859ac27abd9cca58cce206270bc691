/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Conditions$inboundSchema = z.object({});
/** @internal */
export const Conditions$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Conditions$;
(function (Conditions$) {
    /** @deprecated use `Conditions$inboundSchema` instead. */
    Conditions$.inboundSchema = Conditions$inboundSchema;
    /** @deprecated use `Conditions$outboundSchema` instead. */
    Conditions$.outboundSchema = Conditions$outboundSchema;
})(Conditions$ || (Conditions$ = {}));
export function conditionsToJSON(conditions) {
    return JSON.stringify(Conditions$outboundSchema.parse(conditions));
}
export function conditionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Conditions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Conditions' from JSON`);
}
/** @internal */
export const LicenseKeyValidate$inboundSchema = z.object({
    key: z.string(),
    organization_id: z.string(),
    activation_id: z.nullable(z.string()).optional(),
    benefit_id: z.nullable(z.string()).optional(),
    customer_id: z.nullable(z.string()).optional(),
    increment_usage: z.nullable(z.number().int()).optional(),
    conditions: z.lazy(() => Conditions$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "activation_id": "activationId",
        "benefit_id": "benefitId",
        "customer_id": "customerId",
        "increment_usage": "incrementUsage",
    });
});
/** @internal */
export const LicenseKeyValidate$outboundSchema = z.object({
    key: z.string(),
    organizationId: z.string(),
    activationId: z.nullable(z.string()).optional(),
    benefitId: z.nullable(z.string()).optional(),
    customerId: z.nullable(z.string()).optional(),
    incrementUsage: z.nullable(z.number().int()).optional(),
    conditions: z.lazy(() => Conditions$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        activationId: "activation_id",
        benefitId: "benefit_id",
        customerId: "customer_id",
        incrementUsage: "increment_usage",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyValidate$;
(function (LicenseKeyValidate$) {
    /** @deprecated use `LicenseKeyValidate$inboundSchema` instead. */
    LicenseKeyValidate$.inboundSchema = LicenseKeyValidate$inboundSchema;
    /** @deprecated use `LicenseKeyValidate$outboundSchema` instead. */
    LicenseKeyValidate$.outboundSchema = LicenseKeyValidate$outboundSchema;
})(LicenseKeyValidate$ || (LicenseKeyValidate$ = {}));
export function licenseKeyValidateToJSON(licenseKeyValidate) {
    return JSON.stringify(LicenseKeyValidate$outboundSchema.parse(licenseKeyValidate));
}
export function licenseKeyValidateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyValidate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyValidate' from JSON`);
}
//# sourceMappingURL=licensekeyvalidate.js.map