/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { MetadataQuery$inboundSchema, MetadataQuery$outboundSchema, } from "../components/customerslist.js";
import { ListResourceMeter$inboundSchema, ListResourceMeter$outboundSchema, } from "../components/listresourcemeter.js";
import { MeterSortProperty$inboundSchema, MeterSortProperty$outboundSchema, } from "../components/metersortproperty.js";
/** @internal */
export const MetersListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const MetersListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetersListQueryParamOrganizationIDFilter$;
(function (MetersListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `MetersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    MetersListQueryParamOrganizationIDFilter$.inboundSchema = MetersListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `MetersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    MetersListQueryParamOrganizationIDFilter$.outboundSchema = MetersListQueryParamOrganizationIDFilter$outboundSchema;
})(MetersListQueryParamOrganizationIDFilter$ || (MetersListQueryParamOrganizationIDFilter$ = {}));
export function metersListQueryParamOrganizationIDFilterToJSON(metersListQueryParamOrganizationIDFilter) {
    return JSON.stringify(MetersListQueryParamOrganizationIDFilter$outboundSchema.parse(metersListQueryParamOrganizationIDFilter));
}
export function metersListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetersListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const MetersListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(MeterSortProperty$inboundSchema)).optional(),
    metadata: z.nullable(z.record(MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
export const MetersListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(MeterSortProperty$outboundSchema)).optional(),
    metadata: z.nullable(z.record(MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetersListRequest$;
(function (MetersListRequest$) {
    /** @deprecated use `MetersListRequest$inboundSchema` instead. */
    MetersListRequest$.inboundSchema = MetersListRequest$inboundSchema;
    /** @deprecated use `MetersListRequest$outboundSchema` instead. */
    MetersListRequest$.outboundSchema = MetersListRequest$outboundSchema;
})(MetersListRequest$ || (MetersListRequest$ = {}));
export function metersListRequestToJSON(metersListRequest) {
    return JSON.stringify(MetersListRequest$outboundSchema.parse(metersListRequest));
}
export function metersListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetersListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersListRequest' from JSON`);
}
/** @internal */
export const MetersListResponse$inboundSchema = z.object({
    Result: ListResourceMeter$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const MetersListResponse$outboundSchema = z.object({
    result: ListResourceMeter$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetersListResponse$;
(function (MetersListResponse$) {
    /** @deprecated use `MetersListResponse$inboundSchema` instead. */
    MetersListResponse$.inboundSchema = MetersListResponse$inboundSchema;
    /** @deprecated use `MetersListResponse$outboundSchema` instead. */
    MetersListResponse$.outboundSchema = MetersListResponse$outboundSchema;
})(MetersListResponse$ || (MetersListResponse$ = {}));
export function metersListResponseToJSON(metersListResponse) {
    return JSON.stringify(MetersListResponse$outboundSchema.parse(metersListResponse));
}
export function metersListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetersListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersListResponse' from JSON`);
}
//# sourceMappingURL=meterslist.js.map