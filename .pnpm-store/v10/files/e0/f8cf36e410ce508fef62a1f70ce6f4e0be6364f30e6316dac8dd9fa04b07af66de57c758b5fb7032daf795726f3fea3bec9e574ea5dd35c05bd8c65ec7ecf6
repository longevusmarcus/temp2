/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const OrderCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const OrderCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCustomerMetadata$;
(function (OrderCustomerMetadata$) {
    /** @deprecated use `OrderCustomerMetadata$inboundSchema` instead. */
    OrderCustomerMetadata$.inboundSchema = OrderCustomerMetadata$inboundSchema;
    /** @deprecated use `OrderCustomerMetadata$outboundSchema` instead. */
    OrderCustomerMetadata$.outboundSchema = OrderCustomerMetadata$outboundSchema;
})(OrderCustomerMetadata$ || (OrderCustomerMetadata$ = {}));
export function orderCustomerMetadataToJSON(orderCustomerMetadata) {
    return JSON.stringify(OrderCustomerMetadata$outboundSchema.parse(orderCustomerMetadata));
}
export function orderCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCustomerMetadata' from JSON`);
}
/** @internal */
export const OrderCustomerTaxId$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const OrderCustomerTaxId$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCustomerTaxId$;
(function (OrderCustomerTaxId$) {
    /** @deprecated use `OrderCustomerTaxId$inboundSchema` instead. */
    OrderCustomerTaxId$.inboundSchema = OrderCustomerTaxId$inboundSchema;
    /** @deprecated use `OrderCustomerTaxId$outboundSchema` instead. */
    OrderCustomerTaxId$.outboundSchema = OrderCustomerTaxId$outboundSchema;
})(OrderCustomerTaxId$ || (OrderCustomerTaxId$ = {}));
export function orderCustomerTaxIdToJSON(orderCustomerTaxId) {
    return JSON.stringify(OrderCustomerTaxId$outboundSchema.parse(orderCustomerTaxId));
}
export function orderCustomerTaxIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCustomerTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCustomerTaxId' from JSON`);
}
/** @internal */
export const OrderCustomer$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    external_id: z.nullable(z.string()),
    email: z.string(),
    email_verified: z.boolean(),
    name: z.nullable(z.string()),
    billing_address: z.nullable(Address$inboundSchema),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))),
    organization_id: z.string(),
    deleted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    avatar_url: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "external_id": "externalId",
        "email_verified": "emailVerified",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
        "deleted_at": "deletedAt",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
export const OrderCustomer$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    externalId: z.nullable(z.string()),
    email: z.string(),
    emailVerified: z.boolean(),
    name: z.nullable(z.string()),
    billingAddress: z.nullable(Address$outboundSchema),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))),
    organizationId: z.string(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
    avatarUrl: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        externalId: "external_id",
        emailVerified: "email_verified",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
        deletedAt: "deleted_at",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCustomer$;
(function (OrderCustomer$) {
    /** @deprecated use `OrderCustomer$inboundSchema` instead. */
    OrderCustomer$.inboundSchema = OrderCustomer$inboundSchema;
    /** @deprecated use `OrderCustomer$outboundSchema` instead. */
    OrderCustomer$.outboundSchema = OrderCustomer$outboundSchema;
})(OrderCustomer$ || (OrderCustomer$ = {}));
export function orderCustomerToJSON(orderCustomer) {
    return JSON.stringify(OrderCustomer$outboundSchema.parse(orderCustomer));
}
export function orderCustomerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCustomer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCustomer' from JSON`);
}
//# sourceMappingURL=ordercustomer.js.map