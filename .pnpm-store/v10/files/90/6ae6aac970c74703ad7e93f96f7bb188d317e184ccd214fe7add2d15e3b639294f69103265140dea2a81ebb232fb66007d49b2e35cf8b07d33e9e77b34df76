/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { dlv } from "../lib/dlv.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { HTTPValidationError$inboundSchema, } from "../models/errors/httpvalidationerror.js";
import { ResourceNotFound$inboundSchema, } from "../models/errors/resourcenotfound.js";
import { MetersEventsRequest$outboundSchema, MetersEventsResponse$inboundSchema, } from "../models/operations/metersevents.js";
import { APIPromise } from "../types/async.js";
import { createPageIterator, haltIterator, } from "../types/operations.js";
/**
 * Get Meter Events
 *
 * @remarks
 * Get events matching the filter of a meter.
 *
 * **Scopes**: `meters:read` `meters:write`
 */
export function metersEvents(client, request, options) {
    return new APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = safeParse(request, (value) => MetersEventsRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [haltIterator(parsed), { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        id: encodeSimple("id", payload.id, {
            explode: false,
            charEncoding: "percent",
        }),
    };
    const path = pathToFunc("/v1/meters/{id}/events")(pathParams);
    const query = encodeFormQuery({
        "limit": payload.limit,
        "page": payload.page,
    });
    const headers = new Headers(compactMap({
        Accept: "application/json",
    }));
    const secConfig = await extractSecurity(client._options.accessToken);
    const securityInput = secConfig == null ? {} : { accessToken: secConfig };
    const requestSecurity = resolveGlobalSecurity(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "meters:events",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.accessToken,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [haltIterator(requestRes), { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["404", "422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [haltIterator(doResult), { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result, raw] = await M.match(M.json(200, MetersEventsResponse$inboundSchema, { key: "Result" }), M.jsonErr(404, ResourceNotFound$inboundSchema), M.jsonErr(422, HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
    if (!result.ok) {
        return [haltIterator(result), {
                status: "complete",
                request: req,
                response,
            }];
    }
    const nextFunc = (responseData) => {
        const page = request?.page ?? 1;
        const nextPage = page + 1;
        const numPages = dlv(responseData, "pagination.max_page");
        if (typeof numPages !== "number" || numPages <= page) {
            return { next: () => null };
        }
        if (!responseData) {
            return { next: () => null };
        }
        const results = dlv(responseData, "items");
        if (!Array.isArray(results) || !results.length) {
            return { next: () => null };
        }
        const limit = request?.limit ?? 10;
        if (results.length < limit) {
            return { next: () => null };
        }
        const nextVal = () => metersEvents(client, {
            ...request,
            page: nextPage,
        }, options);
        return { next: nextVal, "~next": { page: nextPage } };
    };
    const page = { ...result, ...nextFunc(raw) };
    return [{ ...page, ...createPageIterator(page, (v) => !v.ok) }, {
            status: "complete",
            request: req,
            response,
        }];
}
//# sourceMappingURL=metersEvents.js.map