/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const LicenseKeyCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const LicenseKeyCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyCustomerMetadata$;
(function (LicenseKeyCustomerMetadata$) {
    /** @deprecated use `LicenseKeyCustomerMetadata$inboundSchema` instead. */
    LicenseKeyCustomerMetadata$.inboundSchema = LicenseKeyCustomerMetadata$inboundSchema;
    /** @deprecated use `LicenseKeyCustomerMetadata$outboundSchema` instead. */
    LicenseKeyCustomerMetadata$.outboundSchema = LicenseKeyCustomerMetadata$outboundSchema;
})(LicenseKeyCustomerMetadata$ || (LicenseKeyCustomerMetadata$ = {}));
export function licenseKeyCustomerMetadataToJSON(licenseKeyCustomerMetadata) {
    return JSON.stringify(LicenseKeyCustomerMetadata$outboundSchema.parse(licenseKeyCustomerMetadata));
}
export function licenseKeyCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyCustomerMetadata' from JSON`);
}
/** @internal */
export const LicenseKeyCustomerTaxId$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const LicenseKeyCustomerTaxId$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyCustomerTaxId$;
(function (LicenseKeyCustomerTaxId$) {
    /** @deprecated use `LicenseKeyCustomerTaxId$inboundSchema` instead. */
    LicenseKeyCustomerTaxId$.inboundSchema = LicenseKeyCustomerTaxId$inboundSchema;
    /** @deprecated use `LicenseKeyCustomerTaxId$outboundSchema` instead. */
    LicenseKeyCustomerTaxId$.outboundSchema = LicenseKeyCustomerTaxId$outboundSchema;
})(LicenseKeyCustomerTaxId$ || (LicenseKeyCustomerTaxId$ = {}));
export function licenseKeyCustomerTaxIdToJSON(licenseKeyCustomerTaxId) {
    return JSON.stringify(LicenseKeyCustomerTaxId$outboundSchema.parse(licenseKeyCustomerTaxId));
}
export function licenseKeyCustomerTaxIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyCustomerTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyCustomerTaxId' from JSON`);
}
/** @internal */
export const LicenseKeyCustomer$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    external_id: z.nullable(z.string()),
    email: z.string(),
    email_verified: z.boolean(),
    name: z.nullable(z.string()),
    billing_address: z.nullable(Address$inboundSchema),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))),
    organization_id: z.string(),
    deleted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    avatar_url: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "external_id": "externalId",
        "email_verified": "emailVerified",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
        "deleted_at": "deletedAt",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
export const LicenseKeyCustomer$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    externalId: z.nullable(z.string()),
    email: z.string(),
    emailVerified: z.boolean(),
    name: z.nullable(z.string()),
    billingAddress: z.nullable(Address$outboundSchema),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))),
    organizationId: z.string(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
    avatarUrl: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        externalId: "external_id",
        emailVerified: "email_verified",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
        deletedAt: "deleted_at",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyCustomer$;
(function (LicenseKeyCustomer$) {
    /** @deprecated use `LicenseKeyCustomer$inboundSchema` instead. */
    LicenseKeyCustomer$.inboundSchema = LicenseKeyCustomer$inboundSchema;
    /** @deprecated use `LicenseKeyCustomer$outboundSchema` instead. */
    LicenseKeyCustomer$.outboundSchema = LicenseKeyCustomer$outboundSchema;
})(LicenseKeyCustomer$ || (LicenseKeyCustomer$ = {}));
export function licenseKeyCustomerToJSON(licenseKeyCustomer) {
    return JSON.stringify(LicenseKeyCustomer$outboundSchema.parse(licenseKeyCustomer));
}
export function licenseKeyCustomerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyCustomer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyCustomer' from JSON`);
}
//# sourceMappingURL=licensekeycustomer.js.map