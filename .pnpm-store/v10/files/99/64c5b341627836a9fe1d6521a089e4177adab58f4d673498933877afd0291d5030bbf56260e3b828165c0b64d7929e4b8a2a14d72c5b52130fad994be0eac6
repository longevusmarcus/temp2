/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { SubscriptionProrationBehavior$inboundSchema, SubscriptionProrationBehavior$outboundSchema, } from "./subscriptionprorationbehavior.js";
/** @internal */
export const OrganizationSubscriptionSettings$inboundSchema = z.object({
    allow_multiple_subscriptions: z.boolean(),
    allow_customer_updates: z.boolean(),
    proration_behavior: SubscriptionProrationBehavior$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "allow_multiple_subscriptions": "allowMultipleSubscriptions",
        "allow_customer_updates": "allowCustomerUpdates",
        "proration_behavior": "prorationBehavior",
    });
});
/** @internal */
export const OrganizationSubscriptionSettings$outboundSchema = z.object({
    allowMultipleSubscriptions: z.boolean(),
    allowCustomerUpdates: z.boolean(),
    prorationBehavior: SubscriptionProrationBehavior$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        allowMultipleSubscriptions: "allow_multiple_subscriptions",
        allowCustomerUpdates: "allow_customer_updates",
        prorationBehavior: "proration_behavior",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrganizationSubscriptionSettings$;
(function (OrganizationSubscriptionSettings$) {
    /** @deprecated use `OrganizationSubscriptionSettings$inboundSchema` instead. */
    OrganizationSubscriptionSettings$.inboundSchema = OrganizationSubscriptionSettings$inboundSchema;
    /** @deprecated use `OrganizationSubscriptionSettings$outboundSchema` instead. */
    OrganizationSubscriptionSettings$.outboundSchema = OrganizationSubscriptionSettings$outboundSchema;
})(OrganizationSubscriptionSettings$ || (OrganizationSubscriptionSettings$ = {}));
export function organizationSubscriptionSettingsToJSON(organizationSubscriptionSettings) {
    return JSON.stringify(OrganizationSubscriptionSettings$outboundSchema.parse(organizationSubscriptionSettings));
}
export function organizationSubscriptionSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrganizationSubscriptionSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrganizationSubscriptionSettings' from JSON`);
}
//# sourceMappingURL=organizationsubscriptionsettings.js.map