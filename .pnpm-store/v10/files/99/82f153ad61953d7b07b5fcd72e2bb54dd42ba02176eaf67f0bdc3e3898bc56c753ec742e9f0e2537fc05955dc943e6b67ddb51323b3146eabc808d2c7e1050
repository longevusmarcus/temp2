"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolarSubscriptions = void 0;
const customerPortalSubscriptionsCancel_js_1 = require("../funcs/customerPortalSubscriptionsCancel.js");
const customerPortalSubscriptionsGet_js_1 = require("../funcs/customerPortalSubscriptionsGet.js");
const customerPortalSubscriptionsList_js_1 = require("../funcs/customerPortalSubscriptionsList.js");
const customerPortalSubscriptionsUpdate_js_1 = require("../funcs/customerPortalSubscriptionsUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class PolarSubscriptions extends sdks_js_1.ClientSDK {
    /**
     * List Subscriptions
     *
     * @remarks
     * List subscriptions of the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async list(security, request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, customerPortalSubscriptionsList_js_1.customerPortalSubscriptionsList)(this, security, request, options));
    }
    /**
     * Get Subscription
     *
     * @remarks
     * Get a subscription for the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async get(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalSubscriptionsGet_js_1.customerPortalSubscriptionsGet)(this, security, request, options));
    }
    /**
     * Update Subscription
     *
     * @remarks
     * Update a subscription of the authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    async update(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalSubscriptionsUpdate_js_1.customerPortalSubscriptionsUpdate)(this, security, request, options));
    }
    /**
     * Cancel Subscription
     *
     * @remarks
     * Cancel a subscription of the authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    async cancel(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalSubscriptionsCancel_js_1.customerPortalSubscriptionsCancel)(this, security, request, options));
    }
}
exports.PolarSubscriptions = PolarSubscriptions;
//# sourceMappingURL=polarsubscriptions.js.map