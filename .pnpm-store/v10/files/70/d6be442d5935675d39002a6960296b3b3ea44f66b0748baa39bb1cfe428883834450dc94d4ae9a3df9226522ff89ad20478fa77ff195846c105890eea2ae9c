/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerCancellationReason$inboundSchema, CustomerCancellationReason$outboundSchema, } from "./customercancellationreason.js";
/** @internal */
export const CustomerSubscriptionCancel$inboundSchema = z.object({
    cancel_at_period_end: z.nullable(z.boolean()).optional(),
    cancellation_reason: z.nullable(CustomerCancellationReason$inboundSchema)
        .optional(),
    cancellation_comment: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "cancel_at_period_end": "cancelAtPeriodEnd",
        "cancellation_reason": "cancellationReason",
        "cancellation_comment": "cancellationComment",
    });
});
/** @internal */
export const CustomerSubscriptionCancel$outboundSchema = z.object({
    cancelAtPeriodEnd: z.nullable(z.boolean()).optional(),
    cancellationReason: z.nullable(CustomerCancellationReason$outboundSchema)
        .optional(),
    cancellationComment: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        cancelAtPeriodEnd: "cancel_at_period_end",
        cancellationReason: "cancellation_reason",
        cancellationComment: "cancellation_comment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerSubscriptionCancel$;
(function (CustomerSubscriptionCancel$) {
    /** @deprecated use `CustomerSubscriptionCancel$inboundSchema` instead. */
    CustomerSubscriptionCancel$.inboundSchema = CustomerSubscriptionCancel$inboundSchema;
    /** @deprecated use `CustomerSubscriptionCancel$outboundSchema` instead. */
    CustomerSubscriptionCancel$.outboundSchema = CustomerSubscriptionCancel$outboundSchema;
})(CustomerSubscriptionCancel$ || (CustomerSubscriptionCancel$ = {}));
export function customerSubscriptionCancelToJSON(customerSubscriptionCancel) {
    return JSON.stringify(CustomerSubscriptionCancel$outboundSchema.parse(customerSubscriptionCancel));
}
export function customerSubscriptionCancelFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerSubscriptionCancel$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerSubscriptionCancel' from JSON`);
}
//# sourceMappingURL=customersubscriptioncancel.js.map