/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { CustomerPortalCustomer$inboundSchema, } from "../models/components/customerportalcustomer.js";
import { APIPromise } from "../types/async.js";
/**
 * Get Customer
 *
 * @remarks
 * Get authenticated customer.
 *
 * **Scopes**: `customer_portal:read` `customer_portal:write`
 */
export function customerPortalCustomersGet(client, security, options) {
    return new APIPromise($do(client, security, options));
}
async function $do(client, security, options) {
    const path = pathToFunc("/v1/customer-portal/customers/me")();
    const headers = new Headers(compactMap({
        Accept: "application/json",
    }));
    const requestSecurity = resolveSecurity([
        {
            fieldName: "Authorization",
            type: "http:bearer",
            value: security?.customerSession,
        },
    ]);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "customer_portal:customers:get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: security,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, CustomerPortalCustomer$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
    }
    return [result, { status: "complete", request: req, response }];
}
//# sourceMappingURL=customerPortalCustomersGet.js.map