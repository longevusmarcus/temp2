"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductUpdate$ = exports.ProductUpdate$outboundSchema = exports.ProductUpdate$inboundSchema = exports.ProductUpdatePrices$ = exports.ProductUpdatePrices$outboundSchema = exports.ProductUpdatePrices$inboundSchema = exports.ProductUpdateMetadata$ = exports.ProductUpdateMetadata$outboundSchema = exports.ProductUpdateMetadata$inboundSchema = void 0;
exports.productUpdateMetadataToJSON = productUpdateMetadataToJSON;
exports.productUpdateMetadataFromJSON = productUpdateMetadataFromJSON;
exports.productUpdatePricesToJSON = productUpdatePricesToJSON;
exports.productUpdatePricesFromJSON = productUpdatePricesFromJSON;
exports.productUpdateToJSON = productUpdateToJSON;
exports.productUpdateFromJSON = productUpdateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const attachedcustomfieldcreate_js_1 = require("./attachedcustomfieldcreate.js");
const existingproductprice_js_1 = require("./existingproductprice.js");
const productpricecustomcreate_js_1 = require("./productpricecustomcreate.js");
const productpricefixedcreate_js_1 = require("./productpricefixedcreate.js");
const productpricefreecreate_js_1 = require("./productpricefreecreate.js");
const subscriptionrecurringinterval_js_1 = require("./subscriptionrecurringinterval.js");
/** @internal */
exports.ProductUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.ProductUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ProductUpdateMetadata$;
(function (ProductUpdateMetadata$) {
    /** @deprecated use `ProductUpdateMetadata$inboundSchema` instead. */
    ProductUpdateMetadata$.inboundSchema = exports.ProductUpdateMetadata$inboundSchema;
    /** @deprecated use `ProductUpdateMetadata$outboundSchema` instead. */
    ProductUpdateMetadata$.outboundSchema = exports.ProductUpdateMetadata$outboundSchema;
})(ProductUpdateMetadata$ || (exports.ProductUpdateMetadata$ = ProductUpdateMetadata$ = {}));
function productUpdateMetadataToJSON(productUpdateMetadata) {
    return JSON.stringify(exports.ProductUpdateMetadata$outboundSchema.parse(productUpdateMetadata));
}
function productUpdateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ProductUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductUpdateMetadata' from JSON`);
}
/** @internal */
exports.ProductUpdatePrices$inboundSchema = z.union([
    existingproductprice_js_1.ExistingProductPrice$inboundSchema,
    productpricefreecreate_js_1.ProductPriceFreeCreate$inboundSchema,
    productpricefixedcreate_js_1.ProductPriceFixedCreate$inboundSchema,
    productpricecustomcreate_js_1.ProductPriceCustomCreate$inboundSchema,
]);
/** @internal */
exports.ProductUpdatePrices$outboundSchema = z.union([
    existingproductprice_js_1.ExistingProductPrice$outboundSchema,
    productpricefreecreate_js_1.ProductPriceFreeCreate$outboundSchema,
    productpricefixedcreate_js_1.ProductPriceFixedCreate$outboundSchema,
    productpricecustomcreate_js_1.ProductPriceCustomCreate$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ProductUpdatePrices$;
(function (ProductUpdatePrices$) {
    /** @deprecated use `ProductUpdatePrices$inboundSchema` instead. */
    ProductUpdatePrices$.inboundSchema = exports.ProductUpdatePrices$inboundSchema;
    /** @deprecated use `ProductUpdatePrices$outboundSchema` instead. */
    ProductUpdatePrices$.outboundSchema = exports.ProductUpdatePrices$outboundSchema;
})(ProductUpdatePrices$ || (exports.ProductUpdatePrices$ = ProductUpdatePrices$ = {}));
function productUpdatePricesToJSON(productUpdatePrices) {
    return JSON.stringify(exports.ProductUpdatePrices$outboundSchema.parse(productUpdatePrices));
}
function productUpdatePricesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ProductUpdatePrices$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductUpdatePrices' from JSON`);
}
/** @internal */
exports.ProductUpdate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    recurring_interval: z.nullable(subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$inboundSchema)
        .optional(),
    is_archived: z.nullable(z.boolean()).optional(),
    prices: z.nullable(z.array(z.union([
        existingproductprice_js_1.ExistingProductPrice$inboundSchema,
        productpricefreecreate_js_1.ProductPriceFreeCreate$inboundSchema,
        productpricefixedcreate_js_1.ProductPriceFixedCreate$inboundSchema,
        productpricecustomcreate_js_1.ProductPriceCustomCreate$inboundSchema,
    ]))).optional(),
    medias: z.nullable(z.array(z.string())).optional(),
    attached_custom_fields: z.nullable(z.array(attachedcustomfieldcreate_js_1.AttachedCustomFieldCreate$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "recurring_interval": "recurringInterval",
        "is_archived": "isArchived",
        "attached_custom_fields": "attachedCustomFields",
    });
});
/** @internal */
exports.ProductUpdate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    recurringInterval: z.nullable(subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$outboundSchema)
        .optional(),
    isArchived: z.nullable(z.boolean()).optional(),
    prices: z.nullable(z.array(z.union([
        existingproductprice_js_1.ExistingProductPrice$outboundSchema,
        productpricefreecreate_js_1.ProductPriceFreeCreate$outboundSchema,
        productpricefixedcreate_js_1.ProductPriceFixedCreate$outboundSchema,
        productpricecustomcreate_js_1.ProductPriceCustomCreate$outboundSchema,
    ]))).optional(),
    medias: z.nullable(z.array(z.string())).optional(),
    attachedCustomFields: z.nullable(z.array(attachedcustomfieldcreate_js_1.AttachedCustomFieldCreate$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        recurringInterval: "recurring_interval",
        isArchived: "is_archived",
        attachedCustomFields: "attached_custom_fields",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ProductUpdate$;
(function (ProductUpdate$) {
    /** @deprecated use `ProductUpdate$inboundSchema` instead. */
    ProductUpdate$.inboundSchema = exports.ProductUpdate$inboundSchema;
    /** @deprecated use `ProductUpdate$outboundSchema` instead. */
    ProductUpdate$.outboundSchema = exports.ProductUpdate$outboundSchema;
})(ProductUpdate$ || (exports.ProductUpdate$ = ProductUpdate$ = {}));
function productUpdateToJSON(productUpdate) {
    return JSON.stringify(exports.ProductUpdate$outboundSchema.parse(productUpdate));
}
function productUpdateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ProductUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductUpdate' from JSON`);
}
//# sourceMappingURL=productupdate.js.map