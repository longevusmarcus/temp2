/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { RFCDate } from "../../types/rfcdate.js";
import { MetricsIntervalsLimits$inboundSchema, MetricsIntervalsLimits$outboundSchema, } from "./metricsintervalslimits.js";
/** @internal */
export const MetricsLimits$inboundSchema = z.object({
    min_date: z.string().transform(v => new RFCDate(v)),
    intervals: MetricsIntervalsLimits$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "min_date": "minDate",
    });
});
/** @internal */
export const MetricsLimits$outboundSchema = z.object({
    minDate: z.instanceof(RFCDate).transform(v => v.toString()),
    intervals: MetricsIntervalsLimits$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        minDate: "min_date",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsLimits$;
(function (MetricsLimits$) {
    /** @deprecated use `MetricsLimits$inboundSchema` instead. */
    MetricsLimits$.inboundSchema = MetricsLimits$inboundSchema;
    /** @deprecated use `MetricsLimits$outboundSchema` instead. */
    MetricsLimits$.outboundSchema = MetricsLimits$outboundSchema;
})(MetricsLimits$ || (MetricsLimits$ = {}));
export function metricsLimitsToJSON(metricsLimits) {
    return JSON.stringify(MetricsLimits$outboundSchema.parse(metricsLimits));
}
export function metricsLimitsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsLimits$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsLimits' from JSON`);
}
//# sourceMappingURL=metricslimits.js.map