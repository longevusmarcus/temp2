/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { MetricType$inboundSchema, MetricType$outboundSchema, } from "./metrictype.js";
/** @internal */
export const Metric$inboundSchema = z
    .object({
    slug: z.string(),
    display_name: z.string(),
    type: MetricType$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "display_name": "displayName",
    });
});
/** @internal */
export const Metric$outboundSchema = z.object({
    slug: z.string(),
    displayName: z.string(),
    type: MetricType$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        displayName: "display_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Metric$;
(function (Metric$) {
    /** @deprecated use `Metric$inboundSchema` instead. */
    Metric$.inboundSchema = Metric$inboundSchema;
    /** @deprecated use `Metric$outboundSchema` instead. */
    Metric$.outboundSchema = Metric$outboundSchema;
})(Metric$ || (Metric$ = {}));
export function metricToJSON(metric) {
    return JSON.stringify(Metric$outboundSchema.parse(metric));
}
export function metricFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Metric$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Metric' from JSON`);
}
//# sourceMappingURL=metric.js.map