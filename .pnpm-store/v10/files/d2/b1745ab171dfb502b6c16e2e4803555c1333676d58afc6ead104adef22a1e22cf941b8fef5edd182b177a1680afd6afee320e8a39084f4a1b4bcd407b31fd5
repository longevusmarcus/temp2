import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SubscriptionRecurringInterval } from "./subscriptionrecurringinterval.js";
export type CustomerStateSubscriptionCustomFieldData = string | number | boolean | Date;
export type CustomerStateSubscriptionMetadata = string | number | boolean;
/**
 * An active customer subscription.
 */
export type CustomerStateSubscription = {
    /**
     * The ID of the subscription.
     */
    id: string;
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: {
        [k: string]: string | number | boolean | Date | null;
    } | undefined;
    metadata: {
        [k: string]: string | number | boolean;
    };
    status?: "active" | undefined;
    /**
     * The amount of the subscription.
     */
    amount: number;
    /**
     * The currency of the subscription.
     */
    currency: string;
    recurringInterval: SubscriptionRecurringInterval;
    /**
     * The start timestamp of the current billing period.
     */
    currentPeriodStart: Date;
    /**
     * The end timestamp of the current billing period.
     */
    currentPeriodEnd: Date | null;
    /**
     * Whether the subscription will be canceled at the end of the current period.
     */
    cancelAtPeriodEnd: boolean;
    /**
     * The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`.
     */
    canceledAt: Date | null;
    /**
     * The timestamp when the subscription started.
     */
    startedAt: Date | null;
    /**
     * The timestamp when the subscription will end.
     */
    endsAt: Date | null;
    /**
     * The ID of the subscribed product.
     */
    productId: string;
    /**
     * The ID of the applied discount, if any.
     */
    discountId: string | null;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    priceId: string;
};
/** @internal */
export declare const CustomerStateSubscriptionCustomFieldData$inboundSchema: z.ZodType<CustomerStateSubscriptionCustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerStateSubscriptionCustomFieldData$Outbound = string | number | boolean | string;
/** @internal */
export declare const CustomerStateSubscriptionCustomFieldData$outboundSchema: z.ZodType<CustomerStateSubscriptionCustomFieldData$Outbound, z.ZodTypeDef, CustomerStateSubscriptionCustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerStateSubscriptionCustomFieldData$ {
    /** @deprecated use `CustomerStateSubscriptionCustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerStateSubscriptionCustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerStateSubscriptionCustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerStateSubscriptionCustomFieldData$Outbound, z.ZodTypeDef, CustomerStateSubscriptionCustomFieldData>;
    /** @deprecated use `CustomerStateSubscriptionCustomFieldData$Outbound` instead. */
    type Outbound = CustomerStateSubscriptionCustomFieldData$Outbound;
}
export declare function customerStateSubscriptionCustomFieldDataToJSON(customerStateSubscriptionCustomFieldData: CustomerStateSubscriptionCustomFieldData): string;
export declare function customerStateSubscriptionCustomFieldDataFromJSON(jsonString: string): SafeParseResult<CustomerStateSubscriptionCustomFieldData, SDKValidationError>;
/** @internal */
export declare const CustomerStateSubscriptionMetadata$inboundSchema: z.ZodType<CustomerStateSubscriptionMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerStateSubscriptionMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomerStateSubscriptionMetadata$outboundSchema: z.ZodType<CustomerStateSubscriptionMetadata$Outbound, z.ZodTypeDef, CustomerStateSubscriptionMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerStateSubscriptionMetadata$ {
    /** @deprecated use `CustomerStateSubscriptionMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerStateSubscriptionMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerStateSubscriptionMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerStateSubscriptionMetadata$Outbound, z.ZodTypeDef, CustomerStateSubscriptionMetadata>;
    /** @deprecated use `CustomerStateSubscriptionMetadata$Outbound` instead. */
    type Outbound = CustomerStateSubscriptionMetadata$Outbound;
}
export declare function customerStateSubscriptionMetadataToJSON(customerStateSubscriptionMetadata: CustomerStateSubscriptionMetadata): string;
export declare function customerStateSubscriptionMetadataFromJSON(jsonString: string): SafeParseResult<CustomerStateSubscriptionMetadata, SDKValidationError>;
/** @internal */
export declare const CustomerStateSubscription$inboundSchema: z.ZodType<CustomerStateSubscription, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerStateSubscription$Outbound = {
    id: string;
    created_at: string;
    modified_at: string | null;
    custom_field_data?: {
        [k: string]: string | number | boolean | string | null;
    } | undefined;
    metadata: {
        [k: string]: string | number | boolean;
    };
    status: "active";
    amount: number;
    currency: string;
    recurring_interval: string;
    current_period_start: string;
    current_period_end: string | null;
    cancel_at_period_end: boolean;
    canceled_at: string | null;
    started_at: string | null;
    ends_at: string | null;
    product_id: string;
    discount_id: string | null;
    price_id: string;
};
/** @internal */
export declare const CustomerStateSubscription$outboundSchema: z.ZodType<CustomerStateSubscription$Outbound, z.ZodTypeDef, CustomerStateSubscription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerStateSubscription$ {
    /** @deprecated use `CustomerStateSubscription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerStateSubscription, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerStateSubscription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerStateSubscription$Outbound, z.ZodTypeDef, CustomerStateSubscription>;
    /** @deprecated use `CustomerStateSubscription$Outbound` instead. */
    type Outbound = CustomerStateSubscription$Outbound;
}
export declare function customerStateSubscriptionToJSON(customerStateSubscription: CustomerStateSubscription): string;
export declare function customerStateSubscriptionFromJSON(jsonString: string): SafeParseResult<CustomerStateSubscription, SDKValidationError>;
//# sourceMappingURL=customerstatesubscription.d.ts.map