/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { LicenseKeyRead$inboundSchema, LicenseKeyRead$outboundSchema, } from "./licensekeyread.js";
/** @internal */
export const LicenseKeyActivationReadMeta$inboundSchema = z.object({});
/** @internal */
export const LicenseKeyActivationReadMeta$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyActivationReadMeta$;
(function (LicenseKeyActivationReadMeta$) {
    /** @deprecated use `LicenseKeyActivationReadMeta$inboundSchema` instead. */
    LicenseKeyActivationReadMeta$.inboundSchema = LicenseKeyActivationReadMeta$inboundSchema;
    /** @deprecated use `LicenseKeyActivationReadMeta$outboundSchema` instead. */
    LicenseKeyActivationReadMeta$.outboundSchema = LicenseKeyActivationReadMeta$outboundSchema;
})(LicenseKeyActivationReadMeta$ || (LicenseKeyActivationReadMeta$ = {}));
export function licenseKeyActivationReadMetaToJSON(licenseKeyActivationReadMeta) {
    return JSON.stringify(LicenseKeyActivationReadMeta$outboundSchema.parse(licenseKeyActivationReadMeta));
}
export function licenseKeyActivationReadMetaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyActivationReadMeta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyActivationReadMeta' from JSON`);
}
/** @internal */
export const LicenseKeyActivationRead$inboundSchema = z.object({
    id: z.string(),
    license_key_id: z.string(),
    label: z.string(),
    meta: z.lazy(() => LicenseKeyActivationReadMeta$inboundSchema),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    license_key: LicenseKeyRead$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "license_key_id": "licenseKeyId",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "license_key": "licenseKey",
    });
});
/** @internal */
export const LicenseKeyActivationRead$outboundSchema = z.object({
    id: z.string(),
    licenseKeyId: z.string(),
    label: z.string(),
    meta: z.lazy(() => LicenseKeyActivationReadMeta$outboundSchema),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    licenseKey: LicenseKeyRead$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        licenseKeyId: "license_key_id",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        licenseKey: "license_key",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyActivationRead$;
(function (LicenseKeyActivationRead$) {
    /** @deprecated use `LicenseKeyActivationRead$inboundSchema` instead. */
    LicenseKeyActivationRead$.inboundSchema = LicenseKeyActivationRead$inboundSchema;
    /** @deprecated use `LicenseKeyActivationRead$outboundSchema` instead. */
    LicenseKeyActivationRead$.outboundSchema = LicenseKeyActivationRead$outboundSchema;
})(LicenseKeyActivationRead$ || (LicenseKeyActivationRead$ = {}));
export function licenseKeyActivationReadToJSON(licenseKeyActivationRead) {
    return JSON.stringify(LicenseKeyActivationRead$outboundSchema.parse(licenseKeyActivationRead));
}
export function licenseKeyActivationReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyActivationRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyActivationRead' from JSON`);
}
//# sourceMappingURL=licensekeyactivationread.js.map