/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { MetadataQuery$inboundSchema, MetadataQuery$outboundSchema, } from "../components/customerslist.js";
import { CustomerSortProperty$inboundSchema, CustomerSortProperty$outboundSchema, } from "../components/customersortproperty.js";
import { ListResourceCustomer$inboundSchema, ListResourceCustomer$outboundSchema, } from "../components/listresourcecustomer.js";
/** @internal */
export const CustomersListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CustomersListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomersListQueryParamOrganizationIDFilter$;
(function (CustomersListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `CustomersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    CustomersListQueryParamOrganizationIDFilter$.inboundSchema = CustomersListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `CustomersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    CustomersListQueryParamOrganizationIDFilter$.outboundSchema = CustomersListQueryParamOrganizationIDFilter$outboundSchema;
})(CustomersListQueryParamOrganizationIDFilter$ || (CustomersListQueryParamOrganizationIDFilter$ = {}));
export function customersListQueryParamOrganizationIDFilterToJSON(customersListQueryParamOrganizationIDFilter) {
    return JSON.stringify(CustomersListQueryParamOrganizationIDFilter$outboundSchema.parse(customersListQueryParamOrganizationIDFilter));
}
export function customersListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomersListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomersListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const CustomersListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    email: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CustomerSortProperty$inboundSchema)).optional(),
    metadata: z.nullable(z.record(z.lazy(() => MetadataQuery$inboundSchema)))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CustomersListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    email: z.nullable(z.string()).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CustomerSortProperty$outboundSchema)).optional(),
    metadata: z.nullable(z.record(z.lazy(() => MetadataQuery$outboundSchema)))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomersListRequest$;
(function (CustomersListRequest$) {
    /** @deprecated use `CustomersListRequest$inboundSchema` instead. */
    CustomersListRequest$.inboundSchema = CustomersListRequest$inboundSchema;
    /** @deprecated use `CustomersListRequest$outboundSchema` instead. */
    CustomersListRequest$.outboundSchema = CustomersListRequest$outboundSchema;
})(CustomersListRequest$ || (CustomersListRequest$ = {}));
export function customersListRequestToJSON(customersListRequest) {
    return JSON.stringify(CustomersListRequest$outboundSchema.parse(customersListRequest));
}
export function customersListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomersListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomersListRequest' from JSON`);
}
/** @internal */
export const CustomersListResponse$inboundSchema = z.object({
    Result: ListResourceCustomer$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const CustomersListResponse$outboundSchema = z.object({
    result: ListResourceCustomer$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomersListResponse$;
(function (CustomersListResponse$) {
    /** @deprecated use `CustomersListResponse$inboundSchema` instead. */
    CustomersListResponse$.inboundSchema = CustomersListResponse$inboundSchema;
    /** @deprecated use `CustomersListResponse$outboundSchema` instead. */
    CustomersListResponse$.outboundSchema = CustomersListResponse$outboundSchema;
})(CustomersListResponse$ || (CustomersListResponse$ = {}));
export function customersListResponseToJSON(customersListResponse) {
    return JSON.stringify(CustomersListResponse$outboundSchema.parse(customersListResponse));
}
export function customersListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomersListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomersListResponse' from JSON`);
}
//# sourceMappingURL=customerslist.js.map