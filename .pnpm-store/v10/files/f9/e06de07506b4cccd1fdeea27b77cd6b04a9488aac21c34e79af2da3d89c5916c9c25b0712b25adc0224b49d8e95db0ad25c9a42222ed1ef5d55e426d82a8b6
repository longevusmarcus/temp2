import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { Meter } from "../models/components/meter.js";
import { MeterCreate } from "../models/components/metercreate.js";
import { MeterQuantities } from "../models/components/meterquantities.js";
import { MetersEventsRequest, MetersEventsResponse } from "../models/operations/metersevents.js";
import { MetersGetRequest } from "../models/operations/metersget.js";
import { MetersListRequest, MetersListResponse } from "../models/operations/meterslist.js";
import { MetersQuantitiesRequest } from "../models/operations/metersquantities.js";
import { MetersUpdateRequest } from "../models/operations/metersupdate.js";
import { PageIterator } from "../types/operations.js";
export declare class Meters extends ClientSDK {
    /**
     * List Meters
     *
     * @remarks
     * List meters.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    list(request: MetersListRequest, options?: RequestOptions): Promise<PageIterator<MetersListResponse, {
        page: number;
    }>>;
    /**
     * Create Meter
     *
     * @remarks
     * Create a meter.
     *
     * **Scopes**: `meters:write`
     */
    create(request: MeterCreate, options?: RequestOptions): Promise<Meter>;
    /**
     * Get Meter
     *
     * @remarks
     * Get a meter by ID.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    get(request: MetersGetRequest, options?: RequestOptions): Promise<Meter>;
    /**
     * Update Meter
     *
     * @remarks
     * Update a meter.
     *
     * **Scopes**: `meters:write`
     */
    update(request: MetersUpdateRequest, options?: RequestOptions): Promise<Meter>;
    /**
     * Get Meter Events
     *
     * @remarks
     * Get events matching the filter of a meter.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    events(request: MetersEventsRequest, options?: RequestOptions): Promise<PageIterator<MetersEventsResponse, {
        page: number;
    }>>;
    /**
     * Get Meter Quantities
     *
     * @remarks
     * Get quantities of a meter over a time period.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    quantities(request: MetersQuantitiesRequest, options?: RequestOptions): Promise<MeterQuantities>;
}
//# sourceMappingURL=meters.d.ts.map