import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomerBenefitGrantCustom, CustomerBenefitGrantCustom$Outbound } from "./customerbenefitgrantcustom.js";
import { CustomerBenefitGrantDiscord, CustomerBenefitGrantDiscord$Outbound } from "./customerbenefitgrantdiscord.js";
import { CustomerBenefitGrantDownloadables, CustomerBenefitGrantDownloadables$Outbound } from "./customerbenefitgrantdownloadables.js";
import { CustomerBenefitGrantGitHubRepository, CustomerBenefitGrantGitHubRepository$Outbound } from "./customerbenefitgrantgithubrepository.js";
import { CustomerBenefitGrantLicenseKeys, CustomerBenefitGrantLicenseKeys$Outbound } from "./customerbenefitgrantlicensekeys.js";
export type CustomerBenefitGrant = CustomerBenefitGrantDiscord | CustomerBenefitGrantGitHubRepository | CustomerBenefitGrantDownloadables | CustomerBenefitGrantLicenseKeys | CustomerBenefitGrantCustom;
/** @internal */
export declare const CustomerBenefitGrant$inboundSchema: z.ZodType<CustomerBenefitGrant, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerBenefitGrant$Outbound = CustomerBenefitGrantDiscord$Outbound | CustomerBenefitGrantGitHubRepository$Outbound | CustomerBenefitGrantDownloadables$Outbound | CustomerBenefitGrantLicenseKeys$Outbound | CustomerBenefitGrantCustom$Outbound;
/** @internal */
export declare const CustomerBenefitGrant$outboundSchema: z.ZodType<CustomerBenefitGrant$Outbound, z.ZodTypeDef, CustomerBenefitGrant>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerBenefitGrant$ {
    /** @deprecated use `CustomerBenefitGrant$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerBenefitGrant, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerBenefitGrant$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerBenefitGrant$Outbound, z.ZodTypeDef, CustomerBenefitGrant>;
    /** @deprecated use `CustomerBenefitGrant$Outbound` instead. */
    type Outbound = CustomerBenefitGrant$Outbound;
}
export declare function customerBenefitGrantToJSON(customerBenefitGrant: CustomerBenefitGrant): string;
export declare function customerBenefitGrantFromJSON(jsonString: string): SafeParseResult<CustomerBenefitGrant, SDKValidationError>;
//# sourceMappingURL=customerbenefitgrant.d.ts.map