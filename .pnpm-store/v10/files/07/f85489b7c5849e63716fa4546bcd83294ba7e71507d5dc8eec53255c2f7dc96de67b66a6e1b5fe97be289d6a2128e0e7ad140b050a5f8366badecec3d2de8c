/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CurrencyAmount$inboundSchema, CurrencyAmount$outboundSchema, } from "./currencyamount.js";
/** @internal */
export const Funding$inboundSchema = z.object({
    funding_goal: z.nullable(CurrencyAmount$inboundSchema).optional(),
    pledges_sum: z.nullable(CurrencyAmount$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "funding_goal": "fundingGoal",
        "pledges_sum": "pledgesSum",
    });
});
/** @internal */
export const Funding$outboundSchema = z.object({
    fundingGoal: z.nullable(CurrencyAmount$outboundSchema).optional(),
    pledgesSum: z.nullable(CurrencyAmount$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        fundingGoal: "funding_goal",
        pledgesSum: "pledges_sum",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Funding$;
(function (Funding$) {
    /** @deprecated use `Funding$inboundSchema` instead. */
    Funding$.inboundSchema = Funding$inboundSchema;
    /** @deprecated use `Funding$outboundSchema` instead. */
    Funding$.outboundSchema = Funding$outboundSchema;
})(Funding$ || (Funding$ = {}));
export function fundingToJSON(funding) {
    return JSON.stringify(Funding$outboundSchema.parse(funding));
}
export function fundingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Funding$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Funding' from JSON`);
}
//# sourceMappingURL=funding.js.map