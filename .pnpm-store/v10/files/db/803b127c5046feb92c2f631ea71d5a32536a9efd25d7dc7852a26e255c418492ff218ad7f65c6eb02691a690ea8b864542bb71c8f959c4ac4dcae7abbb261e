/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const AuthorizationCodeTokenRequest$inboundSchema = z.object({
    grant_type: z.literal("authorization_code").optional(),
    client_id: z.string(),
    client_secret: z.string(),
    code: z.string(),
    redirect_uri: z.string(),
}).transform((v) => {
    return remap$(v, {
        "grant_type": "grantType",
        "client_id": "clientId",
        "client_secret": "clientSecret",
        "redirect_uri": "redirectUri",
    });
});
/** @internal */
export const AuthorizationCodeTokenRequest$outboundSchema = z.object({
    grantType: z.literal("authorization_code").default("authorization_code"),
    clientId: z.string(),
    clientSecret: z.string(),
    code: z.string(),
    redirectUri: z.string(),
}).transform((v) => {
    return remap$(v, {
        grantType: "grant_type",
        clientId: "client_id",
        clientSecret: "client_secret",
        redirectUri: "redirect_uri",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthorizationCodeTokenRequest$;
(function (AuthorizationCodeTokenRequest$) {
    /** @deprecated use `AuthorizationCodeTokenRequest$inboundSchema` instead. */
    AuthorizationCodeTokenRequest$.inboundSchema = AuthorizationCodeTokenRequest$inboundSchema;
    /** @deprecated use `AuthorizationCodeTokenRequest$outboundSchema` instead. */
    AuthorizationCodeTokenRequest$.outboundSchema = AuthorizationCodeTokenRequest$outboundSchema;
})(AuthorizationCodeTokenRequest$ || (AuthorizationCodeTokenRequest$ = {}));
export function authorizationCodeTokenRequestToJSON(authorizationCodeTokenRequest) {
    return JSON.stringify(AuthorizationCodeTokenRequest$outboundSchema.parse(authorizationCodeTokenRequest));
}
export function authorizationCodeTokenRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthorizationCodeTokenRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthorizationCodeTokenRequest' from JSON`);
}
//# sourceMappingURL=authorizationcodetokenrequest.js.map