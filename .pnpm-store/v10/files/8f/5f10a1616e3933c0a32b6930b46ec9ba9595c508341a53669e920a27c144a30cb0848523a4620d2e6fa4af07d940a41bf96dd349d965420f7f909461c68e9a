/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Address$inboundSchema = z.object({
    line1: z.nullable(z.string()).optional(),
    line2: z.nullable(z.string()).optional(),
    postal_code: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
    state: z.nullable(z.string()).optional(),
    country: z.string(),
}).transform((v) => {
    return remap$(v, {
        "postal_code": "postalCode",
    });
});
/** @internal */
export const Address$outboundSchema = z.object({
    line1: z.nullable(z.string()).optional(),
    line2: z.nullable(z.string()).optional(),
    postalCode: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
    state: z.nullable(z.string()).optional(),
    country: z.string(),
}).transform((v) => {
    return remap$(v, {
        postalCode: "postal_code",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Address$;
(function (Address$) {
    /** @deprecated use `Address$inboundSchema` instead. */
    Address$.inboundSchema = Address$inboundSchema;
    /** @deprecated use `Address$outboundSchema` instead. */
    Address$.outboundSchema = Address$outboundSchema;
})(Address$ || (Address$ = {}));
export function addressToJSON(address) {
    return JSON.stringify(Address$outboundSchema.parse(address));
}
export function addressFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Address$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Address' from JSON`);
}
//# sourceMappingURL=address.js.map