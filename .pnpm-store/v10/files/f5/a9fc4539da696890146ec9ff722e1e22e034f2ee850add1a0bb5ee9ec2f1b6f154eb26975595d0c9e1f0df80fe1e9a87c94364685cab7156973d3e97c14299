/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const EventCreateCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const EventCreateCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventCreateCustomerMetadata$;
(function (EventCreateCustomerMetadata$) {
    /** @deprecated use `EventCreateCustomerMetadata$inboundSchema` instead. */
    EventCreateCustomerMetadata$.inboundSchema = EventCreateCustomerMetadata$inboundSchema;
    /** @deprecated use `EventCreateCustomerMetadata$outboundSchema` instead. */
    EventCreateCustomerMetadata$.outboundSchema = EventCreateCustomerMetadata$outboundSchema;
})(EventCreateCustomerMetadata$ || (EventCreateCustomerMetadata$ = {}));
export function eventCreateCustomerMetadataToJSON(eventCreateCustomerMetadata) {
    return JSON.stringify(EventCreateCustomerMetadata$outboundSchema.parse(eventCreateCustomerMetadata));
}
export function eventCreateCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventCreateCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventCreateCustomerMetadata' from JSON`);
}
/** @internal */
export const EventCreateCustomer$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    name: z.string(),
    organization_id: z.nullable(z.string()).optional(),
    customer_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "customer_id": "customerId",
    });
});
/** @internal */
export const EventCreateCustomer$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    timestamp: z.date().transform(v => v.toISOString()).optional(),
    name: z.string(),
    organizationId: z.nullable(z.string()).optional(),
    customerId: z.string(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        customerId: "customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventCreateCustomer$;
(function (EventCreateCustomer$) {
    /** @deprecated use `EventCreateCustomer$inboundSchema` instead. */
    EventCreateCustomer$.inboundSchema = EventCreateCustomer$inboundSchema;
    /** @deprecated use `EventCreateCustomer$outboundSchema` instead. */
    EventCreateCustomer$.outboundSchema = EventCreateCustomer$outboundSchema;
})(EventCreateCustomer$ || (EventCreateCustomer$ = {}));
export function eventCreateCustomerToJSON(eventCreateCustomer) {
    return JSON.stringify(EventCreateCustomer$outboundSchema.parse(eventCreateCustomer));
}
export function eventCreateCustomerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventCreateCustomer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventCreateCustomer' from JSON`);
}
//# sourceMappingURL=eventcreatecustomer.js.map