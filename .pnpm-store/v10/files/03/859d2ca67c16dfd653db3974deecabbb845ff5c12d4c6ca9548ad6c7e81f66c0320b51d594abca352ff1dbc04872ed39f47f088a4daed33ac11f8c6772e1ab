/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
/** @internal */
export const CheckoutProductCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CheckoutProductCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductCreateMetadata$;
(function (CheckoutProductCreateMetadata$) {
    /** @deprecated use `CheckoutProductCreateMetadata$inboundSchema` instead. */
    CheckoutProductCreateMetadata$.inboundSchema = CheckoutProductCreateMetadata$inboundSchema;
    /** @deprecated use `CheckoutProductCreateMetadata$outboundSchema` instead. */
    CheckoutProductCreateMetadata$.outboundSchema = CheckoutProductCreateMetadata$outboundSchema;
})(CheckoutProductCreateMetadata$ || (CheckoutProductCreateMetadata$ = {}));
export function checkoutProductCreateMetadataToJSON(checkoutProductCreateMetadata) {
    return JSON.stringify(CheckoutProductCreateMetadata$outboundSchema.parse(checkoutProductCreateMetadata));
}
export function checkoutProductCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductCreateMetadata' from JSON`);
}
/** @internal */
export const CheckoutProductCreateCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CheckoutProductCreateCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductCreateCustomFieldData$;
(function (CheckoutProductCreateCustomFieldData$) {
    /** @deprecated use `CheckoutProductCreateCustomFieldData$inboundSchema` instead. */
    CheckoutProductCreateCustomFieldData$.inboundSchema = CheckoutProductCreateCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutProductCreateCustomFieldData$outboundSchema` instead. */
    CheckoutProductCreateCustomFieldData$.outboundSchema = CheckoutProductCreateCustomFieldData$outboundSchema;
})(CheckoutProductCreateCustomFieldData$ || (CheckoutProductCreateCustomFieldData$ = {}));
export function checkoutProductCreateCustomFieldDataToJSON(checkoutProductCreateCustomFieldData) {
    return JSON.stringify(CheckoutProductCreateCustomFieldData$outboundSchema.parse(checkoutProductCreateCustomFieldData));
}
export function checkoutProductCreateCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductCreateCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductCreateCustomFieldData' from JSON`);
}
/** @internal */
export const CheckoutProductCreateCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CheckoutProductCreateCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductCreateCustomerMetadata$;
(function (CheckoutProductCreateCustomerMetadata$) {
    /** @deprecated use `CheckoutProductCreateCustomerMetadata$inboundSchema` instead. */
    CheckoutProductCreateCustomerMetadata$.inboundSchema = CheckoutProductCreateCustomerMetadata$inboundSchema;
    /** @deprecated use `CheckoutProductCreateCustomerMetadata$outboundSchema` instead. */
    CheckoutProductCreateCustomerMetadata$.outboundSchema = CheckoutProductCreateCustomerMetadata$outboundSchema;
})(CheckoutProductCreateCustomerMetadata$ || (CheckoutProductCreateCustomerMetadata$ = {}));
export function checkoutProductCreateCustomerMetadataToJSON(checkoutProductCreateCustomerMetadata) {
    return JSON.stringify(CheckoutProductCreateCustomerMetadata$outboundSchema.parse(checkoutProductCreateCustomerMetadata));
}
export function checkoutProductCreateCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductCreateCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductCreateCustomerMetadata' from JSON`);
}
/** @internal */
export const CheckoutProductCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    discount_id: z.nullable(z.string()).optional(),
    allow_discount_codes: z.boolean().default(true),
    amount: z.nullable(z.number().int()).optional(),
    customer_id: z.nullable(z.string()).optional(),
    customer_external_id: z.nullable(z.string()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_ip_address: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    customer_metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])).optional(),
    subscription_id: z.nullable(z.string()).optional(),
    success_url: z.nullable(z.string()).optional(),
    embed_origin: z.nullable(z.string()).optional(),
    product_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "custom_field_data": "customFieldData",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "customer_id": "customerId",
        "customer_external_id": "customerExternalId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "customer_metadata": "customerMetadata",
        "subscription_id": "subscriptionId",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
        "product_id": "productId",
    });
});
/** @internal */
export const CheckoutProductCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    discountId: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.boolean().default(true),
    amount: z.nullable(z.number().int()).optional(),
    customerId: z.nullable(z.string()).optional(),
    customerExternalId: z.nullable(z.string()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerIpAddress: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    customerMetadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])).optional(),
    subscriptionId: z.nullable(z.string()).optional(),
    successUrl: z.nullable(z.string()).optional(),
    embedOrigin: z.nullable(z.string()).optional(),
    productId: z.string(),
}).transform((v) => {
    return remap$(v, {
        customFieldData: "custom_field_data",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        customerId: "customer_id",
        customerExternalId: "customer_external_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        customerMetadata: "customer_metadata",
        subscriptionId: "subscription_id",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
        productId: "product_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductCreate$;
(function (CheckoutProductCreate$) {
    /** @deprecated use `CheckoutProductCreate$inboundSchema` instead. */
    CheckoutProductCreate$.inboundSchema = CheckoutProductCreate$inboundSchema;
    /** @deprecated use `CheckoutProductCreate$outboundSchema` instead. */
    CheckoutProductCreate$.outboundSchema = CheckoutProductCreate$outboundSchema;
})(CheckoutProductCreate$ || (CheckoutProductCreate$ = {}));
export function checkoutProductCreateToJSON(checkoutProductCreate) {
    return JSON.stringify(CheckoutProductCreate$outboundSchema.parse(checkoutProductCreate));
}
export function checkoutProductCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductCreate' from JSON`);
}
//# sourceMappingURL=checkoutproductcreate.js.map