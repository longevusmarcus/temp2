import * as z from "zod";
export type AlreadyActiveSubscriptionErrorData = {
    error: "AlreadyActiveSubscriptionError";
    detail: string;
};
export declare class AlreadyActiveSubscriptionError extends Error {
    error: "AlreadyActiveSubscriptionError";
    detail: string;
    /** The original data that was passed to this error instance. */
    data$: AlreadyActiveSubscriptionErrorData;
    constructor(err: AlreadyActiveSubscriptionErrorData);
}
/** @internal */
export declare const AlreadyActiveSubscriptionError$inboundSchema: z.ZodType<AlreadyActiveSubscriptionError, z.ZodTypeDef, unknown>;
/** @internal */
export type AlreadyActiveSubscriptionError$Outbound = {
    error: "AlreadyActiveSubscriptionError";
    detail: string;
};
/** @internal */
export declare const AlreadyActiveSubscriptionError$outboundSchema: z.ZodType<AlreadyActiveSubscriptionError$Outbound, z.ZodTypeDef, AlreadyActiveSubscriptionError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AlreadyActiveSubscriptionError$ {
    /** @deprecated use `AlreadyActiveSubscriptionError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AlreadyActiveSubscriptionError, z.ZodTypeDef, unknown>;
    /** @deprecated use `AlreadyActiveSubscriptionError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AlreadyActiveSubscriptionError$Outbound, z.ZodTypeDef, AlreadyActiveSubscriptionError>;
    /** @deprecated use `AlreadyActiveSubscriptionError$Outbound` instead. */
    type Outbound = AlreadyActiveSubscriptionError$Outbound;
}
//# sourceMappingURL=alreadyactivesubscriptionerror.d.ts.map