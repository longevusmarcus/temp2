import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { ListResourceProduct, ListResourceProduct$Outbound } from "../components/listresourceproduct.js";
import { ProductSortProperty } from "../components/productsortproperty.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Filter by product ID.
 */
export type QueryParamProductIDFilter = string | Array<string>;
/**
 * Filter by organization ID.
 */
export type ProductsListQueryParamOrganizationIDFilter = string | Array<string>;
/**
 * Filter products granting specific benefit.
 */
export type BenefitIDFilter = string | Array<string>;
export type ProductsListRequest = {
    /**
     * Filter by product ID.
     */
    id?: string | Array<string> | null | undefined;
    /**
     * Filter by organization ID.
     */
    organizationId?: string | Array<string> | null | undefined;
    /**
     * Filter by product name.
     */
    query?: string | null | undefined;
    /**
     * Filter on archived products.
     */
    isArchived?: boolean | null | undefined;
    /**
     * Filter on recurring products. If `true`, only subscriptions tiers are returned. If `false`, only one-time purchase products are returned.
     */
    isRecurring?: boolean | null | undefined;
    /**
     * Filter products granting specific benefit.
     */
    benefitId?: string | Array<string> | null | undefined;
    /**
     * Page number, defaults to 1.
     */
    page?: number | undefined;
    /**
     * Size of a page, defaults to 10. Maximum is 100.
     */
    limit?: number | undefined;
    /**
     * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
     */
    sorting?: Array<ProductSortProperty> | null | undefined;
};
export type ProductsListResponse = {
    result: ListResourceProduct;
};
/** @internal */
export declare const QueryParamProductIDFilter$inboundSchema: z.ZodType<QueryParamProductIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamProductIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const QueryParamProductIDFilter$outboundSchema: z.ZodType<QueryParamProductIDFilter$Outbound, z.ZodTypeDef, QueryParamProductIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamProductIDFilter$ {
    /** @deprecated use `QueryParamProductIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamProductIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamProductIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamProductIDFilter$Outbound, z.ZodTypeDef, QueryParamProductIDFilter>;
    /** @deprecated use `QueryParamProductIDFilter$Outbound` instead. */
    type Outbound = QueryParamProductIDFilter$Outbound;
}
export declare function queryParamProductIDFilterToJSON(queryParamProductIDFilter: QueryParamProductIDFilter): string;
export declare function queryParamProductIDFilterFromJSON(jsonString: string): SafeParseResult<QueryParamProductIDFilter, SDKValidationError>;
/** @internal */
export declare const ProductsListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<ProductsListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductsListQueryParamOrganizationIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const ProductsListQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<ProductsListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, ProductsListQueryParamOrganizationIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductsListQueryParamOrganizationIDFilter$ {
    /** @deprecated use `ProductsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductsListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductsListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, ProductsListQueryParamOrganizationIDFilter>;
    /** @deprecated use `ProductsListQueryParamOrganizationIDFilter$Outbound` instead. */
    type Outbound = ProductsListQueryParamOrganizationIDFilter$Outbound;
}
export declare function productsListQueryParamOrganizationIDFilterToJSON(productsListQueryParamOrganizationIDFilter: ProductsListQueryParamOrganizationIDFilter): string;
export declare function productsListQueryParamOrganizationIDFilterFromJSON(jsonString: string): SafeParseResult<ProductsListQueryParamOrganizationIDFilter, SDKValidationError>;
/** @internal */
export declare const BenefitIDFilter$inboundSchema: z.ZodType<BenefitIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const BenefitIDFilter$outboundSchema: z.ZodType<BenefitIDFilter$Outbound, z.ZodTypeDef, BenefitIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitIDFilter$ {
    /** @deprecated use `BenefitIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitIDFilter$Outbound, z.ZodTypeDef, BenefitIDFilter>;
    /** @deprecated use `BenefitIDFilter$Outbound` instead. */
    type Outbound = BenefitIDFilter$Outbound;
}
export declare function benefitIDFilterToJSON(benefitIDFilter: BenefitIDFilter): string;
export declare function benefitIDFilterFromJSON(jsonString: string): SafeParseResult<BenefitIDFilter, SDKValidationError>;
/** @internal */
export declare const ProductsListRequest$inboundSchema: z.ZodType<ProductsListRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductsListRequest$Outbound = {
    id?: string | Array<string> | null | undefined;
    organization_id?: string | Array<string> | null | undefined;
    query?: string | null | undefined;
    is_archived?: boolean | null | undefined;
    is_recurring?: boolean | null | undefined;
    benefit_id?: string | Array<string> | null | undefined;
    page: number;
    limit: number;
    sorting?: Array<string> | null | undefined;
};
/** @internal */
export declare const ProductsListRequest$outboundSchema: z.ZodType<ProductsListRequest$Outbound, z.ZodTypeDef, ProductsListRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductsListRequest$ {
    /** @deprecated use `ProductsListRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductsListRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductsListRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductsListRequest$Outbound, z.ZodTypeDef, ProductsListRequest>;
    /** @deprecated use `ProductsListRequest$Outbound` instead. */
    type Outbound = ProductsListRequest$Outbound;
}
export declare function productsListRequestToJSON(productsListRequest: ProductsListRequest): string;
export declare function productsListRequestFromJSON(jsonString: string): SafeParseResult<ProductsListRequest, SDKValidationError>;
/** @internal */
export declare const ProductsListResponse$inboundSchema: z.ZodType<ProductsListResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductsListResponse$Outbound = {
    Result: ListResourceProduct$Outbound;
};
/** @internal */
export declare const ProductsListResponse$outboundSchema: z.ZodType<ProductsListResponse$Outbound, z.ZodTypeDef, ProductsListResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductsListResponse$ {
    /** @deprecated use `ProductsListResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductsListResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductsListResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductsListResponse$Outbound, z.ZodTypeDef, ProductsListResponse>;
    /** @deprecated use `ProductsListResponse$Outbound` instead. */
    type Outbound = ProductsListResponse$Outbound;
}
export declare function productsListResponseToJSON(productsListResponse: ProductsListResponse): string;
export declare function productsListResponseFromJSON(jsonString: string): SafeParseResult<ProductsListResponse, SDKValidationError>;
//# sourceMappingURL=productslist.d.ts.map