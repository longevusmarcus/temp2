/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const CheckoutLinkUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CheckoutLinkUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinkUpdateMetadata$;
(function (CheckoutLinkUpdateMetadata$) {
    /** @deprecated use `CheckoutLinkUpdateMetadata$inboundSchema` instead. */
    CheckoutLinkUpdateMetadata$.inboundSchema = CheckoutLinkUpdateMetadata$inboundSchema;
    /** @deprecated use `CheckoutLinkUpdateMetadata$outboundSchema` instead. */
    CheckoutLinkUpdateMetadata$.outboundSchema = CheckoutLinkUpdateMetadata$outboundSchema;
})(CheckoutLinkUpdateMetadata$ || (CheckoutLinkUpdateMetadata$ = {}));
export function checkoutLinkUpdateMetadataToJSON(checkoutLinkUpdateMetadata) {
    return JSON.stringify(CheckoutLinkUpdateMetadata$outboundSchema.parse(checkoutLinkUpdateMetadata));
}
export function checkoutLinkUpdateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinkUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinkUpdateMetadata' from JSON`);
}
/** @internal */
export const CheckoutLinkUpdate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    products: z.nullable(z.array(z.string())).optional(),
    label: z.nullable(z.string()).optional(),
    allow_discount_codes: z.nullable(z.boolean()).optional(),
    discount_id: z.nullable(z.string()).optional(),
    success_url: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "allow_discount_codes": "allowDiscountCodes",
        "discount_id": "discountId",
        "success_url": "successUrl",
    });
});
/** @internal */
export const CheckoutLinkUpdate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    products: z.nullable(z.array(z.string())).optional(),
    label: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.nullable(z.boolean()).optional(),
    discountId: z.nullable(z.string()).optional(),
    successUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        allowDiscountCodes: "allow_discount_codes",
        discountId: "discount_id",
        successUrl: "success_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinkUpdate$;
(function (CheckoutLinkUpdate$) {
    /** @deprecated use `CheckoutLinkUpdate$inboundSchema` instead. */
    CheckoutLinkUpdate$.inboundSchema = CheckoutLinkUpdate$inboundSchema;
    /** @deprecated use `CheckoutLinkUpdate$outboundSchema` instead. */
    CheckoutLinkUpdate$.outboundSchema = CheckoutLinkUpdate$outboundSchema;
})(CheckoutLinkUpdate$ || (CheckoutLinkUpdate$ = {}));
export function checkoutLinkUpdateToJSON(checkoutLinkUpdate) {
    return JSON.stringify(CheckoutLinkUpdate$outboundSchema.parse(checkoutLinkUpdate));
}
export function checkoutLinkUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinkUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinkUpdate' from JSON`);
}
//# sourceMappingURL=checkoutlinkupdate.js.map