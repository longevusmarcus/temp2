import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { CustomerState } from "../models/components/customerstate.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { HTTPValidationError } from "../models/errors/httpvalidationerror.js";
import { ResourceNotFound } from "../models/errors/resourcenotfound.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { CustomersGetStateRequest } from "../models/operations/customersgetstate.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Get Customer State
 *
 * @remarks
 * Get a customer state by ID.
 *
 * The customer state includes information about
 * the customer's active subscriptions and benefits.
 *
 * It's the ideal endpoint to use when you need to get a full overview
 * of a customer's status.
 *
 * **Scopes**: `customers:read` `customers:write`
 */
export declare function customersGetState(client: PolarCore, request: CustomersGetStateRequest, options?: RequestOptions): APIPromise<Result<CustomerState, ResourceNotFound | HTTPValidationError | SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=customersGetState.d.ts.map