/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { AuthorizeOrganization$inboundSchema, AuthorizeOrganization$outboundSchema, } from "./authorizeorganization.js";
import { OAuth2ClientPublic$inboundSchema, OAuth2ClientPublic$outboundSchema, } from "./oauth2clientpublic.js";
import { Scope$inboundSchema, Scope$outboundSchema } from "./scope.js";
/** @internal */
export const AuthorizeResponseOrganization$inboundSchema = z.object({
    client: OAuth2ClientPublic$inboundSchema,
    sub_type: z.literal("organization").optional(),
    sub: z.nullable(AuthorizeOrganization$inboundSchema),
    scopes: z.array(Scope$inboundSchema),
    organizations: z.array(AuthorizeOrganization$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "sub_type": "subType",
    });
});
/** @internal */
export const AuthorizeResponseOrganization$outboundSchema = z.object({
    client: OAuth2ClientPublic$outboundSchema,
    subType: z.literal("organization").default("organization"),
    sub: z.nullable(AuthorizeOrganization$outboundSchema),
    scopes: z.array(Scope$outboundSchema),
    organizations: z.array(AuthorizeOrganization$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        subType: "sub_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthorizeResponseOrganization$;
(function (AuthorizeResponseOrganization$) {
    /** @deprecated use `AuthorizeResponseOrganization$inboundSchema` instead. */
    AuthorizeResponseOrganization$.inboundSchema = AuthorizeResponseOrganization$inboundSchema;
    /** @deprecated use `AuthorizeResponseOrganization$outboundSchema` instead. */
    AuthorizeResponseOrganization$.outboundSchema = AuthorizeResponseOrganization$outboundSchema;
})(AuthorizeResponseOrganization$ || (AuthorizeResponseOrganization$ = {}));
export function authorizeResponseOrganizationToJSON(authorizeResponseOrganization) {
    return JSON.stringify(AuthorizeResponseOrganization$outboundSchema.parse(authorizeResponseOrganization));
}
export function authorizeResponseOrganizationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthorizeResponseOrganization$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthorizeResponseOrganization' from JSON`);
}
//# sourceMappingURL=authorizeresponseorganization.js.map