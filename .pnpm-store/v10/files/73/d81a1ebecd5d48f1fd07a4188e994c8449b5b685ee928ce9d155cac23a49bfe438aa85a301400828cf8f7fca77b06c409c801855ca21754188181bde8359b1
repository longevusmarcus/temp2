/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { SubType$inboundSchema, SubType$outboundSchema, } from "./subtype.js";
export const TokenType = {
    AccessToken: "access_token",
    RefreshToken: "refresh_token",
};
/** @internal */
export const TokenType$inboundSchema = z
    .nativeEnum(TokenType);
/** @internal */
export const TokenType$outboundSchema = TokenType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TokenType$;
(function (TokenType$) {
    /** @deprecated use `TokenType$inboundSchema` instead. */
    TokenType$.inboundSchema = TokenType$inboundSchema;
    /** @deprecated use `TokenType$outboundSchema` instead. */
    TokenType$.outboundSchema = TokenType$outboundSchema;
})(TokenType$ || (TokenType$ = {}));
/** @internal */
export const IntrospectTokenResponse$inboundSchema = z.object({
    active: z.boolean(),
    client_id: z.string(),
    token_type: TokenType$inboundSchema,
    scope: z.string(),
    sub_type: SubType$inboundSchema,
    sub: z.string(),
    aud: z.string(),
    iss: z.string(),
    exp: z.number().int(),
    iat: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        "client_id": "clientId",
        "token_type": "tokenType",
        "sub_type": "subType",
    });
});
/** @internal */
export const IntrospectTokenResponse$outboundSchema = z.object({
    active: z.boolean(),
    clientId: z.string(),
    tokenType: TokenType$outboundSchema,
    scope: z.string(),
    subType: SubType$outboundSchema,
    sub: z.string(),
    aud: z.string(),
    iss: z.string(),
    exp: z.number().int(),
    iat: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        clientId: "client_id",
        tokenType: "token_type",
        subType: "sub_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IntrospectTokenResponse$;
(function (IntrospectTokenResponse$) {
    /** @deprecated use `IntrospectTokenResponse$inboundSchema` instead. */
    IntrospectTokenResponse$.inboundSchema = IntrospectTokenResponse$inboundSchema;
    /** @deprecated use `IntrospectTokenResponse$outboundSchema` instead. */
    IntrospectTokenResponse$.outboundSchema = IntrospectTokenResponse$outboundSchema;
})(IntrospectTokenResponse$ || (IntrospectTokenResponse$ = {}));
export function introspectTokenResponseToJSON(introspectTokenResponse) {
    return JSON.stringify(IntrospectTokenResponse$outboundSchema.parse(introspectTokenResponse));
}
export function introspectTokenResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IntrospectTokenResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IntrospectTokenResponse' from JSON`);
}
//# sourceMappingURL=introspecttokenresponse.js.map