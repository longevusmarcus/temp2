/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const OrderItemSchema$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    label: z.string(),
    amount: z.number().int(),
    tax_amount: z.number().int(),
    proration: z.boolean(),
    product_price_id: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "tax_amount": "taxAmount",
        "product_price_id": "productPriceId",
    });
});
/** @internal */
export const OrderItemSchema$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    label: z.string(),
    amount: z.number().int(),
    taxAmount: z.number().int(),
    proration: z.boolean(),
    productPriceId: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        taxAmount: "tax_amount",
        productPriceId: "product_price_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderItemSchema$;
(function (OrderItemSchema$) {
    /** @deprecated use `OrderItemSchema$inboundSchema` instead. */
    OrderItemSchema$.inboundSchema = OrderItemSchema$inboundSchema;
    /** @deprecated use `OrderItemSchema$outboundSchema` instead. */
    OrderItemSchema$.outboundSchema = OrderItemSchema$outboundSchema;
})(OrderItemSchema$ || (OrderItemSchema$ = {}));
export function orderItemSchemaToJSON(orderItemSchema) {
    return JSON.stringify(OrderItemSchema$outboundSchema.parse(orderItemSchema));
}
export function orderItemSchemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderItemSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderItemSchema' from JSON`);
}
//# sourceMappingURL=orderitemschema.js.map