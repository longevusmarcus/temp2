"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Event$ = exports.Event$outboundSchema = exports.Event$inboundSchema = exports.EventMetadata$ = exports.EventMetadata$outboundSchema = exports.EventMetadata$inboundSchema = void 0;
exports.eventMetadataToJSON = eventMetadataToJSON;
exports.eventMetadataFromJSON = eventMetadataFromJSON;
exports.eventToJSON = eventToJSON;
exports.eventFromJSON = eventFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customer_js_1 = require("./customer.js");
const eventsource_js_1 = require("./eventsource.js");
/** @internal */
exports.EventMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.EventMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventMetadata$;
(function (EventMetadata$) {
    /** @deprecated use `EventMetadata$inboundSchema` instead. */
    EventMetadata$.inboundSchema = exports.EventMetadata$inboundSchema;
    /** @deprecated use `EventMetadata$outboundSchema` instead. */
    EventMetadata$.outboundSchema = exports.EventMetadata$outboundSchema;
})(EventMetadata$ || (exports.EventMetadata$ = EventMetadata$ = {}));
function eventMetadataToJSON(eventMetadata) {
    return JSON.stringify(exports.EventMetadata$outboundSchema.parse(eventMetadata));
}
function eventMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventMetadata' from JSON`);
}
/** @internal */
exports.Event$inboundSchema = z
    .object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    id: z.string(),
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    name: z.string(),
    source: eventsource_js_1.EventSource$inboundSchema,
    organization_id: z.string(),
    customer_id: z.nullable(z.string()),
    customer: z.nullable(customer_js_1.Customer$inboundSchema),
    external_customer_id: z.nullable(z.string()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
exports.Event$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    id: z.string(),
    timestamp: z.date().transform(v => v.toISOString()),
    name: z.string(),
    source: eventsource_js_1.EventSource$outboundSchema,
    organizationId: z.string(),
    customerId: z.nullable(z.string()),
    customer: z.nullable(customer_js_1.Customer$outboundSchema),
    externalCustomerId: z.nullable(z.string()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Event$;
(function (Event$) {
    /** @deprecated use `Event$inboundSchema` instead. */
    Event$.inboundSchema = exports.Event$inboundSchema;
    /** @deprecated use `Event$outboundSchema` instead. */
    Event$.outboundSchema = exports.Event$outboundSchema;
})(Event$ || (exports.Event$ = Event$ = {}));
function eventToJSON(event) {
    return JSON.stringify(exports.Event$outboundSchema.parse(event));
}
function eventFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Event$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Event' from JSON`);
}
//# sourceMappingURL=event.js.map