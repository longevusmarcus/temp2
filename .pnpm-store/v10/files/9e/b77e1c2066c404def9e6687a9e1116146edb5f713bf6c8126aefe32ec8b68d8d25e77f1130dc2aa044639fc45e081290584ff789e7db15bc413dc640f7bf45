/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { RepositoryUpdate$inboundSchema, RepositoryUpdate$outboundSchema, } from "../components/repositoryupdate.js";
/** @internal */
export const RepositoriesUpdateRequest$inboundSchema = z.object({
    id: z.string(),
    RepositoryUpdate: RepositoryUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "RepositoryUpdate": "repositoryUpdate",
    });
});
/** @internal */
export const RepositoriesUpdateRequest$outboundSchema = z.object({
    id: z.string(),
    repositoryUpdate: RepositoryUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        repositoryUpdate: "RepositoryUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RepositoriesUpdateRequest$;
(function (RepositoriesUpdateRequest$) {
    /** @deprecated use `RepositoriesUpdateRequest$inboundSchema` instead. */
    RepositoriesUpdateRequest$.inboundSchema = RepositoriesUpdateRequest$inboundSchema;
    /** @deprecated use `RepositoriesUpdateRequest$outboundSchema` instead. */
    RepositoriesUpdateRequest$.outboundSchema = RepositoriesUpdateRequest$outboundSchema;
})(RepositoriesUpdateRequest$ || (RepositoriesUpdateRequest$ = {}));
export function repositoriesUpdateRequestToJSON(repositoriesUpdateRequest) {
    return JSON.stringify(RepositoriesUpdateRequest$outboundSchema.parse(repositoriesUpdateRequest));
}
export function repositoriesUpdateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RepositoriesUpdateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RepositoriesUpdateRequest' from JSON`);
}
//# sourceMappingURL=repositoriesupdate.js.map