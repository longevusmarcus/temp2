/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceRefund$inboundSchema, ListResourceRefund$outboundSchema, } from "../components/listresourcerefund.js";
import { RefundSortProperty$inboundSchema, RefundSortProperty$outboundSchema, } from "../components/refundsortproperty.js";
/** @internal */
export const RefundIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const RefundIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundIDFilter$;
(function (RefundIDFilter$) {
    /** @deprecated use `RefundIDFilter$inboundSchema` instead. */
    RefundIDFilter$.inboundSchema = RefundIDFilter$inboundSchema;
    /** @deprecated use `RefundIDFilter$outboundSchema` instead. */
    RefundIDFilter$.outboundSchema = RefundIDFilter$outboundSchema;
})(RefundIDFilter$ || (RefundIDFilter$ = {}));
export function refundIDFilterToJSON(refundIDFilter) {
    return JSON.stringify(RefundIDFilter$outboundSchema.parse(refundIDFilter));
}
export function refundIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundIDFilter' from JSON`);
}
/** @internal */
export const RefundsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const RefundsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundsListQueryParamOrganizationIDFilter$;
(function (RefundsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `RefundsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    RefundsListQueryParamOrganizationIDFilter$.inboundSchema = RefundsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `RefundsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    RefundsListQueryParamOrganizationIDFilter$.outboundSchema = RefundsListQueryParamOrganizationIDFilter$outboundSchema;
})(RefundsListQueryParamOrganizationIDFilter$ || (RefundsListQueryParamOrganizationIDFilter$ = {}));
export function refundsListQueryParamOrganizationIDFilterToJSON(refundsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(RefundsListQueryParamOrganizationIDFilter$outboundSchema.parse(refundsListQueryParamOrganizationIDFilter));
}
export function refundsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const OrderIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const OrderIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderIDFilter$;
(function (OrderIDFilter$) {
    /** @deprecated use `OrderIDFilter$inboundSchema` instead. */
    OrderIDFilter$.inboundSchema = OrderIDFilter$inboundSchema;
    /** @deprecated use `OrderIDFilter$outboundSchema` instead. */
    OrderIDFilter$.outboundSchema = OrderIDFilter$outboundSchema;
})(OrderIDFilter$ || (OrderIDFilter$ = {}));
export function orderIDFilterToJSON(orderIDFilter) {
    return JSON.stringify(OrderIDFilter$outboundSchema.parse(orderIDFilter));
}
export function orderIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderIDFilter' from JSON`);
}
/** @internal */
export const SubscriptionIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const SubscriptionIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionIDFilter$;
(function (SubscriptionIDFilter$) {
    /** @deprecated use `SubscriptionIDFilter$inboundSchema` instead. */
    SubscriptionIDFilter$.inboundSchema = SubscriptionIDFilter$inboundSchema;
    /** @deprecated use `SubscriptionIDFilter$outboundSchema` instead. */
    SubscriptionIDFilter$.outboundSchema = SubscriptionIDFilter$outboundSchema;
})(SubscriptionIDFilter$ || (SubscriptionIDFilter$ = {}));
export function subscriptionIDFilterToJSON(subscriptionIDFilter) {
    return JSON.stringify(SubscriptionIDFilter$outboundSchema.parse(subscriptionIDFilter));
}
export function subscriptionIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionIDFilter' from JSON`);
}
/** @internal */
export const RefundsListQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const RefundsListQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundsListQueryParamCustomerIDFilter$;
(function (RefundsListQueryParamCustomerIDFilter$) {
    /** @deprecated use `RefundsListQueryParamCustomerIDFilter$inboundSchema` instead. */
    RefundsListQueryParamCustomerIDFilter$.inboundSchema = RefundsListQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `RefundsListQueryParamCustomerIDFilter$outboundSchema` instead. */
    RefundsListQueryParamCustomerIDFilter$.outboundSchema = RefundsListQueryParamCustomerIDFilter$outboundSchema;
})(RefundsListQueryParamCustomerIDFilter$ || (RefundsListQueryParamCustomerIDFilter$ = {}));
export function refundsListQueryParamCustomerIDFilterToJSON(refundsListQueryParamCustomerIDFilter) {
    return JSON.stringify(RefundsListQueryParamCustomerIDFilter$outboundSchema.parse(refundsListQueryParamCustomerIDFilter));
}
export function refundsListQueryParamCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundsListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundsListQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
export const RefundsListRequest$inboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    order_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    subscription_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    succeeded: z.nullable(z.boolean()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(RefundSortProperty$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "order_id": "orderId",
        "subscription_id": "subscriptionId",
        "customer_id": "customerId",
    });
});
/** @internal */
export const RefundsListRequest$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    orderId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    subscriptionId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    succeeded: z.nullable(z.boolean()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(RefundSortProperty$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        orderId: "order_id",
        subscriptionId: "subscription_id",
        customerId: "customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundsListRequest$;
(function (RefundsListRequest$) {
    /** @deprecated use `RefundsListRequest$inboundSchema` instead. */
    RefundsListRequest$.inboundSchema = RefundsListRequest$inboundSchema;
    /** @deprecated use `RefundsListRequest$outboundSchema` instead. */
    RefundsListRequest$.outboundSchema = RefundsListRequest$outboundSchema;
})(RefundsListRequest$ || (RefundsListRequest$ = {}));
export function refundsListRequestToJSON(refundsListRequest) {
    return JSON.stringify(RefundsListRequest$outboundSchema.parse(refundsListRequest));
}
export function refundsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundsListRequest' from JSON`);
}
/** @internal */
export const RefundsListResponse$inboundSchema = z.object({
    Result: ListResourceRefund$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const RefundsListResponse$outboundSchema = z.object({
    result: ListResourceRefund$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundsListResponse$;
(function (RefundsListResponse$) {
    /** @deprecated use `RefundsListResponse$inboundSchema` instead. */
    RefundsListResponse$.inboundSchema = RefundsListResponse$inboundSchema;
    /** @deprecated use `RefundsListResponse$outboundSchema` instead. */
    RefundsListResponse$.outboundSchema = RefundsListResponse$outboundSchema;
})(RefundsListResponse$ || (RefundsListResponse$ = {}));
export function refundsListResponseToJSON(refundsListResponse) {
    return JSON.stringify(RefundsListResponse$outboundSchema.parse(refundsListResponse));
}
export function refundsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundsListResponse' from JSON`);
}
//# sourceMappingURL=refundslist.js.map