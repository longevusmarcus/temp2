"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerOrder$ = exports.CustomerOrder$outboundSchema = exports.CustomerOrder$inboundSchema = exports.CustomerOrderProductPrice$ = exports.CustomerOrderProductPrice$outboundSchema = exports.CustomerOrderProductPrice$inboundSchema = void 0;
exports.customerOrderProductPriceToJSON = customerOrderProductPriceToJSON;
exports.customerOrderProductPriceFromJSON = customerOrderProductPriceFromJSON;
exports.customerOrderToJSON = customerOrderToJSON;
exports.customerOrderFromJSON = customerOrderFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customerorderproduct_js_1 = require("./customerorderproduct.js");
const customerordersubscription_js_1 = require("./customerordersubscription.js");
const legacyrecurringproductprice_js_1 = require("./legacyrecurringproductprice.js");
const orderitemschema_js_1 = require("./orderitemschema.js");
const orderstatus_js_1 = require("./orderstatus.js");
const productprice_js_1 = require("./productprice.js");
/** @internal */
exports.CustomerOrderProductPrice$inboundSchema = z.union([
    legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$inboundSchema,
    productprice_js_1.ProductPrice$inboundSchema,
]);
/** @internal */
exports.CustomerOrderProductPrice$outboundSchema = z.union([
    legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$outboundSchema,
    productprice_js_1.ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerOrderProductPrice$;
(function (CustomerOrderProductPrice$) {
    /** @deprecated use `CustomerOrderProductPrice$inboundSchema` instead. */
    CustomerOrderProductPrice$.inboundSchema = exports.CustomerOrderProductPrice$inboundSchema;
    /** @deprecated use `CustomerOrderProductPrice$outboundSchema` instead. */
    CustomerOrderProductPrice$.outboundSchema = exports.CustomerOrderProductPrice$outboundSchema;
})(CustomerOrderProductPrice$ || (exports.CustomerOrderProductPrice$ = CustomerOrderProductPrice$ = {}));
function customerOrderProductPriceToJSON(customerOrderProductPrice) {
    return JSON.stringify(exports.CustomerOrderProductPrice$outboundSchema.parse(customerOrderProductPrice));
}
function customerOrderProductPriceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerOrderProductPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerOrderProductPrice' from JSON`);
}
/** @internal */
exports.CustomerOrder$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    status: orderstatus_js_1.OrderStatus$inboundSchema,
    paid: z.boolean(),
    subtotal_amount: z.number().int(),
    discount_amount: z.number().int(),
    net_amount: z.number().int(),
    amount: z.number().int(),
    tax_amount: z.number().int(),
    total_amount: z.number().int(),
    refunded_amount: z.number().int(),
    refunded_tax_amount: z.number().int(),
    currency: z.string(),
    customer_id: z.string(),
    product_id: z.string(),
    product_price_id: z.string(),
    subscription_id: z.nullable(z.string()),
    user_id: z.string(),
    product: customerorderproduct_js_1.CustomerOrderProduct$inboundSchema,
    product_price: z.union([
        legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$inboundSchema,
        productprice_js_1.ProductPrice$inboundSchema,
    ]),
    subscription: z.nullable(customerordersubscription_js_1.CustomerOrderSubscription$inboundSchema),
    items: z.array(orderitemschema_js_1.OrderItemSchema$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "subtotal_amount": "subtotalAmount",
        "discount_amount": "discountAmount",
        "net_amount": "netAmount",
        "tax_amount": "taxAmount",
        "total_amount": "totalAmount",
        "refunded_amount": "refundedAmount",
        "refunded_tax_amount": "refundedTaxAmount",
        "customer_id": "customerId",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "subscription_id": "subscriptionId",
        "user_id": "userId",
        "product_price": "productPrice",
    });
});
/** @internal */
exports.CustomerOrder$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    status: orderstatus_js_1.OrderStatus$outboundSchema,
    paid: z.boolean(),
    subtotalAmount: z.number().int(),
    discountAmount: z.number().int(),
    netAmount: z.number().int(),
    amount: z.number().int(),
    taxAmount: z.number().int(),
    totalAmount: z.number().int(),
    refundedAmount: z.number().int(),
    refundedTaxAmount: z.number().int(),
    currency: z.string(),
    customerId: z.string(),
    productId: z.string(),
    productPriceId: z.string(),
    subscriptionId: z.nullable(z.string()),
    userId: z.string(),
    product: customerorderproduct_js_1.CustomerOrderProduct$outboundSchema,
    productPrice: z.union([
        legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$outboundSchema,
        productprice_js_1.ProductPrice$outboundSchema,
    ]),
    subscription: z.nullable(customerordersubscription_js_1.CustomerOrderSubscription$outboundSchema),
    items: z.array(orderitemschema_js_1.OrderItemSchema$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        subtotalAmount: "subtotal_amount",
        discountAmount: "discount_amount",
        netAmount: "net_amount",
        taxAmount: "tax_amount",
        totalAmount: "total_amount",
        refundedAmount: "refunded_amount",
        refundedTaxAmount: "refunded_tax_amount",
        customerId: "customer_id",
        productId: "product_id",
        productPriceId: "product_price_id",
        subscriptionId: "subscription_id",
        userId: "user_id",
        productPrice: "product_price",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerOrder$;
(function (CustomerOrder$) {
    /** @deprecated use `CustomerOrder$inboundSchema` instead. */
    CustomerOrder$.inboundSchema = exports.CustomerOrder$inboundSchema;
    /** @deprecated use `CustomerOrder$outboundSchema` instead. */
    CustomerOrder$.outboundSchema = exports.CustomerOrder$outboundSchema;
})(CustomerOrder$ || (exports.CustomerOrder$ = CustomerOrder$ = {}));
function customerOrderToJSON(customerOrder) {
    return JSON.stringify(exports.CustomerOrder$outboundSchema.parse(customerOrder));
}
function customerOrderFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerOrder$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerOrder' from JSON`);
}
//# sourceMappingURL=customerorder.js.map