import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { AlreadyActiveSubscriptionError, AlreadyActiveSubscriptionError$Outbound } from "./alreadyactivesubscriptionerror.js";
import { NotOpenCheckout, NotOpenCheckout$Outbound } from "./notopencheckout.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type CheckoutForbiddenError = AlreadyActiveSubscriptionError | NotOpenCheckout;
/** @internal */
export declare const CheckoutForbiddenError$inboundSchema: z.ZodType<CheckoutForbiddenError, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutForbiddenError$Outbound = AlreadyActiveSubscriptionError$Outbound | NotOpenCheckout$Outbound;
/** @internal */
export declare const CheckoutForbiddenError$outboundSchema: z.ZodType<CheckoutForbiddenError$Outbound, z.ZodTypeDef, CheckoutForbiddenError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutForbiddenError$ {
    /** @deprecated use `CheckoutForbiddenError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutForbiddenError, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutForbiddenError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutForbiddenError$Outbound, z.ZodTypeDef, CheckoutForbiddenError>;
    /** @deprecated use `CheckoutForbiddenError$Outbound` instead. */
    type Outbound = CheckoutForbiddenError$Outbound;
}
export declare function checkoutForbiddenErrorToJSON(checkoutForbiddenError: CheckoutForbiddenError): string;
export declare function checkoutForbiddenErrorFromJSON(jsonString: string): SafeParseResult<CheckoutForbiddenError, SDKValidationError>;
//# sourceMappingURL=checkoutforbiddenerror.d.ts.map