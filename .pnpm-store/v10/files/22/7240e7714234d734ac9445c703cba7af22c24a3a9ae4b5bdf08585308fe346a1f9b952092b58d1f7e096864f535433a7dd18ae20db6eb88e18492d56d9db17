/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const UserInfoUser$inboundSchema = z.object({
    sub: z.string(),
    name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    email_verified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
    return remap$(v, {
        "email_verified": "emailVerified",
    });
});
/** @internal */
export const UserInfoUser$outboundSchema = z.object({
    sub: z.string(),
    name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    emailVerified: z.nullable(z.boolean()).optional(),
}).transform((v) => {
    return remap$(v, {
        emailVerified: "email_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserInfoUser$;
(function (UserInfoUser$) {
    /** @deprecated use `UserInfoUser$inboundSchema` instead. */
    UserInfoUser$.inboundSchema = UserInfoUser$inboundSchema;
    /** @deprecated use `UserInfoUser$outboundSchema` instead. */
    UserInfoUser$.outboundSchema = UserInfoUser$outboundSchema;
})(UserInfoUser$ || (UserInfoUser$ = {}));
export function userInfoUserToJSON(userInfoUser) {
    return JSON.stringify(UserInfoUser$outboundSchema.parse(userInfoUser));
}
export function userInfoUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserInfoUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserInfoUser' from JSON`);
}
//# sourceMappingURL=userinfouser.js.map