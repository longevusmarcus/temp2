/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { AuthorizeUser$inboundSchema, AuthorizeUser$outboundSchema, } from "./authorizeuser.js";
import { OAuth2ClientPublic$inboundSchema, OAuth2ClientPublic$outboundSchema, } from "./oauth2clientpublic.js";
import { Scope$inboundSchema, Scope$outboundSchema } from "./scope.js";
/** @internal */
export const AuthorizeResponseUser$inboundSchema = z.object({
    client: OAuth2ClientPublic$inboundSchema,
    sub_type: z.literal("user").optional(),
    sub: z.nullable(AuthorizeUser$inboundSchema),
    scopes: z.array(Scope$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "sub_type": "subType",
    });
});
/** @internal */
export const AuthorizeResponseUser$outboundSchema = z.object({
    client: OAuth2ClientPublic$outboundSchema,
    subType: z.literal("user").default("user"),
    sub: z.nullable(AuthorizeUser$outboundSchema),
    scopes: z.array(Scope$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        subType: "sub_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthorizeResponseUser$;
(function (AuthorizeResponseUser$) {
    /** @deprecated use `AuthorizeResponseUser$inboundSchema` instead. */
    AuthorizeResponseUser$.inboundSchema = AuthorizeResponseUser$inboundSchema;
    /** @deprecated use `AuthorizeResponseUser$outboundSchema` instead. */
    AuthorizeResponseUser$.outboundSchema = AuthorizeResponseUser$outboundSchema;
})(AuthorizeResponseUser$ || (AuthorizeResponseUser$ = {}));
export function authorizeResponseUserToJSON(authorizeResponseUser) {
    return JSON.stringify(AuthorizeResponseUser$outboundSchema.parse(authorizeResponseUser));
}
export function authorizeResponseUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthorizeResponseUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthorizeResponseUser' from JSON`);
}
//# sourceMappingURL=authorizeresponseuser.js.map