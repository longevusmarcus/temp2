/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { FilterOperator$inboundSchema, FilterOperator$outboundSchema, } from "./filteroperator.js";
/** @internal */
export const Value$inboundSchema = z
    .union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const Value$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Value$;
(function (Value$) {
    /** @deprecated use `Value$inboundSchema` instead. */
    Value$.inboundSchema = Value$inboundSchema;
    /** @deprecated use `Value$outboundSchema` instead. */
    Value$.outboundSchema = Value$outboundSchema;
})(Value$ || (Value$ = {}));
export function valueToJSON(value) {
    return JSON.stringify(Value$outboundSchema.parse(value));
}
export function valueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Value$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Value' from JSON`);
}
/** @internal */
export const FilterClause$inboundSchema = z.object({
    property: z.string(),
    operator: FilterOperator$inboundSchema,
    value: z.union([z.string(), z.number().int(), z.boolean()]),
});
/** @internal */
export const FilterClause$outboundSchema = z.object({
    property: z.string(),
    operator: FilterOperator$outboundSchema,
    value: z.union([z.string(), z.number().int(), z.boolean()]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FilterClause$;
(function (FilterClause$) {
    /** @deprecated use `FilterClause$inboundSchema` instead. */
    FilterClause$.inboundSchema = FilterClause$inboundSchema;
    /** @deprecated use `FilterClause$outboundSchema` instead. */
    FilterClause$.outboundSchema = FilterClause$outboundSchema;
})(FilterClause$ || (FilterClause$ = {}));
export function filterClauseToJSON(filterClause) {
    return JSON.stringify(FilterClause$outboundSchema.parse(filterClause));
}
export function filterClauseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FilterClause$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilterClause' from JSON`);
}
//# sourceMappingURL=filterclause.js.map