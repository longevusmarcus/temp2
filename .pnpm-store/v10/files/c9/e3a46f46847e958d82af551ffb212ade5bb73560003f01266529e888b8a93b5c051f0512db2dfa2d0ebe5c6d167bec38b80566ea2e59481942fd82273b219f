/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitDownloadablesCreateProperties$inboundSchema, BenefitDownloadablesCreateProperties$outboundSchema, } from "./benefitdownloadablescreateproperties.js";
/** @internal */
export const BenefitDownloadablesCreate$inboundSchema = z.object({
    type: z.literal("downloadables").optional(),
    description: z.string(),
    organization_id: z.nullable(z.string()).optional(),
    properties: BenefitDownloadablesCreateProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
export const BenefitDownloadablesCreate$outboundSchema = z.object({
    type: z.literal("downloadables").default("downloadables"),
    description: z.string(),
    organizationId: z.nullable(z.string()).optional(),
    properties: BenefitDownloadablesCreateProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitDownloadablesCreate$;
(function (BenefitDownloadablesCreate$) {
    /** @deprecated use `BenefitDownloadablesCreate$inboundSchema` instead. */
    BenefitDownloadablesCreate$.inboundSchema = BenefitDownloadablesCreate$inboundSchema;
    /** @deprecated use `BenefitDownloadablesCreate$outboundSchema` instead. */
    BenefitDownloadablesCreate$.outboundSchema = BenefitDownloadablesCreate$outboundSchema;
})(BenefitDownloadablesCreate$ || (BenefitDownloadablesCreate$ = {}));
export function benefitDownloadablesCreateToJSON(benefitDownloadablesCreate) {
    return JSON.stringify(BenefitDownloadablesCreate$outboundSchema.parse(benefitDownloadablesCreate));
}
export function benefitDownloadablesCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitDownloadablesCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitDownloadablesCreate' from JSON`);
}
//# sourceMappingURL=benefitdownloadablescreate.js.map