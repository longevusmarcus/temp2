/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { RefundReason$inboundSchema, RefundReason$outboundSchema, } from "./refundreason.js";
import { RefundStatus$inboundSchema, RefundStatus$outboundSchema, } from "./refundstatus.js";
/** @internal */
export const RefundMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const RefundMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundMetadata$;
(function (RefundMetadata$) {
    /** @deprecated use `RefundMetadata$inboundSchema` instead. */
    RefundMetadata$.inboundSchema = RefundMetadata$inboundSchema;
    /** @deprecated use `RefundMetadata$outboundSchema` instead. */
    RefundMetadata$.outboundSchema = RefundMetadata$outboundSchema;
})(RefundMetadata$ || (RefundMetadata$ = {}));
export function refundMetadataToJSON(refundMetadata) {
    return JSON.stringify(RefundMetadata$outboundSchema.parse(refundMetadata));
}
export function refundMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundMetadata' from JSON`);
}
/** @internal */
export const Refund$inboundSchema = z
    .object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    status: RefundStatus$inboundSchema,
    reason: RefundReason$inboundSchema,
    amount: z.number().int(),
    tax_amount: z.number().int(),
    currency: z.string(),
    organization_id: z.string(),
    order_id: z.string(),
    subscription_id: z.nullable(z.string()),
    customer_id: z.string(),
    revoke_benefits: z.boolean(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "tax_amount": "taxAmount",
        "organization_id": "organizationId",
        "order_id": "orderId",
        "subscription_id": "subscriptionId",
        "customer_id": "customerId",
        "revoke_benefits": "revokeBenefits",
    });
});
/** @internal */
export const Refund$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    status: RefundStatus$outboundSchema,
    reason: RefundReason$outboundSchema,
    amount: z.number().int(),
    taxAmount: z.number().int(),
    currency: z.string(),
    organizationId: z.string(),
    orderId: z.string(),
    subscriptionId: z.nullable(z.string()),
    customerId: z.string(),
    revokeBenefits: z.boolean(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        taxAmount: "tax_amount",
        organizationId: "organization_id",
        orderId: "order_id",
        subscriptionId: "subscription_id",
        customerId: "customer_id",
        revokeBenefits: "revoke_benefits",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Refund$;
(function (Refund$) {
    /** @deprecated use `Refund$inboundSchema` instead. */
    Refund$.inboundSchema = Refund$inboundSchema;
    /** @deprecated use `Refund$outboundSchema` instead. */
    Refund$.outboundSchema = Refund$outboundSchema;
})(Refund$ || (Refund$ = {}));
export function refundToJSON(refund) {
    return JSON.stringify(Refund$outboundSchema.parse(refund));
}
export function refundFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Refund$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Refund' from JSON`);
}
//# sourceMappingURL=refund.js.map