"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookVerificationError = exports.validateEvent = void 0;
const standardwebhooks_1 = require("standardwebhooks");
const webhookbenefitcreatedpayload_js_1 = require("./models/components/webhookbenefitcreatedpayload.js");
const webhookbenefitgrantcreatedpayload_js_1 = require("./models/components/webhookbenefitgrantcreatedpayload.js");
const webhookbenefitgrantrevokedpayload_js_1 = require("./models/components/webhookbenefitgrantrevokedpayload.js");
const webhookbenefitgrantupdatedpayload_js_1 = require("./models/components/webhookbenefitgrantupdatedpayload.js");
const webhookbenefitupdatedpayload_js_1 = require("./models/components/webhookbenefitupdatedpayload.js");
const webhookcheckoutcreatedpayload_js_1 = require("./models/components/webhookcheckoutcreatedpayload.js");
const webhookcheckoutupdatedpayload_js_1 = require("./models/components/webhookcheckoutupdatedpayload.js");
const webhookordercreatedpayload_js_1 = require("./models/components/webhookordercreatedpayload.js");
const webhookorderrefundedpayload_js_1 = require("./models/components/webhookorderrefundedpayload.js");
const webhookorderupdatedpayload_js_1 = require("./models/components/webhookorderupdatedpayload.js");
const webhookorderpaidpayload_js_1 = require("./models/components/webhookorderpaidpayload.js");
const webhookorganizationupdatedpayload_js_1 = require("./models/components/webhookorganizationupdatedpayload.js");
const webhookpledgecreatedpayload_js_1 = require("./models/components/webhookpledgecreatedpayload.js");
const webhookpledgeupdatedpayload_js_1 = require("./models/components/webhookpledgeupdatedpayload.js");
const webhookproductcreatedpayload_js_1 = require("./models/components/webhookproductcreatedpayload.js");
const webhookproductupdatedpayload_js_1 = require("./models/components/webhookproductupdatedpayload.js");
const webhookrefundcreatedpayload_js_1 = require("./models/components/webhookrefundcreatedpayload.js");
const webhookrefundupdatedpayload_js_1 = require("./models/components/webhookrefundupdatedpayload.js");
const webhooksubscriptionactivepayload_js_1 = require("./models/components/webhooksubscriptionactivepayload.js");
const webhooksubscriptioncanceledpayload_js_1 = require("./models/components/webhooksubscriptioncanceledpayload.js");
const webhooksubscriptioncreatedpayload_js_1 = require("./models/components/webhooksubscriptioncreatedpayload.js");
const webhooksubscriptionrevokedpayload_js_1 = require("./models/components/webhooksubscriptionrevokedpayload.js");
const webhooksubscriptionuncanceledpayload_js_1 = require("./models/components/webhooksubscriptionuncanceledpayload.js");
const webhooksubscriptionupdatedpayload_js_1 = require("./models/components/webhooksubscriptionupdatedpayload.js");
const webhookcustomercreatedpayload_js_1 = require("./models/components/webhookcustomercreatedpayload.js");
const webhookcustomerupdatedpayload_js_1 = require("./models/components/webhookcustomerupdatedpayload.js");
const webhookcustomerdeletedpayload_js_1 = require("./models/components/webhookcustomerdeletedpayload.js");
const webhookcustomerstatechangedpayload_js_1 = require("./models/components/webhookcustomerstatechangedpayload.js");
const sdkvalidationerror_js_1 = require("./models/errors/sdkvalidationerror.js");
class WebhookVerificationError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
    }
}
exports.WebhookVerificationError = WebhookVerificationError;
const parseEvent = (parsed) => {
    try {
        switch (parsed.type) {
            case "customer.created":
                return webhookcustomercreatedpayload_js_1.WebhookCustomerCreatedPayload$inboundSchema.parse(parsed);
            case "customer.updated":
                return webhookcustomerupdatedpayload_js_1.WebhookCustomerUpdatedPayload$inboundSchema.parse(parsed);
            case "customer.deleted":
                return webhookcustomerdeletedpayload_js_1.WebhookCustomerDeletedPayload$inboundSchema.parse(parsed);
            case "customer.state_changed":
                return webhookcustomerstatechangedpayload_js_1.WebhookCustomerStateChangedPayload$inboundSchema.parse(parsed);
            case "benefit.created":
                return webhookbenefitcreatedpayload_js_1.WebhookBenefitCreatedPayload$inboundSchema.parse(parsed);
            case "benefit_grant.created":
                return webhookbenefitgrantcreatedpayload_js_1.WebhookBenefitGrantCreatedPayload$inboundSchema.parse(parsed);
            case "benefit_grant.revoked":
                return webhookbenefitgrantrevokedpayload_js_1.WebhookBenefitGrantRevokedPayload$inboundSchema.parse(parsed);
            case "benefit_grant.updated":
                return webhookbenefitgrantupdatedpayload_js_1.WebhookBenefitGrantUpdatedPayload$inboundSchema.parse(parsed);
            case "benefit.updated":
                return webhookbenefitupdatedpayload_js_1.WebhookBenefitUpdatedPayload$inboundSchema.parse(parsed);
            case "checkout.created":
                return webhookcheckoutcreatedpayload_js_1.WebhookCheckoutCreatedPayload$inboundSchema.parse(parsed);
            case "checkout.updated":
                return webhookcheckoutupdatedpayload_js_1.WebhookCheckoutUpdatedPayload$inboundSchema.parse(parsed);
            case "order.created":
                return webhookordercreatedpayload_js_1.WebhookOrderCreatedPayload$inboundSchema.parse(parsed);
            case "order.paid":
                return webhookorderpaidpayload_js_1.WebhookOrderPaidPayload$inboundSchema.parse(parsed);
            case "order.updated":
                return webhookorderupdatedpayload_js_1.WebhookOrderUpdatedPayload$inboundSchema.parse(parsed);
            case "order.refunded":
                return webhookorderrefundedpayload_js_1.WebhookOrderRefundedPayload$inboundSchema.parse(parsed);
            case "organization.updated":
                return webhookorganizationupdatedpayload_js_1.WebhookOrganizationUpdatedPayload$inboundSchema.parse(parsed);
            case "pledge.created":
                return webhookpledgecreatedpayload_js_1.WebhookPledgeCreatedPayload$inboundSchema.parse(parsed);
            case "pledge.updated":
                return webhookpledgeupdatedpayload_js_1.WebhookPledgeUpdatedPayload$inboundSchema.parse(parsed);
            case "product.created":
                return webhookproductcreatedpayload_js_1.WebhookProductCreatedPayload$inboundSchema.parse(parsed);
            case "product.updated":
                return webhookproductupdatedpayload_js_1.WebhookProductUpdatedPayload$inboundSchema.parse(parsed);
            case "refund.created":
                return webhookrefundcreatedpayload_js_1.WebhookRefundCreatedPayload$inboundSchema.parse(parsed);
            case "refund.updated":
                return webhookrefundupdatedpayload_js_1.WebhookRefundUpdatedPayload$inboundSchema.parse(parsed);
            case "subscription.active":
                return webhooksubscriptionactivepayload_js_1.WebhookSubscriptionActivePayload$inboundSchema.parse(parsed);
            case "subscription.canceled":
                return webhooksubscriptioncanceledpayload_js_1.WebhookSubscriptionCanceledPayload$inboundSchema.parse(parsed);
            case "subscription.created":
                return webhooksubscriptioncreatedpayload_js_1.WebhookSubscriptionCreatedPayload$inboundSchema.parse(parsed);
            case "subscription.revoked":
                return webhooksubscriptionrevokedpayload_js_1.WebhookSubscriptionRevokedPayload$inboundSchema.parse(parsed);
            case "subscription.uncanceled":
                return webhooksubscriptionuncanceledpayload_js_1.WebhookSubscriptionUncanceledPayload$inboundSchema.parse(parsed);
            case "subscription.updated":
                return webhooksubscriptionupdatedpayload_js_1.WebhookSubscriptionUpdatedPayload$inboundSchema.parse(parsed);
            default:
                throw new sdkvalidationerror_js_1.SDKValidationError(`Unknown event type: ${parsed.type}`, parsed.type, parsed);
        }
    }
    catch (error) {
        throw new sdkvalidationerror_js_1.SDKValidationError("Failed to parse event", error, parsed);
    }
};
const validateEvent = (body, headers, secret) => {
    const base64Secret = Buffer.from(secret, "utf-8").toString("base64");
    const webhook = new standardwebhooks_1.Webhook(base64Secret);
    try {
        const parsed = webhook.verify(body, headers);
        return parseEvent(parsed);
    }
    catch (error) {
        if (error instanceof standardwebhooks_1.WebhookVerificationError) {
            throw new WebhookVerificationError(error.message);
        }
        throw error;
    }
};
exports.validateEvent = validateEvent;
//# sourceMappingURL=webhooks.js.map