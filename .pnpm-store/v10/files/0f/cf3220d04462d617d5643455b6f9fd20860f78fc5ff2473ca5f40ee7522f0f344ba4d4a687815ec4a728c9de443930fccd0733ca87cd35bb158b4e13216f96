/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Customer$inboundSchema, Customer$outboundSchema, } from "./customer.js";
/** @internal */
export const CustomerSession$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    token: z.string(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    customer_portal_url: z.string(),
    customer_id: z.string(),
    customer: Customer$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "expires_at": "expiresAt",
        "customer_portal_url": "customerPortalUrl",
        "customer_id": "customerId",
    });
});
/** @internal */
export const CustomerSession$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    token: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    customerPortalUrl: z.string(),
    customerId: z.string(),
    customer: Customer$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        expiresAt: "expires_at",
        customerPortalUrl: "customer_portal_url",
        customerId: "customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerSession$;
(function (CustomerSession$) {
    /** @deprecated use `CustomerSession$inboundSchema` instead. */
    CustomerSession$.inboundSchema = CustomerSession$inboundSchema;
    /** @deprecated use `CustomerSession$outboundSchema` instead. */
    CustomerSession$.outboundSchema = CustomerSession$outboundSchema;
})(CustomerSession$ || (CustomerSession$ = {}));
export function customerSessionToJSON(customerSession) {
    return JSON.stringify(CustomerSession$outboundSchema.parse(customerSession));
}
export function customerSessionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerSession$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerSession' from JSON`);
}
//# sourceMappingURL=customersession.js.map