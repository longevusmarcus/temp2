/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceOrganization$inboundSchema, ListResourceOrganization$outboundSchema, } from "../components/listresourceorganization.js";
import { OrganizationSortProperty$inboundSchema, OrganizationSortProperty$outboundSchema, } from "../components/organizationsortproperty.js";
/** @internal */
export const OrganizationsListRequest$inboundSchema = z.object({
    slug: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(OrganizationSortProperty$inboundSchema))
        .optional(),
});
/** @internal */
export const OrganizationsListRequest$outboundSchema = z.object({
    slug: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(OrganizationSortProperty$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrganizationsListRequest$;
(function (OrganizationsListRequest$) {
    /** @deprecated use `OrganizationsListRequest$inboundSchema` instead. */
    OrganizationsListRequest$.inboundSchema = OrganizationsListRequest$inboundSchema;
    /** @deprecated use `OrganizationsListRequest$outboundSchema` instead. */
    OrganizationsListRequest$.outboundSchema = OrganizationsListRequest$outboundSchema;
})(OrganizationsListRequest$ || (OrganizationsListRequest$ = {}));
export function organizationsListRequestToJSON(organizationsListRequest) {
    return JSON.stringify(OrganizationsListRequest$outboundSchema.parse(organizationsListRequest));
}
export function organizationsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrganizationsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrganizationsListRequest' from JSON`);
}
/** @internal */
export const OrganizationsListResponse$inboundSchema = z.object({
    Result: ListResourceOrganization$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const OrganizationsListResponse$outboundSchema = z.object({
    result: ListResourceOrganization$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrganizationsListResponse$;
(function (OrganizationsListResponse$) {
    /** @deprecated use `OrganizationsListResponse$inboundSchema` instead. */
    OrganizationsListResponse$.inboundSchema = OrganizationsListResponse$inboundSchema;
    /** @deprecated use `OrganizationsListResponse$outboundSchema` instead. */
    OrganizationsListResponse$.outboundSchema = OrganizationsListResponse$outboundSchema;
})(OrganizationsListResponse$ || (OrganizationsListResponse$ = {}));
export function organizationsListResponseToJSON(organizationsListResponse) {
    return JSON.stringify(OrganizationsListResponse$outboundSchema.parse(organizationsListResponse));
}
export function organizationsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrganizationsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrganizationsListResponse' from JSON`);
}
//# sourceMappingURL=organizationslist.js.map