import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { CustomerStateBenefitGrant, CustomerStateBenefitGrant$Outbound } from "./customerstatebenefitgrant.js";
import { CustomerStateSubscription, CustomerStateSubscription$Outbound } from "./customerstatesubscription.js";
import { TaxIDFormat } from "./taxidformat.js";
export type CustomerStateMetadata = string | number | boolean;
export type CustomerStateTaxId = string | TaxIDFormat;
/**
 * A customer along with additional state information:
 *
 * @remarks
 *
 * * Active subscriptions
 * * Active benefits
 */
export type CustomerState = {
    /**
     * The ID of the customer.
     */
    id: string;
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    /**
     * The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.
     */
    externalId: string | null;
    /**
     * The email address of the customer. This must be unique within the organization.
     */
    email: string;
    /**
     * Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.
     */
    emailVerified: boolean;
    /**
     * The name of the customer.
     */
    name: string | null;
    billingAddress: Address | null;
    taxId: Array<string | TaxIDFormat | null> | null;
    /**
     * The ID of the organization owning the customer.
     */
    organizationId: string;
    /**
     * Timestamp for when the customer was soft deleted.
     */
    deletedAt: Date | null;
    /**
     * The customer's active subscriptions.
     */
    activeSubscriptions: Array<CustomerStateSubscription>;
    /**
     * The customer's active benefit grants.
     */
    grantedBenefits: Array<CustomerStateBenefitGrant>;
    avatarUrl: string;
};
/** @internal */
export declare const CustomerStateMetadata$inboundSchema: z.ZodType<CustomerStateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerStateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomerStateMetadata$outboundSchema: z.ZodType<CustomerStateMetadata$Outbound, z.ZodTypeDef, CustomerStateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerStateMetadata$ {
    /** @deprecated use `CustomerStateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerStateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerStateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerStateMetadata$Outbound, z.ZodTypeDef, CustomerStateMetadata>;
    /** @deprecated use `CustomerStateMetadata$Outbound` instead. */
    type Outbound = CustomerStateMetadata$Outbound;
}
export declare function customerStateMetadataToJSON(customerStateMetadata: CustomerStateMetadata): string;
export declare function customerStateMetadataFromJSON(jsonString: string): SafeParseResult<CustomerStateMetadata, SDKValidationError>;
/** @internal */
export declare const CustomerStateTaxId$inboundSchema: z.ZodType<CustomerStateTaxId, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerStateTaxId$Outbound = string | string;
/** @internal */
export declare const CustomerStateTaxId$outboundSchema: z.ZodType<CustomerStateTaxId$Outbound, z.ZodTypeDef, CustomerStateTaxId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerStateTaxId$ {
    /** @deprecated use `CustomerStateTaxId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerStateTaxId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `CustomerStateTaxId$Outbound` instead. */
    type Outbound = CustomerStateTaxId$Outbound;
}
export declare function customerStateTaxIdToJSON(customerStateTaxId: CustomerStateTaxId): string;
export declare function customerStateTaxIdFromJSON(jsonString: string): SafeParseResult<CustomerStateTaxId, SDKValidationError>;
/** @internal */
export declare const CustomerState$inboundSchema: z.ZodType<CustomerState, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerState$Outbound = {
    id: string;
    created_at: string;
    modified_at: string | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    external_id: string | null;
    email: string;
    email_verified: boolean;
    name: string | null;
    billing_address: Address$Outbound | null;
    tax_id: Array<string | string | null> | null;
    organization_id: string;
    deleted_at: string | null;
    active_subscriptions: Array<CustomerStateSubscription$Outbound>;
    granted_benefits: Array<CustomerStateBenefitGrant$Outbound>;
    avatar_url: string;
};
/** @internal */
export declare const CustomerState$outboundSchema: z.ZodType<CustomerState$Outbound, z.ZodTypeDef, CustomerState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerState$ {
    /** @deprecated use `CustomerState$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerState, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerState$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerState$Outbound, z.ZodTypeDef, CustomerState>;
    /** @deprecated use `CustomerState$Outbound` instead. */
    type Outbound = CustomerState$Outbound;
}
export declare function customerStateToJSON(customerState: CustomerState): string;
export declare function customerStateFromJSON(jsonString: string): SafeParseResult<CustomerState, SDKValidationError>;
//# sourceMappingURL=customerstate.d.ts.map