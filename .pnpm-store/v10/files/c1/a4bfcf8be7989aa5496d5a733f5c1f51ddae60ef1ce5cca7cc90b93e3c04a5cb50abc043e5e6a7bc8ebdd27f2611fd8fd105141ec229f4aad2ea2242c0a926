/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Meta$inboundSchema = z
    .object({});
/** @internal */
export const Meta$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Meta$;
(function (Meta$) {
    /** @deprecated use `Meta$inboundSchema` instead. */
    Meta$.inboundSchema = Meta$inboundSchema;
    /** @deprecated use `Meta$outboundSchema` instead. */
    Meta$.outboundSchema = Meta$outboundSchema;
})(Meta$ || (Meta$ = {}));
export function metaToJSON(meta) {
    return JSON.stringify(Meta$outboundSchema.parse(meta));
}
export function metaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Meta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Meta' from JSON`);
}
/** @internal */
export const LicenseKeyActivationBase$inboundSchema = z.object({
    id: z.string(),
    license_key_id: z.string(),
    label: z.string(),
    meta: z.lazy(() => Meta$inboundSchema),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
}).transform((v) => {
    return remap$(v, {
        "license_key_id": "licenseKeyId",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
    });
});
/** @internal */
export const LicenseKeyActivationBase$outboundSchema = z.object({
    id: z.string(),
    licenseKeyId: z.string(),
    label: z.string(),
    meta: z.lazy(() => Meta$outboundSchema),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
}).transform((v) => {
    return remap$(v, {
        licenseKeyId: "license_key_id",
        createdAt: "created_at",
        modifiedAt: "modified_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyActivationBase$;
(function (LicenseKeyActivationBase$) {
    /** @deprecated use `LicenseKeyActivationBase$inboundSchema` instead. */
    LicenseKeyActivationBase$.inboundSchema = LicenseKeyActivationBase$inboundSchema;
    /** @deprecated use `LicenseKeyActivationBase$outboundSchema` instead. */
    LicenseKeyActivationBase$.outboundSchema = LicenseKeyActivationBase$outboundSchema;
})(LicenseKeyActivationBase$ || (LicenseKeyActivationBase$ = {}));
export function licenseKeyActivationBaseToJSON(licenseKeyActivationBase) {
    return JSON.stringify(LicenseKeyActivationBase$outboundSchema.parse(licenseKeyActivationBase));
}
export function licenseKeyActivationBaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyActivationBase$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyActivationBase' from JSON`);
}
//# sourceMappingURL=licensekeyactivationbase.js.map