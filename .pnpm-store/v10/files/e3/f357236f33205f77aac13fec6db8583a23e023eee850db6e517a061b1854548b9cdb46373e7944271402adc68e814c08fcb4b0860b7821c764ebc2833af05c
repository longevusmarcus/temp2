"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeterUpdate$ = exports.MeterUpdate$outboundSchema = exports.MeterUpdate$inboundSchema = exports.Aggregation$ = exports.Aggregation$outboundSchema = exports.Aggregation$inboundSchema = exports.MeterUpdateMetadata$ = exports.MeterUpdateMetadata$outboundSchema = exports.MeterUpdateMetadata$inboundSchema = void 0;
exports.meterUpdateMetadataToJSON = meterUpdateMetadataToJSON;
exports.meterUpdateMetadataFromJSON = meterUpdateMetadataFromJSON;
exports.aggregationToJSON = aggregationToJSON;
exports.aggregationFromJSON = aggregationFromJSON;
exports.meterUpdateToJSON = meterUpdateToJSON;
exports.meterUpdateFromJSON = meterUpdateFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const countaggregation_js_1 = require("./countaggregation.js");
const filter_js_1 = require("./filter.js");
const propertyaggregation_js_1 = require("./propertyaggregation.js");
/** @internal */
exports.MeterUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.MeterUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterUpdateMetadata$;
(function (MeterUpdateMetadata$) {
    /** @deprecated use `MeterUpdateMetadata$inboundSchema` instead. */
    MeterUpdateMetadata$.inboundSchema = exports.MeterUpdateMetadata$inboundSchema;
    /** @deprecated use `MeterUpdateMetadata$outboundSchema` instead. */
    MeterUpdateMetadata$.outboundSchema = exports.MeterUpdateMetadata$outboundSchema;
})(MeterUpdateMetadata$ || (exports.MeterUpdateMetadata$ = MeterUpdateMetadata$ = {}));
function meterUpdateMetadataToJSON(meterUpdateMetadata) {
    return JSON.stringify(exports.MeterUpdateMetadata$outboundSchema.parse(meterUpdateMetadata));
}
function meterUpdateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterUpdateMetadata' from JSON`);
}
/** @internal */
exports.Aggregation$inboundSchema = z.union([
    countaggregation_js_1.CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/** @internal */
exports.Aggregation$outboundSchema = z.union([
    countaggregation_js_1.CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Aggregation$;
(function (Aggregation$) {
    /** @deprecated use `Aggregation$inboundSchema` instead. */
    Aggregation$.inboundSchema = exports.Aggregation$inboundSchema;
    /** @deprecated use `Aggregation$outboundSchema` instead. */
    Aggregation$.outboundSchema = exports.Aggregation$outboundSchema;
})(Aggregation$ || (exports.Aggregation$ = Aggregation$ = {}));
function aggregationToJSON(aggregation) {
    return JSON.stringify(exports.Aggregation$outboundSchema.parse(aggregation));
}
function aggregationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Aggregation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Aggregation' from JSON`);
}
/** @internal */
exports.MeterUpdate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    filter: z.nullable(filter_js_1.Filter$inboundSchema).optional(),
    aggregation: z.nullable(z.union([
        countaggregation_js_1.CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({
            func: v.func,
        }))),
    ])).optional(),
});
/** @internal */
exports.MeterUpdate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    filter: z.nullable(filter_js_1.Filter$outboundSchema).optional(),
    aggregation: z.nullable(z.union([
        countaggregation_js_1.CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({
            func: v.func,
        }))),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterUpdate$;
(function (MeterUpdate$) {
    /** @deprecated use `MeterUpdate$inboundSchema` instead. */
    MeterUpdate$.inboundSchema = exports.MeterUpdate$inboundSchema;
    /** @deprecated use `MeterUpdate$outboundSchema` instead. */
    MeterUpdate$.outboundSchema = exports.MeterUpdate$outboundSchema;
})(MeterUpdate$ || (exports.MeterUpdate$ = MeterUpdate$ = {}));
function meterUpdateToJSON(meterUpdate) {
    return JSON.stringify(exports.MeterUpdate$outboundSchema.parse(meterUpdate));
}
function meterUpdateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterUpdate' from JSON`);
}
//# sourceMappingURL=meterupdate.js.map