/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Issue$inboundSchema, Issue$outboundSchema, } from "./issue.js";
import { Pledger$inboundSchema, Pledger$outboundSchema, } from "./pledger.js";
import { PledgeState$inboundSchema, PledgeState$outboundSchema, } from "./pledgestate.js";
import { PledgeType$inboundSchema, PledgeType$outboundSchema, } from "./pledgetype.js";
/** @internal */
export const Pledge$inboundSchema = z
    .object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    state: PledgeState$inboundSchema,
    type: PledgeType$inboundSchema,
    refunded_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    scheduled_payout_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    issue: Issue$inboundSchema,
    pledger: z.nullable(Pledger$inboundSchema).optional(),
    hosted_invoice_url: z.nullable(z.string()).optional(),
    authed_can_admin_sender: z.boolean().default(false),
    authed_can_admin_received: z.boolean().default(false),
    created_by: z.nullable(Pledger$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "refunded_at": "refundedAt",
        "scheduled_payout_at": "scheduledPayoutAt",
        "hosted_invoice_url": "hostedInvoiceUrl",
        "authed_can_admin_sender": "authedCanAdminSender",
        "authed_can_admin_received": "authedCanAdminReceived",
        "created_by": "createdBy",
    });
});
/** @internal */
export const Pledge$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    state: PledgeState$outboundSchema,
    type: PledgeType$outboundSchema,
    refundedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    scheduledPayoutAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    issue: Issue$outboundSchema,
    pledger: z.nullable(Pledger$outboundSchema).optional(),
    hostedInvoiceUrl: z.nullable(z.string()).optional(),
    authedCanAdminSender: z.boolean().default(false),
    authedCanAdminReceived: z.boolean().default(false),
    createdBy: z.nullable(Pledger$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        refundedAt: "refunded_at",
        scheduledPayoutAt: "scheduled_payout_at",
        hostedInvoiceUrl: "hosted_invoice_url",
        authedCanAdminSender: "authed_can_admin_sender",
        authedCanAdminReceived: "authed_can_admin_received",
        createdBy: "created_by",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Pledge$;
(function (Pledge$) {
    /** @deprecated use `Pledge$inboundSchema` instead. */
    Pledge$.inboundSchema = Pledge$inboundSchema;
    /** @deprecated use `Pledge$outboundSchema` instead. */
    Pledge$.outboundSchema = Pledge$outboundSchema;
})(Pledge$ || (Pledge$ = {}));
export function pledgeToJSON(pledge) {
    return JSON.stringify(Pledge$outboundSchema.parse(pledge));
}
export function pledgeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Pledge$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Pledge' from JSON`);
}
//# sourceMappingURL=pledge.js.map