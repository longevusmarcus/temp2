/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerOrderProduct$inboundSchema, CustomerOrderProduct$outboundSchema, } from "./customerorderproduct.js";
import { CustomerOrderSubscription$inboundSchema, CustomerOrderSubscription$outboundSchema, } from "./customerordersubscription.js";
import { LegacyRecurringProductPrice$inboundSchema, LegacyRecurringProductPrice$outboundSchema, } from "./legacyrecurringproductprice.js";
import { OrderItemSchema$inboundSchema, OrderItemSchema$outboundSchema, } from "./orderitemschema.js";
import { OrderStatus$inboundSchema, OrderStatus$outboundSchema, } from "./orderstatus.js";
import { ProductPrice$inboundSchema, ProductPrice$outboundSchema, } from "./productprice.js";
/** @internal */
export const CustomerOrderProductPrice$inboundSchema = z.union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
]);
/** @internal */
export const CustomerOrderProductPrice$outboundSchema = z.union([
    LegacyRecurringProductPrice$outboundSchema,
    ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerOrderProductPrice$;
(function (CustomerOrderProductPrice$) {
    /** @deprecated use `CustomerOrderProductPrice$inboundSchema` instead. */
    CustomerOrderProductPrice$.inboundSchema = CustomerOrderProductPrice$inboundSchema;
    /** @deprecated use `CustomerOrderProductPrice$outboundSchema` instead. */
    CustomerOrderProductPrice$.outboundSchema = CustomerOrderProductPrice$outboundSchema;
})(CustomerOrderProductPrice$ || (CustomerOrderProductPrice$ = {}));
export function customerOrderProductPriceToJSON(customerOrderProductPrice) {
    return JSON.stringify(CustomerOrderProductPrice$outboundSchema.parse(customerOrderProductPrice));
}
export function customerOrderProductPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerOrderProductPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerOrderProductPrice' from JSON`);
}
/** @internal */
export const CustomerOrder$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    status: OrderStatus$inboundSchema,
    paid: z.boolean(),
    subtotal_amount: z.number().int(),
    discount_amount: z.number().int(),
    net_amount: z.number().int(),
    amount: z.number().int(),
    tax_amount: z.number().int(),
    total_amount: z.number().int(),
    refunded_amount: z.number().int(),
    refunded_tax_amount: z.number().int(),
    currency: z.string(),
    customer_id: z.string(),
    product_id: z.string(),
    product_price_id: z.string(),
    subscription_id: z.nullable(z.string()),
    user_id: z.string(),
    product: CustomerOrderProduct$inboundSchema,
    product_price: z.union([
        LegacyRecurringProductPrice$inboundSchema,
        ProductPrice$inboundSchema,
    ]),
    subscription: z.nullable(CustomerOrderSubscription$inboundSchema),
    items: z.array(OrderItemSchema$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "subtotal_amount": "subtotalAmount",
        "discount_amount": "discountAmount",
        "net_amount": "netAmount",
        "tax_amount": "taxAmount",
        "total_amount": "totalAmount",
        "refunded_amount": "refundedAmount",
        "refunded_tax_amount": "refundedTaxAmount",
        "customer_id": "customerId",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "subscription_id": "subscriptionId",
        "user_id": "userId",
        "product_price": "productPrice",
    });
});
/** @internal */
export const CustomerOrder$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    status: OrderStatus$outboundSchema,
    paid: z.boolean(),
    subtotalAmount: z.number().int(),
    discountAmount: z.number().int(),
    netAmount: z.number().int(),
    amount: z.number().int(),
    taxAmount: z.number().int(),
    totalAmount: z.number().int(),
    refundedAmount: z.number().int(),
    refundedTaxAmount: z.number().int(),
    currency: z.string(),
    customerId: z.string(),
    productId: z.string(),
    productPriceId: z.string(),
    subscriptionId: z.nullable(z.string()),
    userId: z.string(),
    product: CustomerOrderProduct$outboundSchema,
    productPrice: z.union([
        LegacyRecurringProductPrice$outboundSchema,
        ProductPrice$outboundSchema,
    ]),
    subscription: z.nullable(CustomerOrderSubscription$outboundSchema),
    items: z.array(OrderItemSchema$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        subtotalAmount: "subtotal_amount",
        discountAmount: "discount_amount",
        netAmount: "net_amount",
        taxAmount: "tax_amount",
        totalAmount: "total_amount",
        refundedAmount: "refunded_amount",
        refundedTaxAmount: "refunded_tax_amount",
        customerId: "customer_id",
        productId: "product_id",
        productPriceId: "product_price_id",
        subscriptionId: "subscription_id",
        userId: "user_id",
        productPrice: "product_price",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerOrder$;
(function (CustomerOrder$) {
    /** @deprecated use `CustomerOrder$inboundSchema` instead. */
    CustomerOrder$.inboundSchema = CustomerOrder$inboundSchema;
    /** @deprecated use `CustomerOrder$outboundSchema` instead. */
    CustomerOrder$.outboundSchema = CustomerOrder$outboundSchema;
})(CustomerOrder$ || (CustomerOrder$ = {}));
export function customerOrderToJSON(customerOrder) {
    return JSON.stringify(CustomerOrder$outboundSchema.parse(customerOrder));
}
export function customerOrderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerOrder$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerOrder' from JSON`);
}
//# sourceMappingURL=customerorder.js.map