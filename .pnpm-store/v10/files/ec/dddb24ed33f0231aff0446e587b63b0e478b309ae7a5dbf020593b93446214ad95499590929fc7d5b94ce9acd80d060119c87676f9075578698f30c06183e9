/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomField$inboundSchema, CustomField$outboundSchema, } from "./customfield.js";
/** @internal */
export const AttachedCustomField$inboundSchema = z.object({
    custom_field_id: z.string(),
    custom_field: CustomField$inboundSchema,
    order: z.number().int(),
    required: z.boolean(),
}).transform((v) => {
    return remap$(v, {
        "custom_field_id": "customFieldId",
        "custom_field": "customField",
    });
});
/** @internal */
export const AttachedCustomField$outboundSchema = z.object({
    customFieldId: z.string(),
    customField: CustomField$outboundSchema,
    order: z.number().int(),
    required: z.boolean(),
}).transform((v) => {
    return remap$(v, {
        customFieldId: "custom_field_id",
        customField: "custom_field",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AttachedCustomField$;
(function (AttachedCustomField$) {
    /** @deprecated use `AttachedCustomField$inboundSchema` instead. */
    AttachedCustomField$.inboundSchema = AttachedCustomField$inboundSchema;
    /** @deprecated use `AttachedCustomField$outboundSchema` instead. */
    AttachedCustomField$.outboundSchema = AttachedCustomField$outboundSchema;
})(AttachedCustomField$ || (AttachedCustomField$ = {}));
export function attachedCustomFieldToJSON(attachedCustomField) {
    return JSON.stringify(AttachedCustomField$outboundSchema.parse(attachedCustomField));
}
export function attachedCustomFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AttachedCustomField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AttachedCustomField' from JSON`);
}
//# sourceMappingURL=attachedcustomfield.js.map