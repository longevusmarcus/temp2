/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DiscountDuration$inboundSchema, DiscountDuration$outboundSchema, } from "./discountduration.js";
import { DiscountType$inboundSchema, DiscountType$outboundSchema, } from "./discounttype.js";
/** @internal */
export const DiscountFixedRepeatDurationCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const DiscountFixedRepeatDurationCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountFixedRepeatDurationCreateMetadata$;
(function (DiscountFixedRepeatDurationCreateMetadata$) {
    /** @deprecated use `DiscountFixedRepeatDurationCreateMetadata$inboundSchema` instead. */
    DiscountFixedRepeatDurationCreateMetadata$.inboundSchema = DiscountFixedRepeatDurationCreateMetadata$inboundSchema;
    /** @deprecated use `DiscountFixedRepeatDurationCreateMetadata$outboundSchema` instead. */
    DiscountFixedRepeatDurationCreateMetadata$.outboundSchema = DiscountFixedRepeatDurationCreateMetadata$outboundSchema;
})(DiscountFixedRepeatDurationCreateMetadata$ || (DiscountFixedRepeatDurationCreateMetadata$ = {}));
export function discountFixedRepeatDurationCreateMetadataToJSON(discountFixedRepeatDurationCreateMetadata) {
    return JSON.stringify(DiscountFixedRepeatDurationCreateMetadata$outboundSchema.parse(discountFixedRepeatDurationCreateMetadata));
}
export function discountFixedRepeatDurationCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountFixedRepeatDurationCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountFixedRepeatDurationCreateMetadata' from JSON`);
}
/** @internal */
export const DiscountFixedRepeatDurationCreate$inboundSchema = z.object({
    duration: DiscountDuration$inboundSchema,
    duration_in_months: z.number().int(),
    type: DiscountType$inboundSchema,
    amount: z.number().int(),
    currency: z.string().default("usd"),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    code: z.nullable(z.string()).optional(),
    starts_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    max_redemptions: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
    organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "duration_in_months": "durationInMonths",
        "starts_at": "startsAt",
        "ends_at": "endsAt",
        "max_redemptions": "maxRedemptions",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const DiscountFixedRepeatDurationCreate$outboundSchema = z.object({
    duration: DiscountDuration$outboundSchema,
    durationInMonths: z.number().int(),
    type: DiscountType$outboundSchema,
    amount: z.number().int(),
    currency: z.string().default("usd"),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    code: z.nullable(z.string()).optional(),
    startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    maxRedemptions: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
    organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        durationInMonths: "duration_in_months",
        startsAt: "starts_at",
        endsAt: "ends_at",
        maxRedemptions: "max_redemptions",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountFixedRepeatDurationCreate$;
(function (DiscountFixedRepeatDurationCreate$) {
    /** @deprecated use `DiscountFixedRepeatDurationCreate$inboundSchema` instead. */
    DiscountFixedRepeatDurationCreate$.inboundSchema = DiscountFixedRepeatDurationCreate$inboundSchema;
    /** @deprecated use `DiscountFixedRepeatDurationCreate$outboundSchema` instead. */
    DiscountFixedRepeatDurationCreate$.outboundSchema = DiscountFixedRepeatDurationCreate$outboundSchema;
})(DiscountFixedRepeatDurationCreate$ || (DiscountFixedRepeatDurationCreate$ = {}));
export function discountFixedRepeatDurationCreateToJSON(discountFixedRepeatDurationCreate) {
    return JSON.stringify(DiscountFixedRepeatDurationCreate$outboundSchema.parse(discountFixedRepeatDurationCreate));
}
export function discountFixedRepeatDurationCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountFixedRepeatDurationCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountFixedRepeatDurationCreate' from JSON`);
}
//# sourceMappingURL=discountfixedrepeatdurationcreate.js.map