import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { AuthorizeResponseOrganization, AuthorizeResponseOrganization$Outbound } from "../components/authorizeresponseorganization.js";
import { AuthorizeResponseUser, AuthorizeResponseUser$Outbound } from "../components/authorizeresponseuser.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Successful Response
 */
export type Oauth2AuthorizeResponseOauth2Authorize = (AuthorizeResponseUser & {
    subType: "user";
}) | (AuthorizeResponseOrganization & {
    subType: "organization";
});
/** @internal */
export declare const Oauth2AuthorizeResponseOauth2Authorize$inboundSchema: z.ZodType<Oauth2AuthorizeResponseOauth2Authorize, z.ZodTypeDef, unknown>;
/** @internal */
export type Oauth2AuthorizeResponseOauth2Authorize$Outbound = (AuthorizeResponseUser$Outbound & {
    sub_type: "user";
}) | (AuthorizeResponseOrganization$Outbound & {
    sub_type: "organization";
});
/** @internal */
export declare const Oauth2AuthorizeResponseOauth2Authorize$outboundSchema: z.ZodType<Oauth2AuthorizeResponseOauth2Authorize$Outbound, z.ZodTypeDef, Oauth2AuthorizeResponseOauth2Authorize>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Oauth2AuthorizeResponseOauth2Authorize$ {
    /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Oauth2AuthorizeResponseOauth2Authorize, z.ZodTypeDef, unknown>;
    /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Oauth2AuthorizeResponseOauth2Authorize$Outbound, z.ZodTypeDef, Oauth2AuthorizeResponseOauth2Authorize>;
    /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$Outbound` instead. */
    type Outbound = Oauth2AuthorizeResponseOauth2Authorize$Outbound;
}
export declare function oauth2AuthorizeResponseOauth2AuthorizeToJSON(oauth2AuthorizeResponseOauth2Authorize: Oauth2AuthorizeResponseOauth2Authorize): string;
export declare function oauth2AuthorizeResponseOauth2AuthorizeFromJSON(jsonString: string): SafeParseResult<Oauth2AuthorizeResponseOauth2Authorize, SDKValidationError>;
//# sourceMappingURL=oauth2authorize.d.ts.map