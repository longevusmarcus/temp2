/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const CustomerMetadata1$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomerMetadata1$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerMetadata1$;
(function (CustomerMetadata1$) {
    /** @deprecated use `CustomerMetadata1$inboundSchema` instead. */
    CustomerMetadata1$.inboundSchema = CustomerMetadata1$inboundSchema;
    /** @deprecated use `CustomerMetadata1$outboundSchema` instead. */
    CustomerMetadata1$.outboundSchema = CustomerMetadata1$outboundSchema;
})(CustomerMetadata1$ || (CustomerMetadata1$ = {}));
export function customerMetadata1ToJSON(customerMetadata1) {
    return JSON.stringify(CustomerMetadata1$outboundSchema.parse(customerMetadata1));
}
export function customerMetadata1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerMetadata1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerMetadata1' from JSON`);
}
/** @internal */
export const CustomerTaxId$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const CustomerTaxId$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerTaxId$;
(function (CustomerTaxId$) {
    /** @deprecated use `CustomerTaxId$inboundSchema` instead. */
    CustomerTaxId$.inboundSchema = CustomerTaxId$inboundSchema;
    /** @deprecated use `CustomerTaxId$outboundSchema` instead. */
    CustomerTaxId$.outboundSchema = CustomerTaxId$outboundSchema;
})(CustomerTaxId$ || (CustomerTaxId$ = {}));
export function customerTaxIdToJSON(customerTaxId) {
    return JSON.stringify(CustomerTaxId$outboundSchema.parse(customerTaxId));
}
export function customerTaxIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerTaxId' from JSON`);
}
/** @internal */
export const Customer$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    external_id: z.nullable(z.string()),
    email: z.string(),
    email_verified: z.boolean(),
    name: z.nullable(z.string()),
    billing_address: z.nullable(Address$inboundSchema),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))),
    organization_id: z.string(),
    deleted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    avatar_url: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "external_id": "externalId",
        "email_verified": "emailVerified",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
        "deleted_at": "deletedAt",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
export const Customer$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    externalId: z.nullable(z.string()),
    email: z.string(),
    emailVerified: z.boolean(),
    name: z.nullable(z.string()),
    billingAddress: z.nullable(Address$outboundSchema),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))),
    organizationId: z.string(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
    avatarUrl: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        externalId: "external_id",
        emailVerified: "email_verified",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
        deletedAt: "deleted_at",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Customer$;
(function (Customer$) {
    /** @deprecated use `Customer$inboundSchema` instead. */
    Customer$.inboundSchema = Customer$inboundSchema;
    /** @deprecated use `Customer$outboundSchema` instead. */
    Customer$.outboundSchema = Customer$outboundSchema;
})(Customer$ || (Customer$ = {}));
export function customerToJSON(customer) {
    return JSON.stringify(Customer$outboundSchema.parse(customer));
}
export function customerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Customer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Customer' from JSON`);
}
//# sourceMappingURL=customer.js.map