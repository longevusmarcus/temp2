/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const AuthorizeUser$inboundSchema = z.object({
    id: z.string(),
    email: z.string(),
    avatar_url: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
export const AuthorizeUser$outboundSchema = z.object({
    id: z.string(),
    email: z.string(),
    avatarUrl: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthorizeUser$;
(function (AuthorizeUser$) {
    /** @deprecated use `AuthorizeUser$inboundSchema` instead. */
    AuthorizeUser$.inboundSchema = AuthorizeUser$inboundSchema;
    /** @deprecated use `AuthorizeUser$outboundSchema` instead. */
    AuthorizeUser$.outboundSchema = AuthorizeUser$outboundSchema;
})(AuthorizeUser$ || (AuthorizeUser$ = {}));
export function authorizeUserToJSON(authorizeUser) {
    return JSON.stringify(AuthorizeUser$outboundSchema.parse(authorizeUser));
}
export function authorizeUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthorizeUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthorizeUser' from JSON`);
}
//# sourceMappingURL=authorizeuser.js.map