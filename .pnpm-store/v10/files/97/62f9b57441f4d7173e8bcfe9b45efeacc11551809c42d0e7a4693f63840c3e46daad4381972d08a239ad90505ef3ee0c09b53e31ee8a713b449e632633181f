"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerSession$ = exports.CustomerSession$outboundSchema = exports.CustomerSession$inboundSchema = void 0;
exports.customerSessionToJSON = customerSessionToJSON;
exports.customerSessionFromJSON = customerSessionFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customer_js_1 = require("./customer.js");
/** @internal */
exports.CustomerSession$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    token: z.string(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    customer_portal_url: z.string(),
    customer_id: z.string(),
    customer: customer_js_1.Customer$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "expires_at": "expiresAt",
        "customer_portal_url": "customerPortalUrl",
        "customer_id": "customerId",
    });
});
/** @internal */
exports.CustomerSession$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    token: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    customerPortalUrl: z.string(),
    customerId: z.string(),
    customer: customer_js_1.Customer$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        expiresAt: "expires_at",
        customerPortalUrl: "customer_portal_url",
        customerId: "customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerSession$;
(function (CustomerSession$) {
    /** @deprecated use `CustomerSession$inboundSchema` instead. */
    CustomerSession$.inboundSchema = exports.CustomerSession$inboundSchema;
    /** @deprecated use `CustomerSession$outboundSchema` instead. */
    CustomerSession$.outboundSchema = exports.CustomerSession$outboundSchema;
})(CustomerSession$ || (exports.CustomerSession$ = CustomerSession$ = {}));
function customerSessionToJSON(customerSession) {
    return JSON.stringify(exports.CustomerSession$outboundSchema.parse(customerSession));
}
function customerSessionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerSession$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerSession' from JSON`);
}
//# sourceMappingURL=customersession.js.map