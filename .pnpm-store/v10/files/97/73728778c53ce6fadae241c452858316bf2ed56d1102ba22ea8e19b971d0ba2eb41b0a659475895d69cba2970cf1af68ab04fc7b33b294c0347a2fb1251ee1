import * as z from "zod";
export type PaymentErrorData = {
    error: "PaymentError";
    detail: string;
};
export declare class PaymentError extends Error {
    error: "PaymentError";
    detail: string;
    /** The original data that was passed to this error instance. */
    data$: PaymentErrorData;
    constructor(err: PaymentErrorData);
}
/** @internal */
export declare const PaymentError$inboundSchema: z.ZodType<PaymentError, z.ZodTypeDef, unknown>;
/** @internal */
export type PaymentError$Outbound = {
    error: "PaymentError";
    detail: string;
};
/** @internal */
export declare const PaymentError$outboundSchema: z.ZodType<PaymentError$Outbound, z.ZodTypeDef, PaymentError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PaymentError$ {
    /** @deprecated use `PaymentError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PaymentError, z.ZodTypeDef, unknown>;
    /** @deprecated use `PaymentError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PaymentError$Outbound, z.ZodTypeDef, PaymentError>;
    /** @deprecated use `PaymentError$Outbound` instead. */
    type Outbound = PaymentError$Outbound;
}
//# sourceMappingURL=paymenterror.d.ts.map