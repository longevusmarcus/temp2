"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscriptions = void 0;
const subscriptionsExport_js_1 = require("../funcs/subscriptionsExport.js");
const subscriptionsGet_js_1 = require("../funcs/subscriptionsGet.js");
const subscriptionsList_js_1 = require("../funcs/subscriptionsList.js");
const subscriptionsRevoke_js_1 = require("../funcs/subscriptionsRevoke.js");
const subscriptionsUpdate_js_1 = require("../funcs/subscriptionsUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class Subscriptions extends sdks_js_1.ClientSDK {
    /**
     * List Subscriptions
     *
     * @remarks
     * List subscriptions.
     *
     * **Scopes**: `subscriptions:read` `subscriptions:write`
     */
    async list(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, subscriptionsList_js_1.subscriptionsList)(this, request, options));
    }
    /**
     * Export Subscriptions
     *
     * @remarks
     * Export subscriptions as a CSV file.
     *
     * **Scopes**: `subscriptions:read` `subscriptions:write`
     */
    async export(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriptionsExport_js_1.subscriptionsExport)(this, request, options));
    }
    /**
     * Get Subscription
     *
     * @remarks
     * Get a subscription by ID.
     *
     * **Scopes**: `subscriptions:write`
     */
    async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriptionsGet_js_1.subscriptionsGet)(this, request, options));
    }
    /**
     * Update Subscription
     *
     * @remarks
     * Update a subscription.
     *
     * **Scopes**: `subscriptions:write`
     */
    async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriptionsUpdate_js_1.subscriptionsUpdate)(this, request, options));
    }
    /**
     * Revoke Subscription
     *
     * @remarks
     * Revoke a subscription, i.e cancel immediately.
     *
     * **Scopes**: `subscriptions:write`
     */
    async revoke(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, subscriptionsRevoke_js_1.subscriptionsRevoke)(this, request, options));
    }
}
exports.Subscriptions = Subscriptions;
//# sourceMappingURL=subscriptions.js.map