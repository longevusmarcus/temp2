/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitBase$inboundSchema, BenefitBase$outboundSchema, } from "./benefitbase.js";
import { LegacyRecurringProductPrice$inboundSchema, LegacyRecurringProductPrice$outboundSchema, } from "./legacyrecurringproductprice.js";
import { ProductMediaFileRead$inboundSchema, ProductMediaFileRead$outboundSchema, } from "./productmediafileread.js";
import { ProductPrice$inboundSchema, ProductPrice$outboundSchema, } from "./productprice.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
/** @internal */
export const CheckoutProductPrices$inboundSchema = z.union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
]);
/** @internal */
export const CheckoutProductPrices$outboundSchema = z.union([
    LegacyRecurringProductPrice$outboundSchema,
    ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductPrices$;
(function (CheckoutProductPrices$) {
    /** @deprecated use `CheckoutProductPrices$inboundSchema` instead. */
    CheckoutProductPrices$.inboundSchema = CheckoutProductPrices$inboundSchema;
    /** @deprecated use `CheckoutProductPrices$outboundSchema` instead. */
    CheckoutProductPrices$.outboundSchema = CheckoutProductPrices$outboundSchema;
})(CheckoutProductPrices$ || (CheckoutProductPrices$ = {}));
export function checkoutProductPricesToJSON(checkoutProductPrices) {
    return JSON.stringify(CheckoutProductPrices$outboundSchema.parse(checkoutProductPrices));
}
export function checkoutProductPricesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductPrices$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductPrices' from JSON`);
}
/** @internal */
export const CheckoutProduct$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    name: z.string(),
    description: z.nullable(z.string()),
    recurring_interval: z.nullable(SubscriptionRecurringInterval$inboundSchema),
    is_recurring: z.boolean(),
    is_archived: z.boolean(),
    organization_id: z.string(),
    prices: z.array(z.union([
        LegacyRecurringProductPrice$inboundSchema,
        ProductPrice$inboundSchema,
    ])),
    benefits: z.array(BenefitBase$inboundSchema),
    medias: z.array(ProductMediaFileRead$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "recurring_interval": "recurringInterval",
        "is_recurring": "isRecurring",
        "is_archived": "isArchived",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CheckoutProduct$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    name: z.string(),
    description: z.nullable(z.string()),
    recurringInterval: z.nullable(SubscriptionRecurringInterval$outboundSchema),
    isRecurring: z.boolean(),
    isArchived: z.boolean(),
    organizationId: z.string(),
    prices: z.array(z.union([
        LegacyRecurringProductPrice$outboundSchema,
        ProductPrice$outboundSchema,
    ])),
    benefits: z.array(BenefitBase$outboundSchema),
    medias: z.array(ProductMediaFileRead$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        recurringInterval: "recurring_interval",
        isRecurring: "is_recurring",
        isArchived: "is_archived",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProduct$;
(function (CheckoutProduct$) {
    /** @deprecated use `CheckoutProduct$inboundSchema` instead. */
    CheckoutProduct$.inboundSchema = CheckoutProduct$inboundSchema;
    /** @deprecated use `CheckoutProduct$outboundSchema` instead. */
    CheckoutProduct$.outboundSchema = CheckoutProduct$outboundSchema;
})(CheckoutProduct$ || (CheckoutProduct$ = {}));
export function checkoutProductToJSON(checkoutProduct) {
    return JSON.stringify(CheckoutProduct$outboundSchema.parse(checkoutProduct));
}
export function checkoutProductFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProduct$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProduct' from JSON`);
}
//# sourceMappingURL=checkoutproduct.js.map