/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { metersCreate } from "../funcs/metersCreate.js";
import { metersEvents } from "../funcs/metersEvents.js";
import { metersGet } from "../funcs/metersGet.js";
import { metersList } from "../funcs/metersList.js";
import { metersQuantities } from "../funcs/metersQuantities.js";
import { metersUpdate } from "../funcs/metersUpdate.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class Meters extends ClientSDK {
    /**
     * List Meters
     *
     * @remarks
     * List meters.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async list(request, options) {
        return unwrapResultIterator(metersList(this, request, options));
    }
    /**
     * Create Meter
     *
     * @remarks
     * Create a meter.
     *
     * **Scopes**: `meters:write`
     */
    async create(request, options) {
        return unwrapAsync(metersCreate(this, request, options));
    }
    /**
     * Get Meter
     *
     * @remarks
     * Get a meter by ID.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async get(request, options) {
        return unwrapAsync(metersGet(this, request, options));
    }
    /**
     * Update Meter
     *
     * @remarks
     * Update a meter.
     *
     * **Scopes**: `meters:write`
     */
    async update(request, options) {
        return unwrapAsync(metersUpdate(this, request, options));
    }
    /**
     * Get Meter Events
     *
     * @remarks
     * Get events matching the filter of a meter.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async events(request, options) {
        return unwrapResultIterator(metersEvents(this, request, options));
    }
    /**
     * Get Meter Quantities
     *
     * @remarks
     * Get quantities of a meter over a time period.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async quantities(request, options) {
        return unwrapAsync(metersQuantities(this, request, options));
    }
}
//# sourceMappingURL=meters.js.map