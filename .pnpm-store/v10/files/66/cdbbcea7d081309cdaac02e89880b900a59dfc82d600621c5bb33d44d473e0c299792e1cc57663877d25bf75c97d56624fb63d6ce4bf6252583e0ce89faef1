/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { AuthorizeResponseOrganization$inboundSchema, AuthorizeResponseOrganization$outboundSchema, } from "../components/authorizeresponseorganization.js";
import { AuthorizeResponseUser$inboundSchema, AuthorizeResponseUser$outboundSchema, } from "../components/authorizeresponseuser.js";
/** @internal */
export const Oauth2AuthorizeResponseOauth2Authorize$inboundSchema = z.union([
    AuthorizeResponseUser$inboundSchema.and(z.object({ sub_type: z.literal("user") }).transform((v) => ({
        subType: v.sub_type,
    }))),
    AuthorizeResponseOrganization$inboundSchema.and(z.object({ sub_type: z.literal("organization") }).transform((v) => ({
        subType: v.sub_type,
    }))),
]);
/** @internal */
export const Oauth2AuthorizeResponseOauth2Authorize$outboundSchema = z.union([
    AuthorizeResponseUser$outboundSchema.and(z.object({ subType: z.literal("user") }).transform((v) => ({
        sub_type: v.subType,
    }))),
    AuthorizeResponseOrganization$outboundSchema.and(z.object({ subType: z.literal("organization") }).transform((v) => ({
        sub_type: v.subType,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Oauth2AuthorizeResponseOauth2Authorize$;
(function (Oauth2AuthorizeResponseOauth2Authorize$) {
    /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$inboundSchema` instead. */
    Oauth2AuthorizeResponseOauth2Authorize$.inboundSchema = Oauth2AuthorizeResponseOauth2Authorize$inboundSchema;
    /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$outboundSchema` instead. */
    Oauth2AuthorizeResponseOauth2Authorize$.outboundSchema = Oauth2AuthorizeResponseOauth2Authorize$outboundSchema;
})(Oauth2AuthorizeResponseOauth2Authorize$ || (Oauth2AuthorizeResponseOauth2Authorize$ = {}));
export function oauth2AuthorizeResponseOauth2AuthorizeToJSON(oauth2AuthorizeResponseOauth2Authorize) {
    return JSON.stringify(Oauth2AuthorizeResponseOauth2Authorize$outboundSchema.parse(oauth2AuthorizeResponseOauth2Authorize));
}
export function oauth2AuthorizeResponseOauth2AuthorizeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Oauth2AuthorizeResponseOauth2Authorize$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Oauth2AuthorizeResponseOauth2Authorize' from JSON`);
}
//# sourceMappingURL=oauth2authorize.js.map