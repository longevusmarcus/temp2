import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type RefreshTokenRequest = {
    grantType?: "refresh_token" | undefined;
    clientId: string;
    clientSecret: string;
    refreshToken: string;
};
/** @internal */
export declare const RefreshTokenRequest$inboundSchema: z.ZodType<RefreshTokenRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type RefreshTokenRequest$Outbound = {
    grant_type: "refresh_token";
    client_id: string;
    client_secret: string;
    refresh_token: string;
};
/** @internal */
export declare const RefreshTokenRequest$outboundSchema: z.ZodType<RefreshTokenRequest$Outbound, z.ZodTypeDef, RefreshTokenRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RefreshTokenRequest$ {
    /** @deprecated use `RefreshTokenRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RefreshTokenRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `RefreshTokenRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RefreshTokenRequest$Outbound, z.ZodTypeDef, RefreshTokenRequest>;
    /** @deprecated use `RefreshTokenRequest$Outbound` instead. */
    type Outbound = RefreshTokenRequest$Outbound;
}
export declare function refreshTokenRequestToJSON(refreshTokenRequest: RefreshTokenRequest): string;
export declare function refreshTokenRequestFromJSON(jsonString: string): SafeParseResult<RefreshTokenRequest, SDKValidationError>;
//# sourceMappingURL=refreshtokenrequest.d.ts.map