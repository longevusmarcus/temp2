/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { LicenseKeyStatus$inboundSchema, LicenseKeyStatus$outboundSchema, } from "./licensekeystatus.js";
/** @internal */
export const LicenseKeyUpdate$inboundSchema = z.object({
    status: z.nullable(LicenseKeyStatus$inboundSchema).optional(),
    usage: z.number().int().default(0),
    limit_activations: z.nullable(z.number().int()).optional(),
    limit_usage: z.nullable(z.number().int()).optional(),
    expires_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
}).transform((v) => {
    return remap$(v, {
        "limit_activations": "limitActivations",
        "limit_usage": "limitUsage",
        "expires_at": "expiresAt",
    });
});
/** @internal */
export const LicenseKeyUpdate$outboundSchema = z.object({
    status: z.nullable(LicenseKeyStatus$outboundSchema).optional(),
    usage: z.number().int().default(0),
    limitActivations: z.nullable(z.number().int()).optional(),
    limitUsage: z.nullable(z.number().int()).optional(),
    expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
    return remap$(v, {
        limitActivations: "limit_activations",
        limitUsage: "limit_usage",
        expiresAt: "expires_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyUpdate$;
(function (LicenseKeyUpdate$) {
    /** @deprecated use `LicenseKeyUpdate$inboundSchema` instead. */
    LicenseKeyUpdate$.inboundSchema = LicenseKeyUpdate$inboundSchema;
    /** @deprecated use `LicenseKeyUpdate$outboundSchema` instead. */
    LicenseKeyUpdate$.outboundSchema = LicenseKeyUpdate$outboundSchema;
})(LicenseKeyUpdate$ || (LicenseKeyUpdate$ = {}));
export function licenseKeyUpdateToJSON(licenseKeyUpdate) {
    return JSON.stringify(LicenseKeyUpdate$outboundSchema.parse(licenseKeyUpdate));
}
export function licenseKeyUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyUpdate' from JSON`);
}
//# sourceMappingURL=licensekeyupdate.js.map