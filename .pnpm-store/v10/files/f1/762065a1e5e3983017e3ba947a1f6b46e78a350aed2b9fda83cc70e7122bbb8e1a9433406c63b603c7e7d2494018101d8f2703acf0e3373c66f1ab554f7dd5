/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { SubscriptionCancel$inboundSchema, SubscriptionCancel$outboundSchema, } from "./subscriptioncancel.js";
import { SubscriptionUpdateProduct$inboundSchema, SubscriptionUpdateProduct$outboundSchema, } from "./subscriptionupdateproduct.js";
/** @internal */
export const SubscriptionUpdate$inboundSchema = z.union([
    SubscriptionUpdateProduct$inboundSchema,
    SubscriptionCancel$inboundSchema,
]);
/** @internal */
export const SubscriptionUpdate$outboundSchema = z.union([
    SubscriptionUpdateProduct$outboundSchema,
    SubscriptionCancel$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionUpdate$;
(function (SubscriptionUpdate$) {
    /** @deprecated use `SubscriptionUpdate$inboundSchema` instead. */
    SubscriptionUpdate$.inboundSchema = SubscriptionUpdate$inboundSchema;
    /** @deprecated use `SubscriptionUpdate$outboundSchema` instead. */
    SubscriptionUpdate$.outboundSchema = SubscriptionUpdate$outboundSchema;
})(SubscriptionUpdate$ || (SubscriptionUpdate$ = {}));
export function subscriptionUpdateToJSON(subscriptionUpdate) {
    return JSON.stringify(SubscriptionUpdate$outboundSchema.parse(subscriptionUpdate));
}
export function subscriptionUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionUpdate' from JSON`);
}
//# sourceMappingURL=subscriptionupdate.js.map