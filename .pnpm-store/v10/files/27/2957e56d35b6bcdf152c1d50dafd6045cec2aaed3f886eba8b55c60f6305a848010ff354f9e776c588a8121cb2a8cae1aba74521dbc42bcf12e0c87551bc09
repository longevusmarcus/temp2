/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldTextProperties$inboundSchema, CustomFieldTextProperties$outboundSchema, } from "./customfieldtextproperties.js";
/** @internal */
export const CustomFieldTextMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomFieldTextMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldTextMetadata$;
(function (CustomFieldTextMetadata$) {
    /** @deprecated use `CustomFieldTextMetadata$inboundSchema` instead. */
    CustomFieldTextMetadata$.inboundSchema = CustomFieldTextMetadata$inboundSchema;
    /** @deprecated use `CustomFieldTextMetadata$outboundSchema` instead. */
    CustomFieldTextMetadata$.outboundSchema = CustomFieldTextMetadata$outboundSchema;
})(CustomFieldTextMetadata$ || (CustomFieldTextMetadata$ = {}));
export function customFieldTextMetadataToJSON(customFieldTextMetadata) {
    return JSON.stringify(CustomFieldTextMetadata$outboundSchema.parse(customFieldTextMetadata));
}
export function customFieldTextMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldTextMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldTextMetadata' from JSON`);
}
/** @internal */
export const CustomFieldText$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("text").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.string(),
    properties: CustomFieldTextProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CustomFieldText$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("text").default("text"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.string(),
    properties: CustomFieldTextProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldText$;
(function (CustomFieldText$) {
    /** @deprecated use `CustomFieldText$inboundSchema` instead. */
    CustomFieldText$.inboundSchema = CustomFieldText$inboundSchema;
    /** @deprecated use `CustomFieldText$outboundSchema` instead. */
    CustomFieldText$.outboundSchema = CustomFieldText$outboundSchema;
})(CustomFieldText$ || (CustomFieldText$ = {}));
export function customFieldTextToJSON(customFieldText) {
    return JSON.stringify(CustomFieldText$outboundSchema.parse(customFieldText));
}
export function customFieldTextFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldText$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldText' from JSON`);
}
//# sourceMappingURL=customfieldtext.js.map