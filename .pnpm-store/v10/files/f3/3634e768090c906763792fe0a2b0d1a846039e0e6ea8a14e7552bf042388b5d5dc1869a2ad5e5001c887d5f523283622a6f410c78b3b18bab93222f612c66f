/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
export const SwitchingFrom = {
    Paddle: "paddle",
    LemonSqueezy: "lemon_squeezy",
    Gumroad: "gumroad",
    Stripe: "stripe",
    Other: "other",
};
/** @internal */
export const SwitchingFrom$inboundSchema = z.nativeEnum(SwitchingFrom);
/** @internal */
export const SwitchingFrom$outboundSchema = SwitchingFrom$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SwitchingFrom$;
(function (SwitchingFrom$) {
    /** @deprecated use `SwitchingFrom$inboundSchema` instead. */
    SwitchingFrom$.inboundSchema = SwitchingFrom$inboundSchema;
    /** @deprecated use `SwitchingFrom$outboundSchema` instead. */
    SwitchingFrom$.outboundSchema = SwitchingFrom$outboundSchema;
})(SwitchingFrom$ || (SwitchingFrom$ = {}));
/** @internal */
export const OrganizationDetails$inboundSchema = z.object({
    about: z.string(),
    product_description: z.string(),
    intended_use: z.string(),
    customer_acquisition: z.array(z.string()),
    future_annual_revenue: z.number().int(),
    switching: z.boolean().default(true),
    switching_from: z.nullable(SwitchingFrom$inboundSchema).optional(),
    previous_annual_revenue: z.number().int().default(0),
}).transform((v) => {
    return remap$(v, {
        "product_description": "productDescription",
        "intended_use": "intendedUse",
        "customer_acquisition": "customerAcquisition",
        "future_annual_revenue": "futureAnnualRevenue",
        "switching_from": "switchingFrom",
        "previous_annual_revenue": "previousAnnualRevenue",
    });
});
/** @internal */
export const OrganizationDetails$outboundSchema = z.object({
    about: z.string(),
    productDescription: z.string(),
    intendedUse: z.string(),
    customerAcquisition: z.array(z.string()),
    futureAnnualRevenue: z.number().int(),
    switching: z.boolean().default(true),
    switchingFrom: z.nullable(SwitchingFrom$outboundSchema).optional(),
    previousAnnualRevenue: z.number().int().default(0),
}).transform((v) => {
    return remap$(v, {
        productDescription: "product_description",
        intendedUse: "intended_use",
        customerAcquisition: "customer_acquisition",
        futureAnnualRevenue: "future_annual_revenue",
        switchingFrom: "switching_from",
        previousAnnualRevenue: "previous_annual_revenue",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrganizationDetails$;
(function (OrganizationDetails$) {
    /** @deprecated use `OrganizationDetails$inboundSchema` instead. */
    OrganizationDetails$.inboundSchema = OrganizationDetails$inboundSchema;
    /** @deprecated use `OrganizationDetails$outboundSchema` instead. */
    OrganizationDetails$.outboundSchema = OrganizationDetails$outboundSchema;
})(OrganizationDetails$ || (OrganizationDetails$ = {}));
export function organizationDetailsToJSON(organizationDetails) {
    return JSON.stringify(OrganizationDetails$outboundSchema.parse(organizationDetails));
}
export function organizationDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrganizationDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrganizationDetails' from JSON`);
}
//# sourceMappingURL=organizationdetails.js.map