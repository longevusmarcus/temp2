/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitType$inboundSchema, BenefitType$outboundSchema, } from "../components/benefittype.js";
import { ListResourceBenefit$inboundSchema, ListResourceBenefit$outboundSchema, } from "../components/listresourcebenefit.js";
/** @internal */
export const BenefitsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const BenefitsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitsListQueryParamOrganizationIDFilter$;
(function (BenefitsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `BenefitsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    BenefitsListQueryParamOrganizationIDFilter$.inboundSchema = BenefitsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `BenefitsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    BenefitsListQueryParamOrganizationIDFilter$.outboundSchema = BenefitsListQueryParamOrganizationIDFilter$outboundSchema;
})(BenefitsListQueryParamOrganizationIDFilter$ || (BenefitsListQueryParamOrganizationIDFilter$ = {}));
export function benefitsListQueryParamOrganizationIDFilterToJSON(benefitsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(BenefitsListQueryParamOrganizationIDFilter$outboundSchema.parse(benefitsListQueryParamOrganizationIDFilter));
}
export function benefitsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const BenefitTypeFilter$inboundSchema = z.union([BenefitType$inboundSchema, z.array(BenefitType$inboundSchema)]);
/** @internal */
export const BenefitTypeFilter$outboundSchema = z.union([BenefitType$outboundSchema, z.array(BenefitType$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitTypeFilter$;
(function (BenefitTypeFilter$) {
    /** @deprecated use `BenefitTypeFilter$inboundSchema` instead. */
    BenefitTypeFilter$.inboundSchema = BenefitTypeFilter$inboundSchema;
    /** @deprecated use `BenefitTypeFilter$outboundSchema` instead. */
    BenefitTypeFilter$.outboundSchema = BenefitTypeFilter$outboundSchema;
})(BenefitTypeFilter$ || (BenefitTypeFilter$ = {}));
export function benefitTypeFilterToJSON(benefitTypeFilter) {
    return JSON.stringify(BenefitTypeFilter$outboundSchema.parse(benefitTypeFilter));
}
export function benefitTypeFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitTypeFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitTypeFilter' from JSON`);
}
/** @internal */
export const BenefitsListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    type_filter: z.nullable(z.union([BenefitType$inboundSchema, z.array(BenefitType$inboundSchema)])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "type_filter": "typeFilter",
    });
});
/** @internal */
export const BenefitsListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    typeFilter: z.nullable(z.union([BenefitType$outboundSchema, z.array(BenefitType$outboundSchema)])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        typeFilter: "type_filter",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitsListRequest$;
(function (BenefitsListRequest$) {
    /** @deprecated use `BenefitsListRequest$inboundSchema` instead. */
    BenefitsListRequest$.inboundSchema = BenefitsListRequest$inboundSchema;
    /** @deprecated use `BenefitsListRequest$outboundSchema` instead. */
    BenefitsListRequest$.outboundSchema = BenefitsListRequest$outboundSchema;
})(BenefitsListRequest$ || (BenefitsListRequest$ = {}));
export function benefitsListRequestToJSON(benefitsListRequest) {
    return JSON.stringify(BenefitsListRequest$outboundSchema.parse(benefitsListRequest));
}
export function benefitsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitsListRequest' from JSON`);
}
/** @internal */
export const BenefitsListResponse$inboundSchema = z.object({
    Result: ListResourceBenefit$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const BenefitsListResponse$outboundSchema = z.object({
    result: ListResourceBenefit$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitsListResponse$;
(function (BenefitsListResponse$) {
    /** @deprecated use `BenefitsListResponse$inboundSchema` instead. */
    BenefitsListResponse$.inboundSchema = BenefitsListResponse$inboundSchema;
    /** @deprecated use `BenefitsListResponse$outboundSchema` instead. */
    BenefitsListResponse$.outboundSchema = BenefitsListResponse$outboundSchema;
})(BenefitsListResponse$ || (BenefitsListResponse$ = {}));
export function benefitsListResponseToJSON(benefitsListResponse) {
    return JSON.stringify(BenefitsListResponse$outboundSchema.parse(benefitsListResponse));
}
export function benefitsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitsListResponse' from JSON`);
}
//# sourceMappingURL=benefitslist.js.map