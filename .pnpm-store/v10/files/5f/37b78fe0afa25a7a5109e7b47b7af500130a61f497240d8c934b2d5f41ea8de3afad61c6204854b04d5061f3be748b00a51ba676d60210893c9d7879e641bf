/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { CustomerPortalOAuthAccount$inboundSchema, CustomerPortalOAuthAccount$outboundSchema, } from "./customerportaloauthaccount.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const CustomerPortalCustomerTaxId$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const CustomerPortalCustomerTaxId$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalCustomerTaxId$;
(function (CustomerPortalCustomerTaxId$) {
    /** @deprecated use `CustomerPortalCustomerTaxId$inboundSchema` instead. */
    CustomerPortalCustomerTaxId$.inboundSchema = CustomerPortalCustomerTaxId$inboundSchema;
    /** @deprecated use `CustomerPortalCustomerTaxId$outboundSchema` instead. */
    CustomerPortalCustomerTaxId$.outboundSchema = CustomerPortalCustomerTaxId$outboundSchema;
})(CustomerPortalCustomerTaxId$ || (CustomerPortalCustomerTaxId$ = {}));
export function customerPortalCustomerTaxIdToJSON(customerPortalCustomerTaxId) {
    return JSON.stringify(CustomerPortalCustomerTaxId$outboundSchema.parse(customerPortalCustomerTaxId));
}
export function customerPortalCustomerTaxIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalCustomerTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomerTaxId' from JSON`);
}
/** @internal */
export const CustomerPortalCustomer$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    email: z.string(),
    email_verified: z.boolean(),
    name: z.nullable(z.string()),
    billing_address: z.nullable(Address$inboundSchema),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))),
    oauth_accounts: z.record(CustomerPortalOAuthAccount$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "email_verified": "emailVerified",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "oauth_accounts": "oauthAccounts",
    });
});
/** @internal */
export const CustomerPortalCustomer$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    email: z.string(),
    emailVerified: z.boolean(),
    name: z.nullable(z.string()),
    billingAddress: z.nullable(Address$outboundSchema),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))),
    oauthAccounts: z.record(CustomerPortalOAuthAccount$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        emailVerified: "email_verified",
        billingAddress: "billing_address",
        taxId: "tax_id",
        oauthAccounts: "oauth_accounts",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalCustomer$;
(function (CustomerPortalCustomer$) {
    /** @deprecated use `CustomerPortalCustomer$inboundSchema` instead. */
    CustomerPortalCustomer$.inboundSchema = CustomerPortalCustomer$inboundSchema;
    /** @deprecated use `CustomerPortalCustomer$outboundSchema` instead. */
    CustomerPortalCustomer$.outboundSchema = CustomerPortalCustomer$outboundSchema;
})(CustomerPortalCustomer$ || (CustomerPortalCustomer$ = {}));
export function customerPortalCustomerToJSON(customerPortalCustomer) {
    return JSON.stringify(CustomerPortalCustomer$outboundSchema.parse(customerPortalCustomer));
}
export function customerPortalCustomerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalCustomer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomer' from JSON`);
}
//# sourceMappingURL=customerportalcustomer.js.map