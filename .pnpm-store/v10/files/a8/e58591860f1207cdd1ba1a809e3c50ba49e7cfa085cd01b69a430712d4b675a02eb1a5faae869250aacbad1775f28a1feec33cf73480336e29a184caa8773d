/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceSubscription$inboundSchema, ListResourceSubscription$outboundSchema, } from "../components/listresourcesubscription.js";
import { SubscriptionSortProperty$inboundSchema, SubscriptionSortProperty$outboundSchema, } from "../components/subscriptionsortproperty.js";
/** @internal */
export const SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionsListQueryParamOrganizationIDFilter$;
(function (SubscriptionsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    SubscriptionsListQueryParamOrganizationIDFilter$.inboundSchema = SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    SubscriptionsListQueryParamOrganizationIDFilter$.outboundSchema = SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema;
})(SubscriptionsListQueryParamOrganizationIDFilter$ || (SubscriptionsListQueryParamOrganizationIDFilter$ = {}));
export function subscriptionsListQueryParamOrganizationIDFilterToJSON(subscriptionsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema.parse(subscriptionsListQueryParamOrganizationIDFilter));
}
export function subscriptionsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const ProductIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const ProductIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductIDFilter$;
(function (ProductIDFilter$) {
    /** @deprecated use `ProductIDFilter$inboundSchema` instead. */
    ProductIDFilter$.inboundSchema = ProductIDFilter$inboundSchema;
    /** @deprecated use `ProductIDFilter$outboundSchema` instead. */
    ProductIDFilter$.outboundSchema = ProductIDFilter$outboundSchema;
})(ProductIDFilter$ || (ProductIDFilter$ = {}));
export function productIDFilterToJSON(productIDFilter) {
    return JSON.stringify(ProductIDFilter$outboundSchema.parse(productIDFilter));
}
export function productIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductIDFilter' from JSON`);
}
/** @internal */
export const CustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerIDFilter$;
(function (CustomerIDFilter$) {
    /** @deprecated use `CustomerIDFilter$inboundSchema` instead. */
    CustomerIDFilter$.inboundSchema = CustomerIDFilter$inboundSchema;
    /** @deprecated use `CustomerIDFilter$outboundSchema` instead. */
    CustomerIDFilter$.outboundSchema = CustomerIDFilter$outboundSchema;
})(CustomerIDFilter$ || (CustomerIDFilter$ = {}));
export function customerIDFilterToJSON(customerIDFilter) {
    return JSON.stringify(CustomerIDFilter$outboundSchema.parse(customerIDFilter));
}
export function customerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerIDFilter' from JSON`);
}
/** @internal */
export const DiscountIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const DiscountIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountIDFilter$;
(function (DiscountIDFilter$) {
    /** @deprecated use `DiscountIDFilter$inboundSchema` instead. */
    DiscountIDFilter$.inboundSchema = DiscountIDFilter$inboundSchema;
    /** @deprecated use `DiscountIDFilter$outboundSchema` instead. */
    DiscountIDFilter$.outboundSchema = DiscountIDFilter$outboundSchema;
})(DiscountIDFilter$ || (DiscountIDFilter$ = {}));
export function discountIDFilterToJSON(discountIDFilter) {
    return JSON.stringify(DiscountIDFilter$outboundSchema.parse(discountIDFilter));
}
export function discountIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountIDFilter' from JSON`);
}
/** @internal */
export const SubscriptionsListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    discount_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    active: z.nullable(z.boolean()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(SubscriptionSortProperty$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "product_id": "productId",
        "customer_id": "customerId",
        "discount_id": "discountId",
    });
});
/** @internal */
export const SubscriptionsListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    discountId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    active: z.nullable(z.boolean()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(SubscriptionSortProperty$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        productId: "product_id",
        customerId: "customer_id",
        discountId: "discount_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionsListRequest$;
(function (SubscriptionsListRequest$) {
    /** @deprecated use `SubscriptionsListRequest$inboundSchema` instead. */
    SubscriptionsListRequest$.inboundSchema = SubscriptionsListRequest$inboundSchema;
    /** @deprecated use `SubscriptionsListRequest$outboundSchema` instead. */
    SubscriptionsListRequest$.outboundSchema = SubscriptionsListRequest$outboundSchema;
})(SubscriptionsListRequest$ || (SubscriptionsListRequest$ = {}));
export function subscriptionsListRequestToJSON(subscriptionsListRequest) {
    return JSON.stringify(SubscriptionsListRequest$outboundSchema.parse(subscriptionsListRequest));
}
export function subscriptionsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionsListRequest' from JSON`);
}
/** @internal */
export const SubscriptionsListResponse$inboundSchema = z.object({
    Result: ListResourceSubscription$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const SubscriptionsListResponse$outboundSchema = z.object({
    result: ListResourceSubscription$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionsListResponse$;
(function (SubscriptionsListResponse$) {
    /** @deprecated use `SubscriptionsListResponse$inboundSchema` instead. */
    SubscriptionsListResponse$.inboundSchema = SubscriptionsListResponse$inboundSchema;
    /** @deprecated use `SubscriptionsListResponse$outboundSchema` instead. */
    SubscriptionsListResponse$.outboundSchema = SubscriptionsListResponse$outboundSchema;
})(SubscriptionsListResponse$ || (SubscriptionsListResponse$ = {}));
export function subscriptionsListResponseToJSON(subscriptionsListResponse) {
    return JSON.stringify(SubscriptionsListResponse$outboundSchema.parse(subscriptionsListResponse));
}
export function subscriptionsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionsListResponse' from JSON`);
}
//# sourceMappingURL=subscriptionslist.js.map