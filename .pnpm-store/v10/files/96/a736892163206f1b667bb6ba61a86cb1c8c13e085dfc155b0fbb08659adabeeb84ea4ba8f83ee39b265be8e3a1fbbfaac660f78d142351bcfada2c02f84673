/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const LicenseKeyActivateConditions$inboundSchema = z.object({});
/** @internal */
export const LicenseKeyActivateConditions$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyActivateConditions$;
(function (LicenseKeyActivateConditions$) {
    /** @deprecated use `LicenseKeyActivateConditions$inboundSchema` instead. */
    LicenseKeyActivateConditions$.inboundSchema = LicenseKeyActivateConditions$inboundSchema;
    /** @deprecated use `LicenseKeyActivateConditions$outboundSchema` instead. */
    LicenseKeyActivateConditions$.outboundSchema = LicenseKeyActivateConditions$outboundSchema;
})(LicenseKeyActivateConditions$ || (LicenseKeyActivateConditions$ = {}));
export function licenseKeyActivateConditionsToJSON(licenseKeyActivateConditions) {
    return JSON.stringify(LicenseKeyActivateConditions$outboundSchema.parse(licenseKeyActivateConditions));
}
export function licenseKeyActivateConditionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyActivateConditions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyActivateConditions' from JSON`);
}
/** @internal */
export const LicenseKeyActivateMeta$inboundSchema = z.object({});
/** @internal */
export const LicenseKeyActivateMeta$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyActivateMeta$;
(function (LicenseKeyActivateMeta$) {
    /** @deprecated use `LicenseKeyActivateMeta$inboundSchema` instead. */
    LicenseKeyActivateMeta$.inboundSchema = LicenseKeyActivateMeta$inboundSchema;
    /** @deprecated use `LicenseKeyActivateMeta$outboundSchema` instead. */
    LicenseKeyActivateMeta$.outboundSchema = LicenseKeyActivateMeta$outboundSchema;
})(LicenseKeyActivateMeta$ || (LicenseKeyActivateMeta$ = {}));
export function licenseKeyActivateMetaToJSON(licenseKeyActivateMeta) {
    return JSON.stringify(LicenseKeyActivateMeta$outboundSchema.parse(licenseKeyActivateMeta));
}
export function licenseKeyActivateMetaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyActivateMeta$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyActivateMeta' from JSON`);
}
/** @internal */
export const LicenseKeyActivate$inboundSchema = z.object({
    key: z.string(),
    organization_id: z.string(),
    label: z.string(),
    conditions: z.lazy(() => LicenseKeyActivateConditions$inboundSchema)
        .optional(),
    meta: z.lazy(() => LicenseKeyActivateMeta$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
export const LicenseKeyActivate$outboundSchema = z.object({
    key: z.string(),
    organizationId: z.string(),
    label: z.string(),
    conditions: z.lazy(() => LicenseKeyActivateConditions$outboundSchema)
        .optional(),
    meta: z.lazy(() => LicenseKeyActivateMeta$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyActivate$;
(function (LicenseKeyActivate$) {
    /** @deprecated use `LicenseKeyActivate$inboundSchema` instead. */
    LicenseKeyActivate$.inboundSchema = LicenseKeyActivate$inboundSchema;
    /** @deprecated use `LicenseKeyActivate$outboundSchema` instead. */
    LicenseKeyActivate$.outboundSchema = LicenseKeyActivate$outboundSchema;
})(LicenseKeyActivate$ || (LicenseKeyActivate$ = {}));
export function licenseKeyActivateToJSON(licenseKeyActivate) {
    return JSON.stringify(LicenseKeyActivate$outboundSchema.parse(licenseKeyActivate));
}
export function licenseKeyActivateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyActivate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyActivate' from JSON`);
}
//# sourceMappingURL=licensekeyactivate.js.map