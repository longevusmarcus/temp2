/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const MetadataQuery$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.number().int()),
    z.array(z.boolean()),
]);
/** @internal */
export const MetadataQuery$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.number().int()),
    z.array(z.boolean()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetadataQuery$;
(function (MetadataQuery$) {
    /** @deprecated use `MetadataQuery$inboundSchema` instead. */
    MetadataQuery$.inboundSchema = MetadataQuery$inboundSchema;
    /** @deprecated use `MetadataQuery$outboundSchema` instead. */
    MetadataQuery$.outboundSchema = MetadataQuery$outboundSchema;
})(MetadataQuery$ || (MetadataQuery$ = {}));
export function metadataQueryToJSON(metadataQuery) {
    return JSON.stringify(MetadataQuery$outboundSchema.parse(metadataQuery));
}
export function metadataQueryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetadataQuery$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetadataQuery' from JSON`);
}
//# sourceMappingURL=customerslist.js.map