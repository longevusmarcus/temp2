"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkouts = void 0;
const checkoutsClientConfirm_js_1 = require("../funcs/checkoutsClientConfirm.js");
const checkoutsClientGet_js_1 = require("../funcs/checkoutsClientGet.js");
const checkoutsClientUpdate_js_1 = require("../funcs/checkoutsClientUpdate.js");
const checkoutsCreate_js_1 = require("../funcs/checkoutsCreate.js");
const checkoutsGet_js_1 = require("../funcs/checkoutsGet.js");
const checkoutsList_js_1 = require("../funcs/checkoutsList.js");
const checkoutsUpdate_js_1 = require("../funcs/checkoutsUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class Checkouts extends sdks_js_1.ClientSDK {
    /**
     * List Checkout Sessions
     *
     * @remarks
     * List checkout sessions.
     *
     * **Scopes**: `checkouts:read` `checkouts:write`
     */
    async list(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, checkoutsList_js_1.checkoutsList)(this, request, options));
    }
    /**
     * Create Checkout Session
     *
     * @remarks
     * Create a checkout session.
     *
     * **Scopes**: `checkouts:write`
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, checkoutsCreate_js_1.checkoutsCreate)(this, request, options));
    }
    /**
     * Get Checkout Session
     *
     * @remarks
     * Get a checkout session by ID.
     *
     * **Scopes**: `checkouts:read` `checkouts:write`
     */
    async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, checkoutsGet_js_1.checkoutsGet)(this, request, options));
    }
    /**
     * Update Checkout Session
     *
     * @remarks
     * Update a checkout session.
     *
     * **Scopes**: `checkouts:write`
     */
    async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, checkoutsUpdate_js_1.checkoutsUpdate)(this, request, options));
    }
    /**
     * Get Checkout Session from Client
     *
     * @remarks
     * Get a checkout session by client secret.
     */
    async clientGet(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, checkoutsClientGet_js_1.checkoutsClientGet)(this, request, options));
    }
    /**
     * Update Checkout Session from Client
     *
     * @remarks
     * Update a checkout session by client secret.
     */
    async clientUpdate(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, checkoutsClientUpdate_js_1.checkoutsClientUpdate)(this, request, options));
    }
    /**
     * Confirm Checkout Session from Client
     *
     * @remarks
     * Confirm a checkout session by client secret.
     *
     * Orders and subscriptions will be processed.
     */
    async clientConfirm(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, checkoutsClientConfirm_js_1.checkoutsClientConfirm)(this, request, options));
    }
}
exports.Checkouts = Checkouts;
//# sourceMappingURL=checkouts.js.map