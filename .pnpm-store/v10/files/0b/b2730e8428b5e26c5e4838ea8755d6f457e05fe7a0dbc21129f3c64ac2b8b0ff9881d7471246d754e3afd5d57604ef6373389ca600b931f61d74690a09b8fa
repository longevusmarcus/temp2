/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
/** @internal */
export const LegacyRecurringProductPriceFree$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount_type: z.literal("free").optional(),
    is_archived: z.boolean(),
    product_id: z.string(),
    type: z.literal("recurring").optional(),
    recurring_interval: SubscriptionRecurringInterval$inboundSchema,
    legacy: z.literal(true).optional(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "amount_type": "amountType",
        "is_archived": "isArchived",
        "product_id": "productId",
        "recurring_interval": "recurringInterval",
    });
});
/** @internal */
export const LegacyRecurringProductPriceFree$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amountType: z.literal("free").default("free"),
    isArchived: z.boolean(),
    productId: z.string(),
    type: z.literal("recurring").default("recurring"),
    recurringInterval: SubscriptionRecurringInterval$outboundSchema,
    legacy: z.literal(true).default(true),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        amountType: "amount_type",
        isArchived: "is_archived",
        productId: "product_id",
        recurringInterval: "recurring_interval",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LegacyRecurringProductPriceFree$;
(function (LegacyRecurringProductPriceFree$) {
    /** @deprecated use `LegacyRecurringProductPriceFree$inboundSchema` instead. */
    LegacyRecurringProductPriceFree$.inboundSchema = LegacyRecurringProductPriceFree$inboundSchema;
    /** @deprecated use `LegacyRecurringProductPriceFree$outboundSchema` instead. */
    LegacyRecurringProductPriceFree$.outboundSchema = LegacyRecurringProductPriceFree$outboundSchema;
})(LegacyRecurringProductPriceFree$ || (LegacyRecurringProductPriceFree$ = {}));
export function legacyRecurringProductPriceFreeToJSON(legacyRecurringProductPriceFree) {
    return JSON.stringify(LegacyRecurringProductPriceFree$outboundSchema.parse(legacyRecurringProductPriceFree));
}
export function legacyRecurringProductPriceFreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LegacyRecurringProductPriceFree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegacyRecurringProductPriceFree' from JSON`);
}
//# sourceMappingURL=legacyrecurringproductpricefree.js.map