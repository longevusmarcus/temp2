import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type MetadataQuery = string | number | boolean | Array<string> | Array<number> | Array<boolean>;
/** @internal */
export declare const MetadataQuery$inboundSchema: z.ZodType<MetadataQuery, z.ZodTypeDef, unknown>;
/** @internal */
export type MetadataQuery$Outbound = string | number | boolean | Array<string> | Array<number> | Array<boolean>;
/** @internal */
export declare const MetadataQuery$outboundSchema: z.ZodType<MetadataQuery$Outbound, z.ZodTypeDef, MetadataQuery>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetadataQuery$ {
    /** @deprecated use `MetadataQuery$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetadataQuery, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetadataQuery$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetadataQuery$Outbound, z.ZodTypeDef, MetadataQuery>;
    /** @deprecated use `MetadataQuery$Outbound` instead. */
    type Outbound = MetadataQuery$Outbound;
}
export declare function metadataQueryToJSON(metadataQuery: MetadataQuery): string;
export declare function metadataQueryFromJSON(jsonString: string): SafeParseResult<MetadataQuery, SDKValidationError>;
//# sourceMappingURL=customerslist.d.ts.map