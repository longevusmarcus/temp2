/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
/** @internal */
export const CustomerStateSubscriptionCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CustomerStateSubscriptionCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerStateSubscriptionCustomFieldData$;
(function (CustomerStateSubscriptionCustomFieldData$) {
    /** @deprecated use `CustomerStateSubscriptionCustomFieldData$inboundSchema` instead. */
    CustomerStateSubscriptionCustomFieldData$.inboundSchema = CustomerStateSubscriptionCustomFieldData$inboundSchema;
    /** @deprecated use `CustomerStateSubscriptionCustomFieldData$outboundSchema` instead. */
    CustomerStateSubscriptionCustomFieldData$.outboundSchema = CustomerStateSubscriptionCustomFieldData$outboundSchema;
})(CustomerStateSubscriptionCustomFieldData$ || (CustomerStateSubscriptionCustomFieldData$ = {}));
export function customerStateSubscriptionCustomFieldDataToJSON(customerStateSubscriptionCustomFieldData) {
    return JSON.stringify(CustomerStateSubscriptionCustomFieldData$outboundSchema.parse(customerStateSubscriptionCustomFieldData));
}
export function customerStateSubscriptionCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerStateSubscriptionCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateSubscriptionCustomFieldData' from JSON`);
}
/** @internal */
export const CustomerStateSubscriptionMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomerStateSubscriptionMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerStateSubscriptionMetadata$;
(function (CustomerStateSubscriptionMetadata$) {
    /** @deprecated use `CustomerStateSubscriptionMetadata$inboundSchema` instead. */
    CustomerStateSubscriptionMetadata$.inboundSchema = CustomerStateSubscriptionMetadata$inboundSchema;
    /** @deprecated use `CustomerStateSubscriptionMetadata$outboundSchema` instead. */
    CustomerStateSubscriptionMetadata$.outboundSchema = CustomerStateSubscriptionMetadata$outboundSchema;
})(CustomerStateSubscriptionMetadata$ || (CustomerStateSubscriptionMetadata$ = {}));
export function customerStateSubscriptionMetadataToJSON(customerStateSubscriptionMetadata) {
    return JSON.stringify(CustomerStateSubscriptionMetadata$outboundSchema.parse(customerStateSubscriptionMetadata));
}
export function customerStateSubscriptionMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerStateSubscriptionMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateSubscriptionMetadata' from JSON`);
}
/** @internal */
export const CustomerStateSubscription$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    status: z.literal("active").optional(),
    amount: z.number().int(),
    currency: z.string(),
    recurring_interval: SubscriptionRecurringInterval$inboundSchema,
    current_period_start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    current_period_end: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    cancel_at_period_end: z.boolean(),
    canceled_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    started_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    product_id: z.string(),
    discount_id: z.nullable(z.string()),
    price_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "custom_field_data": "customFieldData",
        "recurring_interval": "recurringInterval",
        "current_period_start": "currentPeriodStart",
        "current_period_end": "currentPeriodEnd",
        "cancel_at_period_end": "cancelAtPeriodEnd",
        "canceled_at": "canceledAt",
        "started_at": "startedAt",
        "ends_at": "endsAt",
        "product_id": "productId",
        "discount_id": "discountId",
        "price_id": "priceId",
    });
});
/** @internal */
export const CustomerStateSubscription$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    status: z.literal("active").default("active"),
    amount: z.number().int(),
    currency: z.string(),
    recurringInterval: SubscriptionRecurringInterval$outboundSchema,
    currentPeriodStart: z.date().transform(v => v.toISOString()),
    currentPeriodEnd: z.nullable(z.date().transform(v => v.toISOString())),
    cancelAtPeriodEnd: z.boolean(),
    canceledAt: z.nullable(z.date().transform(v => v.toISOString())),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())),
    productId: z.string(),
    discountId: z.nullable(z.string()),
    priceId: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        customFieldData: "custom_field_data",
        recurringInterval: "recurring_interval",
        currentPeriodStart: "current_period_start",
        currentPeriodEnd: "current_period_end",
        cancelAtPeriodEnd: "cancel_at_period_end",
        canceledAt: "canceled_at",
        startedAt: "started_at",
        endsAt: "ends_at",
        productId: "product_id",
        discountId: "discount_id",
        priceId: "price_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerStateSubscription$;
(function (CustomerStateSubscription$) {
    /** @deprecated use `CustomerStateSubscription$inboundSchema` instead. */
    CustomerStateSubscription$.inboundSchema = CustomerStateSubscription$inboundSchema;
    /** @deprecated use `CustomerStateSubscription$outboundSchema` instead. */
    CustomerStateSubscription$.outboundSchema = CustomerStateSubscription$outboundSchema;
})(CustomerStateSubscription$ || (CustomerStateSubscription$ = {}));
export function customerStateSubscriptionToJSON(customerStateSubscription) {
    return JSON.stringify(CustomerStateSubscription$outboundSchema.parse(customerStateSubscription));
}
export function customerStateSubscriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerStateSubscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateSubscription' from JSON`);
}
//# sourceMappingURL=customerstatesubscription.js.map