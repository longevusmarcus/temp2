/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { DownloadableFileRead$inboundSchema, DownloadableFileRead$outboundSchema, } from "./downloadablefileread.js";
import { OrganizationAvatarFileRead$inboundSchema, OrganizationAvatarFileRead$outboundSchema, } from "./organizationavatarfileread.js";
import { Pagination$inboundSchema, Pagination$outboundSchema, } from "./pagination.js";
import { ProductMediaFileRead$inboundSchema, ProductMediaFileRead$outboundSchema, } from "./productmediafileread.js";
/** @internal */
export const FileRead$inboundSchema = z.union([
    DownloadableFileRead$inboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileRead$inboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileRead$inboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
]);
/** @internal */
export const FileRead$outboundSchema = z.union([
    DownloadableFileRead$outboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileRead$outboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileRead$outboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FileRead$;
(function (FileRead$) {
    /** @deprecated use `FileRead$inboundSchema` instead. */
    FileRead$.inboundSchema = FileRead$inboundSchema;
    /** @deprecated use `FileRead$outboundSchema` instead. */
    FileRead$.outboundSchema = FileRead$outboundSchema;
})(FileRead$ || (FileRead$ = {}));
export function fileReadToJSON(fileRead) {
    return JSON.stringify(FileRead$outboundSchema.parse(fileRead));
}
export function fileReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FileRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileRead' from JSON`);
}
/** @internal */
export const ListResourceFileRead$inboundSchema = z.object({
    items: z.array(z.union([
        DownloadableFileRead$inboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
            service: v.service,
        }))),
        OrganizationAvatarFileRead$inboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({ service: v.service }))),
        ProductMediaFileRead$inboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
            service: v.service,
        }))),
    ])),
    pagination: Pagination$inboundSchema,
});
/** @internal */
export const ListResourceFileRead$outboundSchema = z.object({
    items: z.array(z.union([
        DownloadableFileRead$outboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
            service: v.service,
        }))),
        OrganizationAvatarFileRead$outboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({ service: v.service }))),
        ProductMediaFileRead$outboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
            service: v.service,
        }))),
    ])),
    pagination: Pagination$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListResourceFileRead$;
(function (ListResourceFileRead$) {
    /** @deprecated use `ListResourceFileRead$inboundSchema` instead. */
    ListResourceFileRead$.inboundSchema = ListResourceFileRead$inboundSchema;
    /** @deprecated use `ListResourceFileRead$outboundSchema` instead. */
    ListResourceFileRead$.outboundSchema = ListResourceFileRead$outboundSchema;
})(ListResourceFileRead$ || (ListResourceFileRead$ = {}));
export function listResourceFileReadToJSON(listResourceFileRead) {
    return JSON.stringify(ListResourceFileRead$outboundSchema.parse(listResourceFileRead));
}
export function listResourceFileReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListResourceFileRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListResourceFileRead' from JSON`);
}
//# sourceMappingURL=listresourcefileread.js.map