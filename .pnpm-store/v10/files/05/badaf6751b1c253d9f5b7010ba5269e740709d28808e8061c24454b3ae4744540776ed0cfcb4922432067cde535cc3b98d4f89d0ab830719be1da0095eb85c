"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeterCreate$ = exports.MeterCreate$outboundSchema = exports.MeterCreate$inboundSchema = exports.MeterCreateAggregation$ = exports.MeterCreateAggregation$outboundSchema = exports.MeterCreateAggregation$inboundSchema = exports.MeterCreateMetadata$ = exports.MeterCreateMetadata$outboundSchema = exports.MeterCreateMetadata$inboundSchema = void 0;
exports.meterCreateMetadataToJSON = meterCreateMetadataToJSON;
exports.meterCreateMetadataFromJSON = meterCreateMetadataFromJSON;
exports.meterCreateAggregationToJSON = meterCreateAggregationToJSON;
exports.meterCreateAggregationFromJSON = meterCreateAggregationFromJSON;
exports.meterCreateToJSON = meterCreateToJSON;
exports.meterCreateFromJSON = meterCreateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const countaggregation_js_1 = require("./countaggregation.js");
const filter_js_1 = require("./filter.js");
const propertyaggregation_js_1 = require("./propertyaggregation.js");
/** @internal */
exports.MeterCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.MeterCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterCreateMetadata$;
(function (MeterCreateMetadata$) {
    /** @deprecated use `MeterCreateMetadata$inboundSchema` instead. */
    MeterCreateMetadata$.inboundSchema = exports.MeterCreateMetadata$inboundSchema;
    /** @deprecated use `MeterCreateMetadata$outboundSchema` instead. */
    MeterCreateMetadata$.outboundSchema = exports.MeterCreateMetadata$outboundSchema;
})(MeterCreateMetadata$ || (exports.MeterCreateMetadata$ = MeterCreateMetadata$ = {}));
function meterCreateMetadataToJSON(meterCreateMetadata) {
    return JSON.stringify(exports.MeterCreateMetadata$outboundSchema.parse(meterCreateMetadata));
}
function meterCreateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterCreateMetadata' from JSON`);
}
/** @internal */
exports.MeterCreateAggregation$inboundSchema = z.union([
    countaggregation_js_1.CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/** @internal */
exports.MeterCreateAggregation$outboundSchema = z.union([
    countaggregation_js_1.CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterCreateAggregation$;
(function (MeterCreateAggregation$) {
    /** @deprecated use `MeterCreateAggregation$inboundSchema` instead. */
    MeterCreateAggregation$.inboundSchema = exports.MeterCreateAggregation$inboundSchema;
    /** @deprecated use `MeterCreateAggregation$outboundSchema` instead. */
    MeterCreateAggregation$.outboundSchema = exports.MeterCreateAggregation$outboundSchema;
})(MeterCreateAggregation$ || (exports.MeterCreateAggregation$ = MeterCreateAggregation$ = {}));
function meterCreateAggregationToJSON(meterCreateAggregation) {
    return JSON.stringify(exports.MeterCreateAggregation$outboundSchema.parse(meterCreateAggregation));
}
function meterCreateAggregationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterCreateAggregation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterCreateAggregation' from JSON`);
}
/** @internal */
exports.MeterCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    filter: filter_js_1.Filter$inboundSchema,
    aggregation: z.union([
        countaggregation_js_1.CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
    ]),
    organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.MeterCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    filter: filter_js_1.Filter$outboundSchema,
    aggregation: z.union([
        countaggregation_js_1.CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
    ]),
    organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterCreate$;
(function (MeterCreate$) {
    /** @deprecated use `MeterCreate$inboundSchema` instead. */
    MeterCreate$.inboundSchema = exports.MeterCreate$inboundSchema;
    /** @deprecated use `MeterCreate$outboundSchema` instead. */
    MeterCreate$.outboundSchema = exports.MeterCreate$outboundSchema;
})(MeterCreate$ || (exports.MeterCreate$ = MeterCreate$ = {}));
function meterCreateToJSON(meterCreate) {
    return JSON.stringify(exports.MeterCreate$outboundSchema.parse(meterCreate));
}
function meterCreateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterCreate' from JSON`);
}
//# sourceMappingURL=metercreate.js.map