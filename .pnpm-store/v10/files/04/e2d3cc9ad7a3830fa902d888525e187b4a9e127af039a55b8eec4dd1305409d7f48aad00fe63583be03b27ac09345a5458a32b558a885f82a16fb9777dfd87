/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
export const BenefitGrantGitHubRepositoryPropertiesPermission = {
    Pull: "pull",
    Triage: "triage",
    Push: "push",
    Maintain: "maintain",
    Admin: "admin",
};
/** @internal */
export const BenefitGrantGitHubRepositoryPropertiesPermission$inboundSchema = z
    .nativeEnum(BenefitGrantGitHubRepositoryPropertiesPermission);
/** @internal */
export const BenefitGrantGitHubRepositoryPropertiesPermission$outboundSchema = BenefitGrantGitHubRepositoryPropertiesPermission$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGrantGitHubRepositoryPropertiesPermission$;
(function (BenefitGrantGitHubRepositoryPropertiesPermission$) {
    /** @deprecated use `BenefitGrantGitHubRepositoryPropertiesPermission$inboundSchema` instead. */
    BenefitGrantGitHubRepositoryPropertiesPermission$.inboundSchema = BenefitGrantGitHubRepositoryPropertiesPermission$inboundSchema;
    /** @deprecated use `BenefitGrantGitHubRepositoryPropertiesPermission$outboundSchema` instead. */
    BenefitGrantGitHubRepositoryPropertiesPermission$.outboundSchema = BenefitGrantGitHubRepositoryPropertiesPermission$outboundSchema;
})(BenefitGrantGitHubRepositoryPropertiesPermission$ || (BenefitGrantGitHubRepositoryPropertiesPermission$ = {}));
/** @internal */
export const BenefitGrantGitHubRepositoryProperties$inboundSchema = z.object({
    account_id: z.string().optional(),
    repository_owner: z.string().optional(),
    repository_name: z.string().optional(),
    permission: BenefitGrantGitHubRepositoryPropertiesPermission$inboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "account_id": "accountId",
        "repository_owner": "repositoryOwner",
        "repository_name": "repositoryName",
    });
});
/** @internal */
export const BenefitGrantGitHubRepositoryProperties$outboundSchema = z.object({
    accountId: z.string().optional(),
    repositoryOwner: z.string().optional(),
    repositoryName: z.string().optional(),
    permission: BenefitGrantGitHubRepositoryPropertiesPermission$outboundSchema
        .optional(),
}).transform((v) => {
    return remap$(v, {
        accountId: "account_id",
        repositoryOwner: "repository_owner",
        repositoryName: "repository_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGrantGitHubRepositoryProperties$;
(function (BenefitGrantGitHubRepositoryProperties$) {
    /** @deprecated use `BenefitGrantGitHubRepositoryProperties$inboundSchema` instead. */
    BenefitGrantGitHubRepositoryProperties$.inboundSchema = BenefitGrantGitHubRepositoryProperties$inboundSchema;
    /** @deprecated use `BenefitGrantGitHubRepositoryProperties$outboundSchema` instead. */
    BenefitGrantGitHubRepositoryProperties$.outboundSchema = BenefitGrantGitHubRepositoryProperties$outboundSchema;
})(BenefitGrantGitHubRepositoryProperties$ || (BenefitGrantGitHubRepositoryProperties$ = {}));
export function benefitGrantGitHubRepositoryPropertiesToJSON(benefitGrantGitHubRepositoryProperties) {
    return JSON.stringify(BenefitGrantGitHubRepositoryProperties$outboundSchema.parse(benefitGrantGitHubRepositoryProperties));
}
export function benefitGrantGitHubRepositoryPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGrantGitHubRepositoryProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGrantGitHubRepositoryProperties' from JSON`);
}
//# sourceMappingURL=benefitgrantgithubrepositoryproperties.js.map