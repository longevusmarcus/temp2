/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { EventCreateCustomer$inboundSchema, EventCreateCustomer$outboundSchema, } from "./eventcreatecustomer.js";
import { EventCreateExternalCustomer$inboundSchema, EventCreateExternalCustomer$outboundSchema, } from "./eventcreateexternalcustomer.js";
/** @internal */
export const Events$inboundSchema = z
    .union([
    EventCreateCustomer$inboundSchema,
    EventCreateExternalCustomer$inboundSchema,
]);
/** @internal */
export const Events$outboundSchema = z.union([
    EventCreateCustomer$outboundSchema,
    EventCreateExternalCustomer$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Events$;
(function (Events$) {
    /** @deprecated use `Events$inboundSchema` instead. */
    Events$.inboundSchema = Events$inboundSchema;
    /** @deprecated use `Events$outboundSchema` instead. */
    Events$.outboundSchema = Events$outboundSchema;
})(Events$ || (Events$ = {}));
export function eventsToJSON(events) {
    return JSON.stringify(Events$outboundSchema.parse(events));
}
export function eventsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Events$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Events' from JSON`);
}
/** @internal */
export const EventsIngest$inboundSchema = z.object({
    events: z.array(z.union([
        EventCreateCustomer$inboundSchema,
        EventCreateExternalCustomer$inboundSchema,
    ])),
});
/** @internal */
export const EventsIngest$outboundSchema = z.object({
    events: z.array(z.union([
        EventCreateCustomer$outboundSchema,
        EventCreateExternalCustomer$outboundSchema,
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsIngest$;
(function (EventsIngest$) {
    /** @deprecated use `EventsIngest$inboundSchema` instead. */
    EventsIngest$.inboundSchema = EventsIngest$inboundSchema;
    /** @deprecated use `EventsIngest$outboundSchema` instead. */
    EventsIngest$.outboundSchema = EventsIngest$outboundSchema;
})(EventsIngest$ || (EventsIngest$ = {}));
export function eventsIngestToJSON(eventsIngest) {
    return JSON.stringify(EventsIngest$outboundSchema.parse(eventsIngest));
}
export function eventsIngestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsIngest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsIngest' from JSON`);
}
//# sourceMappingURL=eventsingest.js.map