"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerState$ = exports.CustomerState$outboundSchema = exports.CustomerState$inboundSchema = exports.CustomerStateTaxId$ = exports.CustomerStateTaxId$outboundSchema = exports.CustomerStateTaxId$inboundSchema = exports.CustomerStateMetadata$ = exports.CustomerStateMetadata$outboundSchema = exports.CustomerStateMetadata$inboundSchema = void 0;
exports.customerStateMetadataToJSON = customerStateMetadataToJSON;
exports.customerStateMetadataFromJSON = customerStateMetadataFromJSON;
exports.customerStateTaxIdToJSON = customerStateTaxIdToJSON;
exports.customerStateTaxIdFromJSON = customerStateTaxIdFromJSON;
exports.customerStateToJSON = customerStateToJSON;
exports.customerStateFromJSON = customerStateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
const customerstatebenefitgrant_js_1 = require("./customerstatebenefitgrant.js");
const customerstatesubscription_js_1 = require("./customerstatesubscription.js");
const taxidformat_js_1 = require("./taxidformat.js");
/** @internal */
exports.CustomerStateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.CustomerStateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerStateMetadata$;
(function (CustomerStateMetadata$) {
    /** @deprecated use `CustomerStateMetadata$inboundSchema` instead. */
    CustomerStateMetadata$.inboundSchema = exports.CustomerStateMetadata$inboundSchema;
    /** @deprecated use `CustomerStateMetadata$outboundSchema` instead. */
    CustomerStateMetadata$.outboundSchema = exports.CustomerStateMetadata$outboundSchema;
})(CustomerStateMetadata$ || (exports.CustomerStateMetadata$ = CustomerStateMetadata$ = {}));
function customerStateMetadataToJSON(customerStateMetadata) {
    return JSON.stringify(exports.CustomerStateMetadata$outboundSchema.parse(customerStateMetadata));
}
function customerStateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerStateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateMetadata' from JSON`);
}
/** @internal */
exports.CustomerStateTaxId$inboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema]);
/** @internal */
exports.CustomerStateTaxId$outboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerStateTaxId$;
(function (CustomerStateTaxId$) {
    /** @deprecated use `CustomerStateTaxId$inboundSchema` instead. */
    CustomerStateTaxId$.inboundSchema = exports.CustomerStateTaxId$inboundSchema;
    /** @deprecated use `CustomerStateTaxId$outboundSchema` instead. */
    CustomerStateTaxId$.outboundSchema = exports.CustomerStateTaxId$outboundSchema;
})(CustomerStateTaxId$ || (exports.CustomerStateTaxId$ = CustomerStateTaxId$ = {}));
function customerStateTaxIdToJSON(customerStateTaxId) {
    return JSON.stringify(exports.CustomerStateTaxId$outboundSchema.parse(customerStateTaxId));
}
function customerStateTaxIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerStateTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateTaxId' from JSON`);
}
/** @internal */
exports.CustomerState$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    external_id: z.nullable(z.string()),
    email: z.string(),
    email_verified: z.boolean(),
    name: z.nullable(z.string()),
    billing_address: z.nullable(address_js_1.Address$inboundSchema),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema])))),
    organization_id: z.string(),
    deleted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    active_subscriptions: z.array(customerstatesubscription_js_1.CustomerStateSubscription$inboundSchema),
    granted_benefits: z.array(customerstatebenefitgrant_js_1.CustomerStateBenefitGrant$inboundSchema),
    avatar_url: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "external_id": "externalId",
        "email_verified": "emailVerified",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
        "deleted_at": "deletedAt",
        "active_subscriptions": "activeSubscriptions",
        "granted_benefits": "grantedBenefits",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
exports.CustomerState$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    externalId: z.nullable(z.string()),
    email: z.string(),
    emailVerified: z.boolean(),
    name: z.nullable(z.string()),
    billingAddress: z.nullable(address_js_1.Address$outboundSchema),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema])))),
    organizationId: z.string(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
    activeSubscriptions: z.array(customerstatesubscription_js_1.CustomerStateSubscription$outboundSchema),
    grantedBenefits: z.array(customerstatebenefitgrant_js_1.CustomerStateBenefitGrant$outboundSchema),
    avatarUrl: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        externalId: "external_id",
        emailVerified: "email_verified",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
        deletedAt: "deleted_at",
        activeSubscriptions: "active_subscriptions",
        grantedBenefits: "granted_benefits",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerState$;
(function (CustomerState$) {
    /** @deprecated use `CustomerState$inboundSchema` instead. */
    CustomerState$.inboundSchema = exports.CustomerState$inboundSchema;
    /** @deprecated use `CustomerState$outboundSchema` instead. */
    CustomerState$.outboundSchema = exports.CustomerState$outboundSchema;
})(CustomerState$ || (exports.CustomerState$ = CustomerState$ = {}));
function customerStateToJSON(customerState) {
    return JSON.stringify(exports.CustomerState$outboundSchema.parse(customerState));
}
function customerStateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerState' from JSON`);
}
//# sourceMappingURL=customerstate.js.map