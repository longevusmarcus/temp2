/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { CustomerBenefitGrantCustomUpdate$inboundSchema, CustomerBenefitGrantCustomUpdate$outboundSchema, } from "./customerbenefitgrantcustomupdate.js";
import { CustomerBenefitGrantDiscordUpdate$inboundSchema, CustomerBenefitGrantDiscordUpdate$outboundSchema, } from "./customerbenefitgrantdiscordupdate.js";
import { CustomerBenefitGrantDownloadablesUpdate$inboundSchema, CustomerBenefitGrantDownloadablesUpdate$outboundSchema, } from "./customerbenefitgrantdownloadablesupdate.js";
import { CustomerBenefitGrantGitHubRepositoryUpdate$inboundSchema, CustomerBenefitGrantGitHubRepositoryUpdate$outboundSchema, } from "./customerbenefitgrantgithubrepositoryupdate.js";
import { CustomerBenefitGrantLicenseKeysUpdate$inboundSchema, CustomerBenefitGrantLicenseKeysUpdate$outboundSchema, } from "./customerbenefitgrantlicensekeysupdate.js";
/** @internal */
export const CustomerBenefitGrantUpdate$inboundSchema = z.union([
    CustomerBenefitGrantCustomUpdate$inboundSchema.and(z.object({ benefit_type: z.literal("custom") }).transform((v) => ({
        benefitType: v.benefit_type,
    }))),
    CustomerBenefitGrantDownloadablesUpdate$inboundSchema.and(z.object({ benefit_type: z.literal("downloadables") }).transform((v) => ({
        benefitType: v.benefit_type,
    }))),
    CustomerBenefitGrantLicenseKeysUpdate$inboundSchema.and(z.object({ benefit_type: z.literal("license_keys") }).transform((v) => ({
        benefitType: v.benefit_type,
    }))),
    CustomerBenefitGrantDiscordUpdate$inboundSchema.and(z.object({ benefit_type: z.literal("discord") }).transform((v) => ({
        benefitType: v.benefit_type,
    }))),
    CustomerBenefitGrantGitHubRepositoryUpdate$inboundSchema.and(z.object({ benefit_type: z.literal("github_repository") }).transform((v) => ({ benefitType: v.benefit_type }))),
]);
/** @internal */
export const CustomerBenefitGrantUpdate$outboundSchema = z.union([
    CustomerBenefitGrantCustomUpdate$outboundSchema.and(z.object({ benefitType: z.literal("custom") }).transform((v) => ({
        benefit_type: v.benefitType,
    }))),
    CustomerBenefitGrantDownloadablesUpdate$outboundSchema.and(z.object({ benefitType: z.literal("downloadables") }).transform((v) => ({
        benefit_type: v.benefitType,
    }))),
    CustomerBenefitGrantLicenseKeysUpdate$outboundSchema.and(z.object({ benefitType: z.literal("license_keys") }).transform((v) => ({
        benefit_type: v.benefitType,
    }))),
    CustomerBenefitGrantDiscordUpdate$outboundSchema.and(z.object({ benefitType: z.literal("discord") }).transform((v) => ({
        benefit_type: v.benefitType,
    }))),
    CustomerBenefitGrantGitHubRepositoryUpdate$outboundSchema.and(z.object({ benefitType: z.literal("github_repository") }).transform((v) => ({ benefit_type: v.benefitType }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerBenefitGrantUpdate$;
(function (CustomerBenefitGrantUpdate$) {
    /** @deprecated use `CustomerBenefitGrantUpdate$inboundSchema` instead. */
    CustomerBenefitGrantUpdate$.inboundSchema = CustomerBenefitGrantUpdate$inboundSchema;
    /** @deprecated use `CustomerBenefitGrantUpdate$outboundSchema` instead. */
    CustomerBenefitGrantUpdate$.outboundSchema = CustomerBenefitGrantUpdate$outboundSchema;
})(CustomerBenefitGrantUpdate$ || (CustomerBenefitGrantUpdate$ = {}));
export function customerBenefitGrantUpdateToJSON(customerBenefitGrantUpdate) {
    return JSON.stringify(CustomerBenefitGrantUpdate$outboundSchema.parse(customerBenefitGrantUpdate));
}
export function customerBenefitGrantUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerBenefitGrantUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerBenefitGrantUpdate' from JSON`);
}
//# sourceMappingURL=customerbenefitgrantupdate.js.map