"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetersQuantitiesRequest$ = exports.MetersQuantitiesRequest$outboundSchema = exports.MetersQuantitiesRequest$inboundSchema = exports.QueryParamExternalCustomerIDFilter$ = exports.QueryParamExternalCustomerIDFilter$outboundSchema = exports.QueryParamExternalCustomerIDFilter$inboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$ = exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema = void 0;
exports.metersQuantitiesQueryParamCustomerIDFilterToJSON = metersQuantitiesQueryParamCustomerIDFilterToJSON;
exports.metersQuantitiesQueryParamCustomerIDFilterFromJSON = metersQuantitiesQueryParamCustomerIDFilterFromJSON;
exports.queryParamExternalCustomerIDFilterToJSON = queryParamExternalCustomerIDFilterToJSON;
exports.queryParamExternalCustomerIDFilterFromJSON = queryParamExternalCustomerIDFilterFromJSON;
exports.metersQuantitiesRequestToJSON = metersQuantitiesRequestToJSON;
exports.metersQuantitiesRequestFromJSON = metersQuantitiesRequestFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const timeinterval_js_1 = require("../components/timeinterval.js");
/** @internal */
exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersQuantitiesQueryParamCustomerIDFilter$;
(function (MetersQuantitiesQueryParamCustomerIDFilter$) {
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema` instead. */
    MetersQuantitiesQueryParamCustomerIDFilter$.inboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema` instead. */
    MetersQuantitiesQueryParamCustomerIDFilter$.outboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema;
})(MetersQuantitiesQueryParamCustomerIDFilter$ || (exports.MetersQuantitiesQueryParamCustomerIDFilter$ = MetersQuantitiesQueryParamCustomerIDFilter$ = {}));
function metersQuantitiesQueryParamCustomerIDFilterToJSON(metersQuantitiesQueryParamCustomerIDFilter) {
    return JSON.stringify(exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema.parse(metersQuantitiesQueryParamCustomerIDFilter));
}
function metersQuantitiesQueryParamCustomerIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersQuantitiesQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
exports.QueryParamExternalCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.QueryParamExternalCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryParamExternalCustomerIDFilter$;
(function (QueryParamExternalCustomerIDFilter$) {
    /** @deprecated use `QueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    QueryParamExternalCustomerIDFilter$.inboundSchema = exports.QueryParamExternalCustomerIDFilter$inboundSchema;
    /** @deprecated use `QueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    QueryParamExternalCustomerIDFilter$.outboundSchema = exports.QueryParamExternalCustomerIDFilter$outboundSchema;
})(QueryParamExternalCustomerIDFilter$ || (exports.QueryParamExternalCustomerIDFilter$ = QueryParamExternalCustomerIDFilter$ = {}));
function queryParamExternalCustomerIDFilterToJSON(queryParamExternalCustomerIDFilter) {
    return JSON.stringify(exports.QueryParamExternalCustomerIDFilter$outboundSchema.parse(queryParamExternalCustomerIDFilter));
}
function queryParamExternalCustomerIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryParamExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamExternalCustomerIDFilter' from JSON`);
}
/** @internal */
exports.MetersQuantitiesRequest$inboundSchema = z.object({
    id: z.string(),
    start_timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    end_timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    interval: timeinterval_js_1.TimeInterval$inboundSchema,
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "start_timestamp": "startTimestamp",
        "end_timestamp": "endTimestamp",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
exports.MetersQuantitiesRequest$outboundSchema = z.object({
    id: z.string(),
    startTimestamp: z.date().transform(v => v.toISOString()),
    endTimestamp: z.date().transform(v => v.toISOString()),
    interval: timeinterval_js_1.TimeInterval$outboundSchema,
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        startTimestamp: "start_timestamp",
        endTimestamp: "end_timestamp",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersQuantitiesRequest$;
(function (MetersQuantitiesRequest$) {
    /** @deprecated use `MetersQuantitiesRequest$inboundSchema` instead. */
    MetersQuantitiesRequest$.inboundSchema = exports.MetersQuantitiesRequest$inboundSchema;
    /** @deprecated use `MetersQuantitiesRequest$outboundSchema` instead. */
    MetersQuantitiesRequest$.outboundSchema = exports.MetersQuantitiesRequest$outboundSchema;
})(MetersQuantitiesRequest$ || (exports.MetersQuantitiesRequest$ = MetersQuantitiesRequest$ = {}));
function metersQuantitiesRequestToJSON(metersQuantitiesRequest) {
    return JSON.stringify(exports.MetersQuantitiesRequest$outboundSchema.parse(metersQuantitiesRequest));
}
function metersQuantitiesRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersQuantitiesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersQuantitiesRequest' from JSON`);
}
//# sourceMappingURL=metersquantities.js.map