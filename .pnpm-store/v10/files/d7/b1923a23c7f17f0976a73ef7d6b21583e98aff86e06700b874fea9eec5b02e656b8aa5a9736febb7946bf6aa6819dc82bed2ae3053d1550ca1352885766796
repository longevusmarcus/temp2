/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const UserInfoOrganization$inboundSchema = z.object({
    sub: z.string(),
    name: z.nullable(z.string()).optional(),
});
/** @internal */
export const UserInfoOrganization$outboundSchema = z.object({
    sub: z.string(),
    name: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserInfoOrganization$;
(function (UserInfoOrganization$) {
    /** @deprecated use `UserInfoOrganization$inboundSchema` instead. */
    UserInfoOrganization$.inboundSchema = UserInfoOrganization$inboundSchema;
    /** @deprecated use `UserInfoOrganization$outboundSchema` instead. */
    UserInfoOrganization$.outboundSchema = UserInfoOrganization$outboundSchema;
})(UserInfoOrganization$ || (UserInfoOrganization$ = {}));
export function userInfoOrganizationToJSON(userInfoOrganization) {
    return JSON.stringify(UserInfoOrganization$outboundSchema.parse(userInfoOrganization));
}
export function userInfoOrganizationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserInfoOrganization$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserInfoOrganization' from JSON`);
}
//# sourceMappingURL=userinfoorganization.js.map