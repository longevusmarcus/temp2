/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const CountAggregation$inboundSchema = z.object({
    func: z.literal("count").default("count"),
});
/** @internal */
export const CountAggregation$outboundSchema = z.object({
    func: z.literal("count").default("count"),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CountAggregation$;
(function (CountAggregation$) {
    /** @deprecated use `CountAggregation$inboundSchema` instead. */
    CountAggregation$.inboundSchema = CountAggregation$inboundSchema;
    /** @deprecated use `CountAggregation$outboundSchema` instead. */
    CountAggregation$.outboundSchema = CountAggregation$outboundSchema;
})(CountAggregation$ || (CountAggregation$ = {}));
export function countAggregationToJSON(countAggregation) {
    return JSON.stringify(CountAggregation$outboundSchema.parse(countAggregation));
}
export function countAggregationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CountAggregation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CountAggregation' from JSON`);
}
//# sourceMappingURL=countaggregation.js.map