"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetersListResponse$ = exports.MetersListResponse$outboundSchema = exports.MetersListResponse$inboundSchema = exports.MetersListRequest$ = exports.MetersListRequest$outboundSchema = exports.MetersListRequest$inboundSchema = exports.MetersListQueryParamOrganizationIDFilter$ = exports.MetersListQueryParamOrganizationIDFilter$outboundSchema = exports.MetersListQueryParamOrganizationIDFilter$inboundSchema = void 0;
exports.metersListQueryParamOrganizationIDFilterToJSON = metersListQueryParamOrganizationIDFilterToJSON;
exports.metersListQueryParamOrganizationIDFilterFromJSON = metersListQueryParamOrganizationIDFilterFromJSON;
exports.metersListRequestToJSON = metersListRequestToJSON;
exports.metersListRequestFromJSON = metersListRequestFromJSON;
exports.metersListResponseToJSON = metersListResponseToJSON;
exports.metersListResponseFromJSON = metersListResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customerslist_js_1 = require("../components/customerslist.js");
const listresourcemeter_js_1 = require("../components/listresourcemeter.js");
const metersortproperty_js_1 = require("../components/metersortproperty.js");
/** @internal */
exports.MetersListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MetersListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersListQueryParamOrganizationIDFilter$;
(function (MetersListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `MetersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    MetersListQueryParamOrganizationIDFilter$.inboundSchema = exports.MetersListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `MetersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    MetersListQueryParamOrganizationIDFilter$.outboundSchema = exports.MetersListQueryParamOrganizationIDFilter$outboundSchema;
})(MetersListQueryParamOrganizationIDFilter$ || (exports.MetersListQueryParamOrganizationIDFilter$ = MetersListQueryParamOrganizationIDFilter$ = {}));
function metersListQueryParamOrganizationIDFilterToJSON(metersListQueryParamOrganizationIDFilter) {
    return JSON.stringify(exports.MetersListQueryParamOrganizationIDFilter$outboundSchema.parse(metersListQueryParamOrganizationIDFilter));
}
function metersListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
exports.MetersListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(metersortproperty_js_1.MeterSortProperty$inboundSchema)).optional(),
    metadata: z.nullable(z.record(customerslist_js_1.MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.MetersListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(metersortproperty_js_1.MeterSortProperty$outboundSchema)).optional(),
    metadata: z.nullable(z.record(customerslist_js_1.MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersListRequest$;
(function (MetersListRequest$) {
    /** @deprecated use `MetersListRequest$inboundSchema` instead. */
    MetersListRequest$.inboundSchema = exports.MetersListRequest$inboundSchema;
    /** @deprecated use `MetersListRequest$outboundSchema` instead. */
    MetersListRequest$.outboundSchema = exports.MetersListRequest$outboundSchema;
})(MetersListRequest$ || (exports.MetersListRequest$ = MetersListRequest$ = {}));
function metersListRequestToJSON(metersListRequest) {
    return JSON.stringify(exports.MetersListRequest$outboundSchema.parse(metersListRequest));
}
function metersListRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersListRequest' from JSON`);
}
/** @internal */
exports.MetersListResponse$inboundSchema = z.object({
    Result: listresourcemeter_js_1.ListResourceMeter$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Result": "result",
    });
});
/** @internal */
exports.MetersListResponse$outboundSchema = z.object({
    result: listresourcemeter_js_1.ListResourceMeter$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersListResponse$;
(function (MetersListResponse$) {
    /** @deprecated use `MetersListResponse$inboundSchema` instead. */
    MetersListResponse$.inboundSchema = exports.MetersListResponse$inboundSchema;
    /** @deprecated use `MetersListResponse$outboundSchema` instead. */
    MetersListResponse$.outboundSchema = exports.MetersListResponse$outboundSchema;
})(MetersListResponse$ || (exports.MetersListResponse$ = MetersListResponse$ = {}));
function metersListResponseToJSON(metersListResponse) {
    return JSON.stringify(exports.MetersListResponse$outboundSchema.parse(metersListResponse));
}
function metersListResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersListResponse' from JSON`);
}
//# sourceMappingURL=meterslist.js.map