/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const MetricPeriod$inboundSchema = z.object({
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    orders: z.number().int(),
    revenue: z.number().int(),
    cumulative_revenue: z.number().int(),
    average_order_value: z.number().int(),
    one_time_products: z.number().int(),
    one_time_products_revenue: z.number().int(),
    new_subscriptions: z.number().int(),
    new_subscriptions_revenue: z.number().int(),
    renewed_subscriptions: z.number().int(),
    renewed_subscriptions_revenue: z.number().int(),
    active_subscriptions: z.number().int(),
    monthly_recurring_revenue: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        "cumulative_revenue": "cumulativeRevenue",
        "average_order_value": "averageOrderValue",
        "one_time_products": "oneTimeProducts",
        "one_time_products_revenue": "oneTimeProductsRevenue",
        "new_subscriptions": "newSubscriptions",
        "new_subscriptions_revenue": "newSubscriptionsRevenue",
        "renewed_subscriptions": "renewedSubscriptions",
        "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
        "active_subscriptions": "activeSubscriptions",
        "monthly_recurring_revenue": "monthlyRecurringRevenue",
    });
});
/** @internal */
export const MetricPeriod$outboundSchema = z.object({
    timestamp: z.date().transform(v => v.toISOString()),
    orders: z.number().int(),
    revenue: z.number().int(),
    cumulativeRevenue: z.number().int(),
    averageOrderValue: z.number().int(),
    oneTimeProducts: z.number().int(),
    oneTimeProductsRevenue: z.number().int(),
    newSubscriptions: z.number().int(),
    newSubscriptionsRevenue: z.number().int(),
    renewedSubscriptions: z.number().int(),
    renewedSubscriptionsRevenue: z.number().int(),
    activeSubscriptions: z.number().int(),
    monthlyRecurringRevenue: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        cumulativeRevenue: "cumulative_revenue",
        averageOrderValue: "average_order_value",
        oneTimeProducts: "one_time_products",
        oneTimeProductsRevenue: "one_time_products_revenue",
        newSubscriptions: "new_subscriptions",
        newSubscriptionsRevenue: "new_subscriptions_revenue",
        renewedSubscriptions: "renewed_subscriptions",
        renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
        activeSubscriptions: "active_subscriptions",
        monthlyRecurringRevenue: "monthly_recurring_revenue",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricPeriod$;
(function (MetricPeriod$) {
    /** @deprecated use `MetricPeriod$inboundSchema` instead. */
    MetricPeriod$.inboundSchema = MetricPeriod$inboundSchema;
    /** @deprecated use `MetricPeriod$outboundSchema` instead. */
    MetricPeriod$.outboundSchema = MetricPeriod$outboundSchema;
})(MetricPeriod$ || (MetricPeriod$ = {}));
export function metricPeriodToJSON(metricPeriod) {
    return JSON.stringify(MetricPeriod$outboundSchema.parse(metricPeriod));
}
export function metricPeriodFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricPeriod$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricPeriod' from JSON`);
}
//# sourceMappingURL=metricperiod.js.map