import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomerCancellationReason } from "./customercancellationreason.js";
import { DiscountFixedOnceForeverDurationBase, DiscountFixedOnceForeverDurationBase$Outbound } from "./discountfixedonceforeverdurationbase.js";
import { DiscountFixedRepeatDurationBase, DiscountFixedRepeatDurationBase$Outbound } from "./discountfixedrepeatdurationbase.js";
import { DiscountPercentageOnceForeverDurationBase, DiscountPercentageOnceForeverDurationBase$Outbound } from "./discountpercentageonceforeverdurationbase.js";
import { DiscountPercentageRepeatDurationBase, DiscountPercentageRepeatDurationBase$Outbound } from "./discountpercentagerepeatdurationbase.js";
import { LegacyRecurringProductPrice, LegacyRecurringProductPrice$Outbound } from "./legacyrecurringproductprice.js";
import { Product, Product$Outbound } from "./product.js";
import { ProductPrice, ProductPrice$Outbound } from "./productprice.js";
import { SubscriptionCustomer, SubscriptionCustomer$Outbound } from "./subscriptioncustomer.js";
import { SubscriptionRecurringInterval } from "./subscriptionrecurringinterval.js";
import { SubscriptionStatus } from "./subscriptionstatus.js";
import { SubscriptionUser, SubscriptionUser$Outbound } from "./subscriptionuser.js";
export type Metadata = string | number | boolean;
export type CustomFieldData = string | number | boolean | Date;
export type SubscriptionDiscount = DiscountPercentageOnceForeverDurationBase | DiscountFixedOnceForeverDurationBase | DiscountPercentageRepeatDurationBase | DiscountFixedRepeatDurationBase;
/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type Price = LegacyRecurringProductPrice | ProductPrice;
export type SubscriptionPrices = LegacyRecurringProductPrice | ProductPrice;
export type Subscription = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The amount of the subscription.
     */
    amount: number;
    /**
     * The currency of the subscription.
     */
    currency: string;
    recurringInterval: SubscriptionRecurringInterval;
    status: SubscriptionStatus;
    /**
     * The start timestamp of the current billing period.
     */
    currentPeriodStart: Date;
    /**
     * The end timestamp of the current billing period.
     */
    currentPeriodEnd: Date | null;
    /**
     * Whether the subscription will be canceled at the end of the current period.
     */
    cancelAtPeriodEnd: boolean;
    /**
     * The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`.
     */
    canceledAt: Date | null;
    /**
     * The timestamp when the subscription started.
     */
    startedAt: Date | null;
    /**
     * The timestamp when the subscription will end.
     */
    endsAt: Date | null;
    /**
     * The timestamp when the subscription ended.
     */
    endedAt: Date | null;
    /**
     * The ID of the subscribed customer.
     */
    customerId: string;
    /**
     * The ID of the subscribed product.
     */
    productId: string;
    /**
     * The ID of the applied discount, if any.
     */
    discountId: string | null;
    checkoutId: string | null;
    customerCancellationReason: CustomerCancellationReason | null;
    customerCancellationComment: string | null;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    priceId: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: {
        [k: string]: string | number | boolean | Date | null;
    } | undefined;
    customer: SubscriptionCustomer;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    userId: string;
    user: SubscriptionUser;
    /**
     * A product.
     */
    product: Product;
    discount: DiscountPercentageOnceForeverDurationBase | DiscountFixedOnceForeverDurationBase | DiscountPercentageRepeatDurationBase | DiscountFixedRepeatDurationBase | null;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    price: LegacyRecurringProductPrice | ProductPrice;
    /**
     * List of enabled prices for the subscription.
     */
    prices: Array<LegacyRecurringProductPrice | ProductPrice>;
};
/** @internal */
export declare const Metadata$inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown>;
/** @internal */
export type Metadata$Outbound = string | number | boolean;
/** @internal */
export declare const Metadata$outboundSchema: z.ZodType<Metadata$Outbound, z.ZodTypeDef, Metadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Metadata$ {
    /** @deprecated use `Metadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `Metadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Metadata$Outbound, z.ZodTypeDef, Metadata>;
    /** @deprecated use `Metadata$Outbound` instead. */
    type Outbound = Metadata$Outbound;
}
export declare function metadataToJSON(metadata: Metadata): string;
export declare function metadataFromJSON(jsonString: string): SafeParseResult<Metadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldData$inboundSchema: z.ZodType<CustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldData$Outbound = string | number | boolean | string;
/** @internal */
export declare const CustomFieldData$outboundSchema: z.ZodType<CustomFieldData$Outbound, z.ZodTypeDef, CustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldData$ {
    /** @deprecated use `CustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldData$Outbound, z.ZodTypeDef, CustomFieldData>;
    /** @deprecated use `CustomFieldData$Outbound` instead. */
    type Outbound = CustomFieldData$Outbound;
}
export declare function customFieldDataToJSON(customFieldData: CustomFieldData): string;
export declare function customFieldDataFromJSON(jsonString: string): SafeParseResult<CustomFieldData, SDKValidationError>;
/** @internal */
export declare const SubscriptionDiscount$inboundSchema: z.ZodType<SubscriptionDiscount, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionDiscount$Outbound = DiscountPercentageOnceForeverDurationBase$Outbound | DiscountFixedOnceForeverDurationBase$Outbound | DiscountPercentageRepeatDurationBase$Outbound | DiscountFixedRepeatDurationBase$Outbound;
/** @internal */
export declare const SubscriptionDiscount$outboundSchema: z.ZodType<SubscriptionDiscount$Outbound, z.ZodTypeDef, SubscriptionDiscount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionDiscount$ {
    /** @deprecated use `SubscriptionDiscount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionDiscount, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionDiscount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionDiscount$Outbound, z.ZodTypeDef, SubscriptionDiscount>;
    /** @deprecated use `SubscriptionDiscount$Outbound` instead. */
    type Outbound = SubscriptionDiscount$Outbound;
}
export declare function subscriptionDiscountToJSON(subscriptionDiscount: SubscriptionDiscount): string;
export declare function subscriptionDiscountFromJSON(jsonString: string): SafeParseResult<SubscriptionDiscount, SDKValidationError>;
/** @internal */
export declare const Price$inboundSchema: z.ZodType<Price, z.ZodTypeDef, unknown>;
/** @internal */
export type Price$Outbound = LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
/** @internal */
export declare const Price$outboundSchema: z.ZodType<Price$Outbound, z.ZodTypeDef, Price>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Price$ {
    /** @deprecated use `Price$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Price, z.ZodTypeDef, unknown>;
    /** @deprecated use `Price$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Price$Outbound, z.ZodTypeDef, Price>;
    /** @deprecated use `Price$Outbound` instead. */
    type Outbound = Price$Outbound;
}
export declare function priceToJSON(price: Price): string;
export declare function priceFromJSON(jsonString: string): SafeParseResult<Price, SDKValidationError>;
/** @internal */
export declare const SubscriptionPrices$inboundSchema: z.ZodType<SubscriptionPrices, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionPrices$Outbound = LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
/** @internal */
export declare const SubscriptionPrices$outboundSchema: z.ZodType<SubscriptionPrices$Outbound, z.ZodTypeDef, SubscriptionPrices>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionPrices$ {
    /** @deprecated use `SubscriptionPrices$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionPrices, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionPrices$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionPrices$Outbound, z.ZodTypeDef, SubscriptionPrices>;
    /** @deprecated use `SubscriptionPrices$Outbound` instead. */
    type Outbound = SubscriptionPrices$Outbound;
}
export declare function subscriptionPricesToJSON(subscriptionPrices: SubscriptionPrices): string;
export declare function subscriptionPricesFromJSON(jsonString: string): SafeParseResult<SubscriptionPrices, SDKValidationError>;
/** @internal */
export declare const Subscription$inboundSchema: z.ZodType<Subscription, z.ZodTypeDef, unknown>;
/** @internal */
export type Subscription$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    amount: number;
    currency: string;
    recurring_interval: string;
    status: string;
    current_period_start: string;
    current_period_end: string | null;
    cancel_at_period_end: boolean;
    canceled_at: string | null;
    started_at: string | null;
    ends_at: string | null;
    ended_at: string | null;
    customer_id: string;
    product_id: string;
    discount_id: string | null;
    checkout_id: string | null;
    customer_cancellation_reason: string | null;
    customer_cancellation_comment: string | null;
    price_id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    custom_field_data?: {
        [k: string]: string | number | boolean | string | null;
    } | undefined;
    customer: SubscriptionCustomer$Outbound;
    user_id: string;
    user: SubscriptionUser$Outbound;
    product: Product$Outbound;
    discount: DiscountPercentageOnceForeverDurationBase$Outbound | DiscountFixedOnceForeverDurationBase$Outbound | DiscountPercentageRepeatDurationBase$Outbound | DiscountFixedRepeatDurationBase$Outbound | null;
    price: LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
    prices: Array<LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound>;
};
/** @internal */
export declare const Subscription$outboundSchema: z.ZodType<Subscription$Outbound, z.ZodTypeDef, Subscription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Subscription$ {
    /** @deprecated use `Subscription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Subscription, z.ZodTypeDef, unknown>;
    /** @deprecated use `Subscription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Subscription$Outbound, z.ZodTypeDef, Subscription>;
    /** @deprecated use `Subscription$Outbound` instead. */
    type Outbound = Subscription$Outbound;
}
export declare function subscriptionToJSON(subscription: Subscription): string;
export declare function subscriptionFromJSON(jsonString: string): SafeParseResult<Subscription, SDKValidationError>;
//# sourceMappingURL=subscription.d.ts.map