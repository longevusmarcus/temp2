"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsGetRequest$ = exports.MetricsGetRequest$outboundSchema = exports.MetricsGetRequest$inboundSchema = exports.MetricsGetQueryParamCustomerIDFilter$ = exports.MetricsGetQueryParamCustomerIDFilter$outboundSchema = exports.MetricsGetQueryParamCustomerIDFilter$inboundSchema = exports.QueryParamProductBillingTypeFilter$ = exports.QueryParamProductBillingTypeFilter$outboundSchema = exports.QueryParamProductBillingTypeFilter$inboundSchema = exports.MetricsGetQueryParamProductIDFilter$ = exports.MetricsGetQueryParamProductIDFilter$outboundSchema = exports.MetricsGetQueryParamProductIDFilter$inboundSchema = exports.MetricsGetQueryParamOrganizationIDFilter$ = exports.MetricsGetQueryParamOrganizationIDFilter$outboundSchema = exports.MetricsGetQueryParamOrganizationIDFilter$inboundSchema = void 0;
exports.metricsGetQueryParamOrganizationIDFilterToJSON = metricsGetQueryParamOrganizationIDFilterToJSON;
exports.metricsGetQueryParamOrganizationIDFilterFromJSON = metricsGetQueryParamOrganizationIDFilterFromJSON;
exports.metricsGetQueryParamProductIDFilterToJSON = metricsGetQueryParamProductIDFilterToJSON;
exports.metricsGetQueryParamProductIDFilterFromJSON = metricsGetQueryParamProductIDFilterFromJSON;
exports.queryParamProductBillingTypeFilterToJSON = queryParamProductBillingTypeFilterToJSON;
exports.queryParamProductBillingTypeFilterFromJSON = queryParamProductBillingTypeFilterFromJSON;
exports.metricsGetQueryParamCustomerIDFilterToJSON = metricsGetQueryParamCustomerIDFilterToJSON;
exports.metricsGetQueryParamCustomerIDFilterFromJSON = metricsGetQueryParamCustomerIDFilterFromJSON;
exports.metricsGetRequestToJSON = metricsGetRequestToJSON;
exports.metricsGetRequestFromJSON = metricsGetRequestFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const rfcdate_js_1 = require("../../types/rfcdate.js");
const productbillingtype_js_1 = require("../components/productbillingtype.js");
const timeinterval_js_1 = require("../components/timeinterval.js");
/** @internal */
exports.MetricsGetQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MetricsGetQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsGetQueryParamOrganizationIDFilter$;
(function (MetricsGetQueryParamOrganizationIDFilter$) {
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$inboundSchema` instead. */
    MetricsGetQueryParamOrganizationIDFilter$.inboundSchema = exports.MetricsGetQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$outboundSchema` instead. */
    MetricsGetQueryParamOrganizationIDFilter$.outboundSchema = exports.MetricsGetQueryParamOrganizationIDFilter$outboundSchema;
})(MetricsGetQueryParamOrganizationIDFilter$ || (exports.MetricsGetQueryParamOrganizationIDFilter$ = MetricsGetQueryParamOrganizationIDFilter$ = {}));
function metricsGetQueryParamOrganizationIDFilterToJSON(metricsGetQueryParamOrganizationIDFilter) {
    return JSON.stringify(exports.MetricsGetQueryParamOrganizationIDFilter$outboundSchema.parse(metricsGetQueryParamOrganizationIDFilter));
}
function metricsGetQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsGetQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
exports.MetricsGetQueryParamProductIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MetricsGetQueryParamProductIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsGetQueryParamProductIDFilter$;
(function (MetricsGetQueryParamProductIDFilter$) {
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$inboundSchema` instead. */
    MetricsGetQueryParamProductIDFilter$.inboundSchema = exports.MetricsGetQueryParamProductIDFilter$inboundSchema;
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$outboundSchema` instead. */
    MetricsGetQueryParamProductIDFilter$.outboundSchema = exports.MetricsGetQueryParamProductIDFilter$outboundSchema;
})(MetricsGetQueryParamProductIDFilter$ || (exports.MetricsGetQueryParamProductIDFilter$ = MetricsGetQueryParamProductIDFilter$ = {}));
function metricsGetQueryParamProductIDFilterToJSON(metricsGetQueryParamProductIDFilter) {
    return JSON.stringify(exports.MetricsGetQueryParamProductIDFilter$outboundSchema.parse(metricsGetQueryParamProductIDFilter));
}
function metricsGetQueryParamProductIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsGetQueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetQueryParamProductIDFilter' from JSON`);
}
/** @internal */
exports.QueryParamProductBillingTypeFilter$inboundSchema = z.union([
    productbillingtype_js_1.ProductBillingType$inboundSchema,
    z.array(productbillingtype_js_1.ProductBillingType$inboundSchema),
]);
/** @internal */
exports.QueryParamProductBillingTypeFilter$outboundSchema = z.union([
    productbillingtype_js_1.ProductBillingType$outboundSchema,
    z.array(productbillingtype_js_1.ProductBillingType$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryParamProductBillingTypeFilter$;
(function (QueryParamProductBillingTypeFilter$) {
    /** @deprecated use `QueryParamProductBillingTypeFilter$inboundSchema` instead. */
    QueryParamProductBillingTypeFilter$.inboundSchema = exports.QueryParamProductBillingTypeFilter$inboundSchema;
    /** @deprecated use `QueryParamProductBillingTypeFilter$outboundSchema` instead. */
    QueryParamProductBillingTypeFilter$.outboundSchema = exports.QueryParamProductBillingTypeFilter$outboundSchema;
})(QueryParamProductBillingTypeFilter$ || (exports.QueryParamProductBillingTypeFilter$ = QueryParamProductBillingTypeFilter$ = {}));
function queryParamProductBillingTypeFilterToJSON(queryParamProductBillingTypeFilter) {
    return JSON.stringify(exports.QueryParamProductBillingTypeFilter$outboundSchema.parse(queryParamProductBillingTypeFilter));
}
function queryParamProductBillingTypeFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryParamProductBillingTypeFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamProductBillingTypeFilter' from JSON`);
}
/** @internal */
exports.MetricsGetQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MetricsGetQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsGetQueryParamCustomerIDFilter$;
(function (MetricsGetQueryParamCustomerIDFilter$) {
    /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$inboundSchema` instead. */
    MetricsGetQueryParamCustomerIDFilter$.inboundSchema = exports.MetricsGetQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$outboundSchema` instead. */
    MetricsGetQueryParamCustomerIDFilter$.outboundSchema = exports.MetricsGetQueryParamCustomerIDFilter$outboundSchema;
})(MetricsGetQueryParamCustomerIDFilter$ || (exports.MetricsGetQueryParamCustomerIDFilter$ = MetricsGetQueryParamCustomerIDFilter$ = {}));
function metricsGetQueryParamCustomerIDFilterToJSON(metricsGetQueryParamCustomerIDFilter) {
    return JSON.stringify(exports.MetricsGetQueryParamCustomerIDFilter$outboundSchema.parse(metricsGetQueryParamCustomerIDFilter));
}
function metricsGetQueryParamCustomerIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsGetQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
exports.MetricsGetRequest$inboundSchema = z.object({
    start_date: z.string().transform(v => new rfcdate_js_1.RFCDate(v)),
    end_date: z.string().transform(v => new rfcdate_js_1.RFCDate(v)),
    interval: timeinterval_js_1.TimeInterval$inboundSchema,
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    billing_type: z.nullable(z.union([
        productbillingtype_js_1.ProductBillingType$inboundSchema,
        z.array(productbillingtype_js_1.ProductBillingType$inboundSchema),
    ])).optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "start_date": "startDate",
        "end_date": "endDate",
        "organization_id": "organizationId",
        "product_id": "productId",
        "billing_type": "billingType",
        "customer_id": "customerId",
    });
});
/** @internal */
exports.MetricsGetRequest$outboundSchema = z.object({
    startDate: z.instanceof(rfcdate_js_1.RFCDate).transform(v => v.toString()),
    endDate: z.instanceof(rfcdate_js_1.RFCDate).transform(v => v.toString()),
    interval: timeinterval_js_1.TimeInterval$outboundSchema,
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    billingType: z.nullable(z.union([
        productbillingtype_js_1.ProductBillingType$outboundSchema,
        z.array(productbillingtype_js_1.ProductBillingType$outboundSchema),
    ])).optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        startDate: "start_date",
        endDate: "end_date",
        organizationId: "organization_id",
        productId: "product_id",
        billingType: "billing_type",
        customerId: "customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsGetRequest$;
(function (MetricsGetRequest$) {
    /** @deprecated use `MetricsGetRequest$inboundSchema` instead. */
    MetricsGetRequest$.inboundSchema = exports.MetricsGetRequest$inboundSchema;
    /** @deprecated use `MetricsGetRequest$outboundSchema` instead. */
    MetricsGetRequest$.outboundSchema = exports.MetricsGetRequest$outboundSchema;
})(MetricsGetRequest$ || (exports.MetricsGetRequest$ = MetricsGetRequest$ = {}));
function metricsGetRequestToJSON(metricsGetRequest) {
    return JSON.stringify(exports.MetricsGetRequest$outboundSchema.parse(metricsGetRequest));
}
function metricsGetRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetRequest' from JSON`);
}
//# sourceMappingURL=metricsget.js.map