/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { S3FileCreateMultipart$inboundSchema, S3FileCreateMultipart$outboundSchema, } from "./s3filecreatemultipart.js";
/** @internal */
export const ProductMediaFileCreate$inboundSchema = z.object({
    organization_id: z.nullable(z.string()).optional(),
    name: z.string(),
    mime_type: z.string(),
    size: z.number().int(),
    checksum_sha256_base64: z.nullable(z.string()).optional(),
    upload: S3FileCreateMultipart$inboundSchema,
    service: z.literal("product_media").optional(),
    version: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "mime_type": "mimeType",
        "checksum_sha256_base64": "checksumSha256Base64",
    });
});
/** @internal */
export const ProductMediaFileCreate$outboundSchema = z.object({
    organizationId: z.nullable(z.string()).optional(),
    name: z.string(),
    mimeType: z.string(),
    size: z.number().int(),
    checksumSha256Base64: z.nullable(z.string()).optional(),
    upload: S3FileCreateMultipart$outboundSchema,
    service: z.literal("product_media").default("product_media"),
    version: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        mimeType: "mime_type",
        checksumSha256Base64: "checksum_sha256_base64",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductMediaFileCreate$;
(function (ProductMediaFileCreate$) {
    /** @deprecated use `ProductMediaFileCreate$inboundSchema` instead. */
    ProductMediaFileCreate$.inboundSchema = ProductMediaFileCreate$inboundSchema;
    /** @deprecated use `ProductMediaFileCreate$outboundSchema` instead. */
    ProductMediaFileCreate$.outboundSchema = ProductMediaFileCreate$outboundSchema;
})(ProductMediaFileCreate$ || (ProductMediaFileCreate$ = {}));
export function productMediaFileCreateToJSON(productMediaFileCreate) {
    return JSON.stringify(ProductMediaFileCreate$outboundSchema.parse(productMediaFileCreate));
}
export function productMediaFileCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductMediaFileCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductMediaFileCreate' from JSON`);
}
//# sourceMappingURL=productmediafilecreate.js.map