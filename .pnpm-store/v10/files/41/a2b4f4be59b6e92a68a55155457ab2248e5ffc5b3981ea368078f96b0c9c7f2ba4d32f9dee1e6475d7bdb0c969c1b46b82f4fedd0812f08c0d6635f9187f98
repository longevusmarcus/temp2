/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).
 */
export const Permission = {
    Pull: "pull",
    Triage: "triage",
    Push: "push",
    Maintain: "maintain",
    Admin: "admin",
};
/** @internal */
export const Permission$inboundSchema = z
    .nativeEnum(Permission);
/** @internal */
export const Permission$outboundSchema = Permission$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Permission$;
(function (Permission$) {
    /** @deprecated use `Permission$inboundSchema` instead. */
    Permission$.inboundSchema = Permission$inboundSchema;
    /** @deprecated use `Permission$outboundSchema` instead. */
    Permission$.outboundSchema = Permission$outboundSchema;
})(Permission$ || (Permission$ = {}));
/** @internal */
export const BenefitGitHubRepositoryProperties$inboundSchema = z.object({
    repository_owner: z.string(),
    repository_name: z.string(),
    permission: Permission$inboundSchema,
    repository_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "repository_owner": "repositoryOwner",
        "repository_name": "repositoryName",
        "repository_id": "repositoryId",
    });
});
/** @internal */
export const BenefitGitHubRepositoryProperties$outboundSchema = z.object({
    repositoryOwner: z.string(),
    repositoryName: z.string(),
    permission: Permission$outboundSchema,
    repositoryId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        repositoryOwner: "repository_owner",
        repositoryName: "repository_name",
        repositoryId: "repository_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGitHubRepositoryProperties$;
(function (BenefitGitHubRepositoryProperties$) {
    /** @deprecated use `BenefitGitHubRepositoryProperties$inboundSchema` instead. */
    BenefitGitHubRepositoryProperties$.inboundSchema = BenefitGitHubRepositoryProperties$inboundSchema;
    /** @deprecated use `BenefitGitHubRepositoryProperties$outboundSchema` instead. */
    BenefitGitHubRepositoryProperties$.outboundSchema = BenefitGitHubRepositoryProperties$outboundSchema;
})(BenefitGitHubRepositoryProperties$ || (BenefitGitHubRepositoryProperties$ = {}));
export function benefitGitHubRepositoryPropertiesToJSON(benefitGitHubRepositoryProperties) {
    return JSON.stringify(BenefitGitHubRepositoryProperties$outboundSchema.parse(benefitGitHubRepositoryProperties));
}
export function benefitGitHubRepositoryPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGitHubRepositoryProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGitHubRepositoryProperties' from JSON`);
}
//# sourceMappingURL=benefitgithubrepositoryproperties.js.map