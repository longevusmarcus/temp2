import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomerOrderProduct, CustomerOrderProduct$Outbound } from "./customerorderproduct.js";
import { CustomerOrderSubscription, CustomerOrderSubscription$Outbound } from "./customerordersubscription.js";
import { LegacyRecurringProductPrice, LegacyRecurringProductPrice$Outbound } from "./legacyrecurringproductprice.js";
import { OrderItemSchema, OrderItemSchema$Outbound } from "./orderitemschema.js";
import { OrderStatus } from "./orderstatus.js";
import { ProductPrice, ProductPrice$Outbound } from "./productprice.js";
/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type CustomerOrderProductPrice = LegacyRecurringProductPrice | ProductPrice;
export type CustomerOrder = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    id: string;
    status: OrderStatus;
    /**
     * Whether the order has been paid for.
     */
    paid: boolean;
    /**
     * Amount in cents, before discounts and taxes.
     */
    subtotalAmount: number;
    /**
     * Discount amount in cents.
     */
    discountAmount: number;
    /**
     * Amount in cents, after discounts but before taxes.
     */
    netAmount: number;
    /**
     * Amount in cents, after discounts but before taxes.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    amount: number;
    /**
     * Sales tax amount in cents.
     */
    taxAmount: number;
    /**
     * Amount in cents, after discounts and taxes.
     */
    totalAmount: number;
    /**
     * Amount refunded in cents.
     */
    refundedAmount: number;
    /**
     * Sales tax refunded in cents.
     */
    refundedTaxAmount: number;
    currency: string;
    customerId: string;
    productId: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    productPriceId: string;
    subscriptionId: string | null;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    userId: string;
    product: CustomerOrderProduct;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    productPrice: LegacyRecurringProductPrice | ProductPrice;
    subscription: CustomerOrderSubscription | null;
    /**
     * Line items composing the order.
     */
    items: Array<OrderItemSchema>;
};
/** @internal */
export declare const CustomerOrderProductPrice$inboundSchema: z.ZodType<CustomerOrderProductPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerOrderProductPrice$Outbound = LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
/** @internal */
export declare const CustomerOrderProductPrice$outboundSchema: z.ZodType<CustomerOrderProductPrice$Outbound, z.ZodTypeDef, CustomerOrderProductPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerOrderProductPrice$ {
    /** @deprecated use `CustomerOrderProductPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerOrderProductPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerOrderProductPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerOrderProductPrice$Outbound, z.ZodTypeDef, CustomerOrderProductPrice>;
    /** @deprecated use `CustomerOrderProductPrice$Outbound` instead. */
    type Outbound = CustomerOrderProductPrice$Outbound;
}
export declare function customerOrderProductPriceToJSON(customerOrderProductPrice: CustomerOrderProductPrice): string;
export declare function customerOrderProductPriceFromJSON(jsonString: string): SafeParseResult<CustomerOrderProductPrice, SDKValidationError>;
/** @internal */
export declare const CustomerOrder$inboundSchema: z.ZodType<CustomerOrder, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerOrder$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    status: string;
    paid: boolean;
    subtotal_amount: number;
    discount_amount: number;
    net_amount: number;
    amount: number;
    tax_amount: number;
    total_amount: number;
    refunded_amount: number;
    refunded_tax_amount: number;
    currency: string;
    customer_id: string;
    product_id: string;
    product_price_id: string;
    subscription_id: string | null;
    user_id: string;
    product: CustomerOrderProduct$Outbound;
    product_price: LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
    subscription: CustomerOrderSubscription$Outbound | null;
    items: Array<OrderItemSchema$Outbound>;
};
/** @internal */
export declare const CustomerOrder$outboundSchema: z.ZodType<CustomerOrder$Outbound, z.ZodTypeDef, CustomerOrder>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerOrder$ {
    /** @deprecated use `CustomerOrder$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerOrder, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerOrder$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerOrder$Outbound, z.ZodTypeDef, CustomerOrder>;
    /** @deprecated use `CustomerOrder$Outbound` instead. */
    type Outbound = CustomerOrder$Outbound;
}
export declare function customerOrderToJSON(customerOrder: CustomerOrder): string;
export declare function customerOrderFromJSON(jsonString: string): SafeParseResult<CustomerOrder, SDKValidationError>;
//# sourceMappingURL=customerorder.d.ts.map