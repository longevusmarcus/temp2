import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Order, Order$Outbound } from "./order.js";
/**
 * Sent when an order is updated.
 *
 * @remarks
 *
 * An order is updated when:
 *
 * * Its status changes, e.g. from `pending` to `paid`.
 * * It's refunded, partially or fully.
 *
 * **Discord & Slack support:** Full
 */
export type WebhookOrderUpdatedPayload = {
    type?: "order.updated" | undefined;
    data: Order;
};
/** @internal */
export declare const WebhookOrderUpdatedPayload$inboundSchema: z.ZodType<WebhookOrderUpdatedPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookOrderUpdatedPayload$Outbound = {
    type: "order.updated";
    data: Order$Outbound;
};
/** @internal */
export declare const WebhookOrderUpdatedPayload$outboundSchema: z.ZodType<WebhookOrderUpdatedPayload$Outbound, z.ZodTypeDef, WebhookOrderUpdatedPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookOrderUpdatedPayload$ {
    /** @deprecated use `WebhookOrderUpdatedPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookOrderUpdatedPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookOrderUpdatedPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookOrderUpdatedPayload$Outbound, z.ZodTypeDef, WebhookOrderUpdatedPayload>;
    /** @deprecated use `WebhookOrderUpdatedPayload$Outbound` instead. */
    type Outbound = WebhookOrderUpdatedPayload$Outbound;
}
export declare function webhookOrderUpdatedPayloadToJSON(webhookOrderUpdatedPayload: WebhookOrderUpdatedPayload): string;
export declare function webhookOrderUpdatedPayloadFromJSON(jsonString: string): SafeParseResult<WebhookOrderUpdatedPayload, SDKValidationError>;
//# sourceMappingURL=webhookorderupdatedpayload.d.ts.map