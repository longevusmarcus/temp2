/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Customer$inboundSchema, Customer$outboundSchema, } from "./customer.js";
import { EventSource$inboundSchema, EventSource$outboundSchema, } from "./eventsource.js";
/** @internal */
export const EventMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const EventMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventMetadata$;
(function (EventMetadata$) {
    /** @deprecated use `EventMetadata$inboundSchema` instead. */
    EventMetadata$.inboundSchema = EventMetadata$inboundSchema;
    /** @deprecated use `EventMetadata$outboundSchema` instead. */
    EventMetadata$.outboundSchema = EventMetadata$outboundSchema;
})(EventMetadata$ || (EventMetadata$ = {}));
export function eventMetadataToJSON(eventMetadata) {
    return JSON.stringify(EventMetadata$outboundSchema.parse(eventMetadata));
}
export function eventMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventMetadata' from JSON`);
}
/** @internal */
export const Event$inboundSchema = z
    .object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    id: z.string(),
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    name: z.string(),
    source: EventSource$inboundSchema,
    organization_id: z.string(),
    customer_id: z.nullable(z.string()),
    customer: z.nullable(Customer$inboundSchema),
    external_customer_id: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
export const Event$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    id: z.string(),
    timestamp: z.date().transform(v => v.toISOString()),
    name: z.string(),
    source: EventSource$outboundSchema,
    organizationId: z.string(),
    customerId: z.nullable(z.string()),
    customer: z.nullable(Customer$outboundSchema),
    externalCustomerId: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Event$;
(function (Event$) {
    /** @deprecated use `Event$inboundSchema` instead. */
    Event$.inboundSchema = Event$inboundSchema;
    /** @deprecated use `Event$outboundSchema` instead. */
    Event$.outboundSchema = Event$outboundSchema;
})(Event$ || (Event$ = {}));
export function eventToJSON(event) {
    return JSON.stringify(Event$outboundSchema.parse(event));
}
export function eventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Event$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Event' from JSON`);
}
//# sourceMappingURL=event.js.map