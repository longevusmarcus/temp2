/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { OrganizationFeatureSettings$inboundSchema, OrganizationFeatureSettings$outboundSchema, } from "./organizationfeaturesettings.js";
import { OrganizationProfileSettings$inboundSchema, OrganizationProfileSettings$outboundSchema, } from "./organizationprofilesettings.js";
import { OrganizationSocialLink$inboundSchema, OrganizationSocialLink$outboundSchema, } from "./organizationsociallink.js";
import { OrganizationSubscriptionSettings$inboundSchema, OrganizationSubscriptionSettings$outboundSchema, } from "./organizationsubscriptionsettings.js";
/** @internal */
export const Organization$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatar_url: z.nullable(z.string()),
    email: z.nullable(z.string()),
    website: z.nullable(z.string()),
    socials: z.array(OrganizationSocialLink$inboundSchema),
    details_submitted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    feature_settings: z.nullable(OrganizationFeatureSettings$inboundSchema),
    subscription_settings: OrganizationSubscriptionSettings$inboundSchema,
    bio: z.nullable(z.string()),
    company: z.nullable(z.string()),
    blog: z.nullable(z.string()),
    location: z.nullable(z.string()),
    twitter_username: z.nullable(z.string()),
    pledge_minimum_amount: z.number().int(),
    pledge_badge_show_amount: z.boolean(),
    default_upfront_split_to_contributors: z.nullable(z.number().int()),
    profile_settings: z.nullable(OrganizationProfileSettings$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "avatar_url": "avatarUrl",
        "details_submitted_at": "detailsSubmittedAt",
        "feature_settings": "featureSettings",
        "subscription_settings": "subscriptionSettings",
        "twitter_username": "twitterUsername",
        "pledge_minimum_amount": "pledgeMinimumAmount",
        "pledge_badge_show_amount": "pledgeBadgeShowAmount",
        "default_upfront_split_to_contributors": "defaultUpfrontSplitToContributors",
        "profile_settings": "profileSettings",
    });
});
/** @internal */
export const Organization$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatarUrl: z.nullable(z.string()),
    email: z.nullable(z.string()),
    website: z.nullable(z.string()),
    socials: z.array(OrganizationSocialLink$outboundSchema),
    detailsSubmittedAt: z.nullable(z.date().transform(v => v.toISOString())),
    featureSettings: z.nullable(OrganizationFeatureSettings$outboundSchema),
    subscriptionSettings: OrganizationSubscriptionSettings$outboundSchema,
    bio: z.nullable(z.string()),
    company: z.nullable(z.string()),
    blog: z.nullable(z.string()),
    location: z.nullable(z.string()),
    twitterUsername: z.nullable(z.string()),
    pledgeMinimumAmount: z.number().int(),
    pledgeBadgeShowAmount: z.boolean(),
    defaultUpfrontSplitToContributors: z.nullable(z.number().int()),
    profileSettings: z.nullable(OrganizationProfileSettings$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        avatarUrl: "avatar_url",
        detailsSubmittedAt: "details_submitted_at",
        featureSettings: "feature_settings",
        subscriptionSettings: "subscription_settings",
        twitterUsername: "twitter_username",
        pledgeMinimumAmount: "pledge_minimum_amount",
        pledgeBadgeShowAmount: "pledge_badge_show_amount",
        defaultUpfrontSplitToContributors: "default_upfront_split_to_contributors",
        profileSettings: "profile_settings",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Organization$;
(function (Organization$) {
    /** @deprecated use `Organization$inboundSchema` instead. */
    Organization$.inboundSchema = Organization$inboundSchema;
    /** @deprecated use `Organization$outboundSchema` instead. */
    Organization$.outboundSchema = Organization$outboundSchema;
})(Organization$ || (Organization$ = {}));
export function organizationToJSON(organization) {
    return JSON.stringify(Organization$outboundSchema.parse(organization));
}
export function organizationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Organization$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Organization' from JSON`);
}
//# sourceMappingURL=organization.js.map