/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { customerPortalCustomersAddPaymentMethod } from "../funcs/customerPortalCustomersAddPaymentMethod.js";
import { customerPortalCustomersDeletePaymentMethod } from "../funcs/customerPortalCustomersDeletePaymentMethod.js";
import { customerPortalCustomersGet } from "../funcs/customerPortalCustomersGet.js";
import { customerPortalCustomersGetPaymentMethods } from "../funcs/customerPortalCustomersGetPaymentMethods.js";
import { customerPortalCustomersUpdate } from "../funcs/customerPortalCustomersUpdate.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class PolarCustomers extends ClientSDK {
    /**
     * Get Customer
     *
     * @remarks
     * Get authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async get(security, options) {
        return unwrapAsync(customerPortalCustomersGet(this, security, options));
    }
    /**
     * Update Customer
     *
     * @remarks
     * Update authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    async update(security, request, options) {
        return unwrapAsync(customerPortalCustomersUpdate(this, security, request, options));
    }
    /**
     * Get Customer Payment Methods
     *
     * @remarks
     * Get saved payment methods of the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async getPaymentMethods(security, request, options) {
        return unwrapResultIterator(customerPortalCustomersGetPaymentMethods(this, security, request, options));
    }
    /**
     * Add Customer Payment Method
     *
     * @remarks
     * Add a payment method to the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async addPaymentMethod(security, request, options) {
        return unwrapAsync(customerPortalCustomersAddPaymentMethod(this, security, request, options));
    }
    /**
     * Delete Customer Payment Method
     *
     * @remarks
     * Delete a payment method from the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async deletePaymentMethod(security, request, options) {
        return unwrapAsync(customerPortalCustomersDeletePaymentMethod(this, security, request, options));
    }
}
//# sourceMappingURL=polarcustomers.js.map