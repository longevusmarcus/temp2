"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckoutLinkCreateProduct$ = exports.CheckoutLinkCreateProduct$outboundSchema = exports.CheckoutLinkCreateProduct$inboundSchema = exports.CheckoutLinkCreateProductMetadata$ = exports.CheckoutLinkCreateProductMetadata$outboundSchema = exports.CheckoutLinkCreateProductMetadata$inboundSchema = void 0;
exports.checkoutLinkCreateProductMetadataToJSON = checkoutLinkCreateProductMetadataToJSON;
exports.checkoutLinkCreateProductMetadataFromJSON = checkoutLinkCreateProductMetadataFromJSON;
exports.checkoutLinkCreateProductToJSON = checkoutLinkCreateProductToJSON;
exports.checkoutLinkCreateProductFromJSON = checkoutLinkCreateProductFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.CheckoutLinkCreateProductMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.CheckoutLinkCreateProductMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutLinkCreateProductMetadata$;
(function (CheckoutLinkCreateProductMetadata$) {
    /** @deprecated use `CheckoutLinkCreateProductMetadata$inboundSchema` instead. */
    CheckoutLinkCreateProductMetadata$.inboundSchema = exports.CheckoutLinkCreateProductMetadata$inboundSchema;
    /** @deprecated use `CheckoutLinkCreateProductMetadata$outboundSchema` instead. */
    CheckoutLinkCreateProductMetadata$.outboundSchema = exports.CheckoutLinkCreateProductMetadata$outboundSchema;
})(CheckoutLinkCreateProductMetadata$ || (exports.CheckoutLinkCreateProductMetadata$ = CheckoutLinkCreateProductMetadata$ = {}));
function checkoutLinkCreateProductMetadataToJSON(checkoutLinkCreateProductMetadata) {
    return JSON.stringify(exports.CheckoutLinkCreateProductMetadata$outboundSchema.parse(checkoutLinkCreateProductMetadata));
}
function checkoutLinkCreateProductMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutLinkCreateProductMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinkCreateProductMetadata' from JSON`);
}
/** @internal */
exports.CheckoutLinkCreateProduct$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    payment_processor: z.literal("stripe").optional(),
    label: z.nullable(z.string()).optional(),
    allow_discount_codes: z.boolean().default(true),
    discount_id: z.nullable(z.string()).optional(),
    success_url: z.nullable(z.string()).optional(),
    product_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "payment_processor": "paymentProcessor",
        "allow_discount_codes": "allowDiscountCodes",
        "discount_id": "discountId",
        "success_url": "successUrl",
        "product_id": "productId",
    });
});
/** @internal */
exports.CheckoutLinkCreateProduct$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    paymentProcessor: z.literal("stripe").default("stripe"),
    label: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.boolean().default(true),
    discountId: z.nullable(z.string()).optional(),
    successUrl: z.nullable(z.string()).optional(),
    productId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        paymentProcessor: "payment_processor",
        allowDiscountCodes: "allow_discount_codes",
        discountId: "discount_id",
        successUrl: "success_url",
        productId: "product_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutLinkCreateProduct$;
(function (CheckoutLinkCreateProduct$) {
    /** @deprecated use `CheckoutLinkCreateProduct$inboundSchema` instead. */
    CheckoutLinkCreateProduct$.inboundSchema = exports.CheckoutLinkCreateProduct$inboundSchema;
    /** @deprecated use `CheckoutLinkCreateProduct$outboundSchema` instead. */
    CheckoutLinkCreateProduct$.outboundSchema = exports.CheckoutLinkCreateProduct$outboundSchema;
})(CheckoutLinkCreateProduct$ || (exports.CheckoutLinkCreateProduct$ = CheckoutLinkCreateProduct$ = {}));
function checkoutLinkCreateProductToJSON(checkoutLinkCreateProduct) {
    return JSON.stringify(exports.CheckoutLinkCreateProduct$outboundSchema.parse(checkoutLinkCreateProduct));
}
function checkoutLinkCreateProductFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutLinkCreateProduct$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinkCreateProduct' from JSON`);
}
//# sourceMappingURL=checkoutlinkcreateproduct.js.map