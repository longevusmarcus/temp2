/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
export class AlreadyCanceledSubscription extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.error = err.error;
        this.detail = err.detail;
        this.name = "AlreadyCanceledSubscription";
    }
}
/** @internal */
export const AlreadyCanceledSubscription$inboundSchema = z.object({
    error: z.literal("AlreadyCanceledSubscription"),
    detail: z.string(),
})
    .transform((v) => {
    return new AlreadyCanceledSubscription(v);
});
/** @internal */
export const AlreadyCanceledSubscription$outboundSchema = z.instanceof(AlreadyCanceledSubscription)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.literal("AlreadyCanceledSubscription").default("AlreadyCanceledSubscription"),
    detail: z.string(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AlreadyCanceledSubscription$;
(function (AlreadyCanceledSubscription$) {
    /** @deprecated use `AlreadyCanceledSubscription$inboundSchema` instead. */
    AlreadyCanceledSubscription$.inboundSchema = AlreadyCanceledSubscription$inboundSchema;
    /** @deprecated use `AlreadyCanceledSubscription$outboundSchema` instead. */
    AlreadyCanceledSubscription$.outboundSchema = AlreadyCanceledSubscription$outboundSchema;
})(AlreadyCanceledSubscription$ || (AlreadyCanceledSubscription$ = {}));
//# sourceMappingURL=alreadycanceledsubscription.js.map