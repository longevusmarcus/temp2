/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const CustomFieldTextProperties$inboundSchema = z.object({
    form_label: z.string().optional(),
    form_help_text: z.string().optional(),
    form_placeholder: z.string().optional(),
    textarea: z.boolean().optional(),
    min_length: z.number().int().optional(),
    max_length: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        "form_label": "formLabel",
        "form_help_text": "formHelpText",
        "form_placeholder": "formPlaceholder",
        "min_length": "minLength",
        "max_length": "maxLength",
    });
});
/** @internal */
export const CustomFieldTextProperties$outboundSchema = z.object({
    formLabel: z.string().optional(),
    formHelpText: z.string().optional(),
    formPlaceholder: z.string().optional(),
    textarea: z.boolean().optional(),
    minLength: z.number().int().optional(),
    maxLength: z.number().int().optional(),
}).transform((v) => {
    return remap$(v, {
        formLabel: "form_label",
        formHelpText: "form_help_text",
        formPlaceholder: "form_placeholder",
        minLength: "min_length",
        maxLength: "max_length",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldTextProperties$;
(function (CustomFieldTextProperties$) {
    /** @deprecated use `CustomFieldTextProperties$inboundSchema` instead. */
    CustomFieldTextProperties$.inboundSchema = CustomFieldTextProperties$inboundSchema;
    /** @deprecated use `CustomFieldTextProperties$outboundSchema` instead. */
    CustomFieldTextProperties$.outboundSchema = CustomFieldTextProperties$outboundSchema;
})(CustomFieldTextProperties$ || (CustomFieldTextProperties$ = {}));
export function customFieldTextPropertiesToJSON(customFieldTextProperties) {
    return JSON.stringify(CustomFieldTextProperties$outboundSchema.parse(customFieldTextProperties));
}
export function customFieldTextPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldTextProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldTextProperties' from JSON`);
}
//# sourceMappingURL=customfieldtextproperties.js.map