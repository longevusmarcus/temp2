"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organization$ = exports.Organization$outboundSchema = exports.Organization$inboundSchema = void 0;
exports.organizationToJSON = organizationToJSON;
exports.organizationFromJSON = organizationFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const organizationfeaturesettings_js_1 = require("./organizationfeaturesettings.js");
const organizationprofilesettings_js_1 = require("./organizationprofilesettings.js");
const organizationsociallink_js_1 = require("./organizationsociallink.js");
const organizationsubscriptionsettings_js_1 = require("./organizationsubscriptionsettings.js");
/** @internal */
exports.Organization$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatar_url: z.nullable(z.string()),
    email: z.nullable(z.string()),
    website: z.nullable(z.string()),
    socials: z.array(organizationsociallink_js_1.OrganizationSocialLink$inboundSchema),
    details_submitted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    feature_settings: z.nullable(organizationfeaturesettings_js_1.OrganizationFeatureSettings$inboundSchema),
    subscription_settings: organizationsubscriptionsettings_js_1.OrganizationSubscriptionSettings$inboundSchema,
    bio: z.nullable(z.string()),
    company: z.nullable(z.string()),
    blog: z.nullable(z.string()),
    location: z.nullable(z.string()),
    twitter_username: z.nullable(z.string()),
    pledge_minimum_amount: z.number().int(),
    pledge_badge_show_amount: z.boolean(),
    default_upfront_split_to_contributors: z.nullable(z.number().int()),
    profile_settings: z.nullable(organizationprofilesettings_js_1.OrganizationProfileSettings$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "avatar_url": "avatarUrl",
        "details_submitted_at": "detailsSubmittedAt",
        "feature_settings": "featureSettings",
        "subscription_settings": "subscriptionSettings",
        "twitter_username": "twitterUsername",
        "pledge_minimum_amount": "pledgeMinimumAmount",
        "pledge_badge_show_amount": "pledgeBadgeShowAmount",
        "default_upfront_split_to_contributors": "defaultUpfrontSplitToContributors",
        "profile_settings": "profileSettings",
    });
});
/** @internal */
exports.Organization$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatarUrl: z.nullable(z.string()),
    email: z.nullable(z.string()),
    website: z.nullable(z.string()),
    socials: z.array(organizationsociallink_js_1.OrganizationSocialLink$outboundSchema),
    detailsSubmittedAt: z.nullable(z.date().transform(v => v.toISOString())),
    featureSettings: z.nullable(organizationfeaturesettings_js_1.OrganizationFeatureSettings$outboundSchema),
    subscriptionSettings: organizationsubscriptionsettings_js_1.OrganizationSubscriptionSettings$outboundSchema,
    bio: z.nullable(z.string()),
    company: z.nullable(z.string()),
    blog: z.nullable(z.string()),
    location: z.nullable(z.string()),
    twitterUsername: z.nullable(z.string()),
    pledgeMinimumAmount: z.number().int(),
    pledgeBadgeShowAmount: z.boolean(),
    defaultUpfrontSplitToContributors: z.nullable(z.number().int()),
    profileSettings: z.nullable(organizationprofilesettings_js_1.OrganizationProfileSettings$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        avatarUrl: "avatar_url",
        detailsSubmittedAt: "details_submitted_at",
        featureSettings: "feature_settings",
        subscriptionSettings: "subscription_settings",
        twitterUsername: "twitter_username",
        pledgeMinimumAmount: "pledge_minimum_amount",
        pledgeBadgeShowAmount: "pledge_badge_show_amount",
        defaultUpfrontSplitToContributors: "default_upfront_split_to_contributors",
        profileSettings: "profile_settings",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Organization$;
(function (Organization$) {
    /** @deprecated use `Organization$inboundSchema` instead. */
    Organization$.inboundSchema = exports.Organization$inboundSchema;
    /** @deprecated use `Organization$outboundSchema` instead. */
    Organization$.outboundSchema = exports.Organization$outboundSchema;
})(Organization$ || (exports.Organization$ = Organization$ = {}));
function organizationToJSON(organization) {
    return JSON.stringify(exports.Organization$outboundSchema.parse(organization));
}
function organizationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Organization$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Organization' from JSON`);
}
//# sourceMappingURL=organization.js.map