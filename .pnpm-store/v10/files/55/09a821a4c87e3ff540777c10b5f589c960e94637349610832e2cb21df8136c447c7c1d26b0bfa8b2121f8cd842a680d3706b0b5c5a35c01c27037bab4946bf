/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerCancellationReason$inboundSchema, CustomerCancellationReason$outboundSchema, } from "./customercancellationreason.js";
import { DiscountFixedOnceForeverDurationBase$inboundSchema, DiscountFixedOnceForeverDurationBase$outboundSchema, } from "./discountfixedonceforeverdurationbase.js";
import { DiscountFixedRepeatDurationBase$inboundSchema, DiscountFixedRepeatDurationBase$outboundSchema, } from "./discountfixedrepeatdurationbase.js";
import { DiscountPercentageOnceForeverDurationBase$inboundSchema, DiscountPercentageOnceForeverDurationBase$outboundSchema, } from "./discountpercentageonceforeverdurationbase.js";
import { DiscountPercentageRepeatDurationBase$inboundSchema, DiscountPercentageRepeatDurationBase$outboundSchema, } from "./discountpercentagerepeatdurationbase.js";
import { LegacyRecurringProductPrice$inboundSchema, LegacyRecurringProductPrice$outboundSchema, } from "./legacyrecurringproductprice.js";
import { Product$inboundSchema, Product$outboundSchema, } from "./product.js";
import { ProductPrice$inboundSchema, ProductPrice$outboundSchema, } from "./productprice.js";
import { SubscriptionCustomer$inboundSchema, SubscriptionCustomer$outboundSchema, } from "./subscriptioncustomer.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
import { SubscriptionStatus$inboundSchema, SubscriptionStatus$outboundSchema, } from "./subscriptionstatus.js";
import { SubscriptionUser$inboundSchema, SubscriptionUser$outboundSchema, } from "./subscriptionuser.js";
/** @internal */
export const Metadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const Metadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Metadata$;
(function (Metadata$) {
    /** @deprecated use `Metadata$inboundSchema` instead. */
    Metadata$.inboundSchema = Metadata$inboundSchema;
    /** @deprecated use `Metadata$outboundSchema` instead. */
    Metadata$.outboundSchema = Metadata$outboundSchema;
})(Metadata$ || (Metadata$ = {}));
export function metadataToJSON(metadata) {
    return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}
export function metadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Metadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Metadata' from JSON`);
}
/** @internal */
export const CustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldData$;
(function (CustomFieldData$) {
    /** @deprecated use `CustomFieldData$inboundSchema` instead. */
    CustomFieldData$.inboundSchema = CustomFieldData$inboundSchema;
    /** @deprecated use `CustomFieldData$outboundSchema` instead. */
    CustomFieldData$.outboundSchema = CustomFieldData$outboundSchema;
})(CustomFieldData$ || (CustomFieldData$ = {}));
export function customFieldDataToJSON(customFieldData) {
    return JSON.stringify(CustomFieldData$outboundSchema.parse(customFieldData));
}
export function customFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldData' from JSON`);
}
/** @internal */
export const SubscriptionDiscount$inboundSchema = z.union([
    DiscountPercentageOnceForeverDurationBase$inboundSchema,
    DiscountFixedOnceForeverDurationBase$inboundSchema,
    DiscountPercentageRepeatDurationBase$inboundSchema,
    DiscountFixedRepeatDurationBase$inboundSchema,
]);
/** @internal */
export const SubscriptionDiscount$outboundSchema = z.union([
    DiscountPercentageOnceForeverDurationBase$outboundSchema,
    DiscountFixedOnceForeverDurationBase$outboundSchema,
    DiscountPercentageRepeatDurationBase$outboundSchema,
    DiscountFixedRepeatDurationBase$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionDiscount$;
(function (SubscriptionDiscount$) {
    /** @deprecated use `SubscriptionDiscount$inboundSchema` instead. */
    SubscriptionDiscount$.inboundSchema = SubscriptionDiscount$inboundSchema;
    /** @deprecated use `SubscriptionDiscount$outboundSchema` instead. */
    SubscriptionDiscount$.outboundSchema = SubscriptionDiscount$outboundSchema;
})(SubscriptionDiscount$ || (SubscriptionDiscount$ = {}));
export function subscriptionDiscountToJSON(subscriptionDiscount) {
    return JSON.stringify(SubscriptionDiscount$outboundSchema.parse(subscriptionDiscount));
}
export function subscriptionDiscountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionDiscount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionDiscount' from JSON`);
}
/** @internal */
export const Price$inboundSchema = z
    .union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
]);
/** @internal */
export const Price$outboundSchema = z.union([
    LegacyRecurringProductPrice$outboundSchema,
    ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Price$;
(function (Price$) {
    /** @deprecated use `Price$inboundSchema` instead. */
    Price$.inboundSchema = Price$inboundSchema;
    /** @deprecated use `Price$outboundSchema` instead. */
    Price$.outboundSchema = Price$outboundSchema;
})(Price$ || (Price$ = {}));
export function priceToJSON(price) {
    return JSON.stringify(Price$outboundSchema.parse(price));
}
export function priceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Price$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Price' from JSON`);
}
/** @internal */
export const SubscriptionPrices$inboundSchema = z.union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
]);
/** @internal */
export const SubscriptionPrices$outboundSchema = z.union([
    LegacyRecurringProductPrice$outboundSchema,
    ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionPrices$;
(function (SubscriptionPrices$) {
    /** @deprecated use `SubscriptionPrices$inboundSchema` instead. */
    SubscriptionPrices$.inboundSchema = SubscriptionPrices$inboundSchema;
    /** @deprecated use `SubscriptionPrices$outboundSchema` instead. */
    SubscriptionPrices$.outboundSchema = SubscriptionPrices$outboundSchema;
})(SubscriptionPrices$ || (SubscriptionPrices$ = {}));
export function subscriptionPricesToJSON(subscriptionPrices) {
    return JSON.stringify(SubscriptionPrices$outboundSchema.parse(subscriptionPrices));
}
export function subscriptionPricesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionPrices$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionPrices' from JSON`);
}
/** @internal */
export const Subscription$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    recurring_interval: SubscriptionRecurringInterval$inboundSchema,
    status: SubscriptionStatus$inboundSchema,
    current_period_start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    current_period_end: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    cancel_at_period_end: z.boolean(),
    canceled_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    started_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ended_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    customer_id: z.string(),
    product_id: z.string(),
    discount_id: z.nullable(z.string()),
    checkout_id: z.nullable(z.string()),
    customer_cancellation_reason: z.nullable(CustomerCancellationReason$inboundSchema),
    customer_cancellation_comment: z.nullable(z.string()),
    price_id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    customer: SubscriptionCustomer$inboundSchema,
    user_id: z.string(),
    user: SubscriptionUser$inboundSchema,
    product: Product$inboundSchema,
    discount: z.nullable(z.union([
        DiscountPercentageOnceForeverDurationBase$inboundSchema,
        DiscountFixedOnceForeverDurationBase$inboundSchema,
        DiscountPercentageRepeatDurationBase$inboundSchema,
        DiscountFixedRepeatDurationBase$inboundSchema,
    ])),
    price: z.union([
        LegacyRecurringProductPrice$inboundSchema,
        ProductPrice$inboundSchema,
    ]),
    prices: z.array(z.union([
        LegacyRecurringProductPrice$inboundSchema,
        ProductPrice$inboundSchema,
    ])),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "recurring_interval": "recurringInterval",
        "current_period_start": "currentPeriodStart",
        "current_period_end": "currentPeriodEnd",
        "cancel_at_period_end": "cancelAtPeriodEnd",
        "canceled_at": "canceledAt",
        "started_at": "startedAt",
        "ends_at": "endsAt",
        "ended_at": "endedAt",
        "customer_id": "customerId",
        "product_id": "productId",
        "discount_id": "discountId",
        "checkout_id": "checkoutId",
        "customer_cancellation_reason": "customerCancellationReason",
        "customer_cancellation_comment": "customerCancellationComment",
        "price_id": "priceId",
        "custom_field_data": "customFieldData",
        "user_id": "userId",
    });
});
/** @internal */
export const Subscription$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    recurringInterval: SubscriptionRecurringInterval$outboundSchema,
    status: SubscriptionStatus$outboundSchema,
    currentPeriodStart: z.date().transform(v => v.toISOString()),
    currentPeriodEnd: z.nullable(z.date().transform(v => v.toISOString())),
    cancelAtPeriodEnd: z.boolean(),
    canceledAt: z.nullable(z.date().transform(v => v.toISOString())),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())),
    endedAt: z.nullable(z.date().transform(v => v.toISOString())),
    customerId: z.string(),
    productId: z.string(),
    discountId: z.nullable(z.string()),
    checkoutId: z.nullable(z.string()),
    customerCancellationReason: z.nullable(CustomerCancellationReason$outboundSchema),
    customerCancellationComment: z.nullable(z.string()),
    priceId: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    customer: SubscriptionCustomer$outboundSchema,
    userId: z.string(),
    user: SubscriptionUser$outboundSchema,
    product: Product$outboundSchema,
    discount: z.nullable(z.union([
        DiscountPercentageOnceForeverDurationBase$outboundSchema,
        DiscountFixedOnceForeverDurationBase$outboundSchema,
        DiscountPercentageRepeatDurationBase$outboundSchema,
        DiscountFixedRepeatDurationBase$outboundSchema,
    ])),
    price: z.union([
        LegacyRecurringProductPrice$outboundSchema,
        ProductPrice$outboundSchema,
    ]),
    prices: z.array(z.union([
        LegacyRecurringProductPrice$outboundSchema,
        ProductPrice$outboundSchema,
    ])),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        recurringInterval: "recurring_interval",
        currentPeriodStart: "current_period_start",
        currentPeriodEnd: "current_period_end",
        cancelAtPeriodEnd: "cancel_at_period_end",
        canceledAt: "canceled_at",
        startedAt: "started_at",
        endsAt: "ends_at",
        endedAt: "ended_at",
        customerId: "customer_id",
        productId: "product_id",
        discountId: "discount_id",
        checkoutId: "checkout_id",
        customerCancellationReason: "customer_cancellation_reason",
        customerCancellationComment: "customer_cancellation_comment",
        priceId: "price_id",
        customFieldData: "custom_field_data",
        userId: "user_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Subscription$;
(function (Subscription$) {
    /** @deprecated use `Subscription$inboundSchema` instead. */
    Subscription$.inboundSchema = Subscription$inboundSchema;
    /** @deprecated use `Subscription$outboundSchema` instead. */
    Subscription$.outboundSchema = Subscription$outboundSchema;
})(Subscription$ || (Subscription$ = {}));
export function subscriptionToJSON(subscription) {
    return JSON.stringify(Subscription$outboundSchema.parse(subscription));
}
export function subscriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Subscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Subscription' from JSON`);
}
//# sourceMappingURL=subscription.js.map