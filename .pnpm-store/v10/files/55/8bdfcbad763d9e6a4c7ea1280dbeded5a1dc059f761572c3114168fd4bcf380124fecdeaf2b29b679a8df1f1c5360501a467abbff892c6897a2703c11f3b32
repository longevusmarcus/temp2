/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitCustomUpdate$inboundSchema, BenefitCustomUpdate$outboundSchema, } from "../components/benefitcustomupdate.js";
import { BenefitDiscordUpdate$inboundSchema, BenefitDiscordUpdate$outboundSchema, } from "../components/benefitdiscordupdate.js";
import { BenefitDownloadablesUpdate$inboundSchema, BenefitDownloadablesUpdate$outboundSchema, } from "../components/benefitdownloadablesupdate.js";
import { BenefitGitHubRepositoryUpdate$inboundSchema, BenefitGitHubRepositoryUpdate$outboundSchema, } from "../components/benefitgithubrepositoryupdate.js";
import { BenefitLicenseKeysUpdate$inboundSchema, BenefitLicenseKeysUpdate$outboundSchema, } from "../components/benefitlicensekeysupdate.js";
/** @internal */
export const BenefitsUpdateBenefitUpdate$inboundSchema = z.union([
    BenefitCustomUpdate$inboundSchema,
    BenefitDiscordUpdate$inboundSchema,
    BenefitGitHubRepositoryUpdate$inboundSchema,
    BenefitDownloadablesUpdate$inboundSchema,
    BenefitLicenseKeysUpdate$inboundSchema,
]);
/** @internal */
export const BenefitsUpdateBenefitUpdate$outboundSchema = z.union([
    BenefitCustomUpdate$outboundSchema,
    BenefitDiscordUpdate$outboundSchema,
    BenefitGitHubRepositoryUpdate$outboundSchema,
    BenefitDownloadablesUpdate$outboundSchema,
    BenefitLicenseKeysUpdate$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitsUpdateBenefitUpdate$;
(function (BenefitsUpdateBenefitUpdate$) {
    /** @deprecated use `BenefitsUpdateBenefitUpdate$inboundSchema` instead. */
    BenefitsUpdateBenefitUpdate$.inboundSchema = BenefitsUpdateBenefitUpdate$inboundSchema;
    /** @deprecated use `BenefitsUpdateBenefitUpdate$outboundSchema` instead. */
    BenefitsUpdateBenefitUpdate$.outboundSchema = BenefitsUpdateBenefitUpdate$outboundSchema;
})(BenefitsUpdateBenefitUpdate$ || (BenefitsUpdateBenefitUpdate$ = {}));
export function benefitsUpdateBenefitUpdateToJSON(benefitsUpdateBenefitUpdate) {
    return JSON.stringify(BenefitsUpdateBenefitUpdate$outboundSchema.parse(benefitsUpdateBenefitUpdate));
}
export function benefitsUpdateBenefitUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitsUpdateBenefitUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitsUpdateBenefitUpdate' from JSON`);
}
/** @internal */
export const BenefitsUpdateRequest$inboundSchema = z.object({
    id: z.string(),
    RequestBody: z.union([
        BenefitCustomUpdate$inboundSchema,
        BenefitDiscordUpdate$inboundSchema,
        BenefitGitHubRepositoryUpdate$inboundSchema,
        BenefitDownloadablesUpdate$inboundSchema,
        BenefitLicenseKeysUpdate$inboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const BenefitsUpdateRequest$outboundSchema = z.object({
    id: z.string(),
    requestBody: z.union([
        BenefitCustomUpdate$outboundSchema,
        BenefitDiscordUpdate$outboundSchema,
        BenefitGitHubRepositoryUpdate$outboundSchema,
        BenefitDownloadablesUpdate$outboundSchema,
        BenefitLicenseKeysUpdate$outboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitsUpdateRequest$;
(function (BenefitsUpdateRequest$) {
    /** @deprecated use `BenefitsUpdateRequest$inboundSchema` instead. */
    BenefitsUpdateRequest$.inboundSchema = BenefitsUpdateRequest$inboundSchema;
    /** @deprecated use `BenefitsUpdateRequest$outboundSchema` instead. */
    BenefitsUpdateRequest$.outboundSchema = BenefitsUpdateRequest$outboundSchema;
})(BenefitsUpdateRequest$ || (BenefitsUpdateRequest$ = {}));
export function benefitsUpdateRequestToJSON(benefitsUpdateRequest) {
    return JSON.stringify(BenefitsUpdateRequest$outboundSchema.parse(benefitsUpdateRequest));
}
export function benefitsUpdateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitsUpdateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitsUpdateRequest' from JSON`);
}
//# sourceMappingURL=benefitsupdate.js.map