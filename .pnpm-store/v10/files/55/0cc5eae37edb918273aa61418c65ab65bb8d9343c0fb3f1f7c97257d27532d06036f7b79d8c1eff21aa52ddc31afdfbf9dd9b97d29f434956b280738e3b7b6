/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceProduct$inboundSchema, ListResourceProduct$outboundSchema, } from "../components/listresourceproduct.js";
import { ProductSortProperty$inboundSchema, ProductSortProperty$outboundSchema, } from "../components/productsortproperty.js";
/** @internal */
export const QueryParamProductIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const QueryParamProductIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamProductIDFilter$;
(function (QueryParamProductIDFilter$) {
    /** @deprecated use `QueryParamProductIDFilter$inboundSchema` instead. */
    QueryParamProductIDFilter$.inboundSchema = QueryParamProductIDFilter$inboundSchema;
    /** @deprecated use `QueryParamProductIDFilter$outboundSchema` instead. */
    QueryParamProductIDFilter$.outboundSchema = QueryParamProductIDFilter$outboundSchema;
})(QueryParamProductIDFilter$ || (QueryParamProductIDFilter$ = {}));
export function queryParamProductIDFilterToJSON(queryParamProductIDFilter) {
    return JSON.stringify(QueryParamProductIDFilter$outboundSchema.parse(queryParamProductIDFilter));
}
export function queryParamProductIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamProductIDFilter' from JSON`);
}
/** @internal */
export const ProductsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const ProductsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductsListQueryParamOrganizationIDFilter$;
(function (ProductsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `ProductsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    ProductsListQueryParamOrganizationIDFilter$.inboundSchema = ProductsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `ProductsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    ProductsListQueryParamOrganizationIDFilter$.outboundSchema = ProductsListQueryParamOrganizationIDFilter$outboundSchema;
})(ProductsListQueryParamOrganizationIDFilter$ || (ProductsListQueryParamOrganizationIDFilter$ = {}));
export function productsListQueryParamOrganizationIDFilterToJSON(productsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(ProductsListQueryParamOrganizationIDFilter$outboundSchema.parse(productsListQueryParamOrganizationIDFilter));
}
export function productsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const BenefitIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const BenefitIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitIDFilter$;
(function (BenefitIDFilter$) {
    /** @deprecated use `BenefitIDFilter$inboundSchema` instead. */
    BenefitIDFilter$.inboundSchema = BenefitIDFilter$inboundSchema;
    /** @deprecated use `BenefitIDFilter$outboundSchema` instead. */
    BenefitIDFilter$.outboundSchema = BenefitIDFilter$outboundSchema;
})(BenefitIDFilter$ || (BenefitIDFilter$ = {}));
export function benefitIDFilterToJSON(benefitIDFilter) {
    return JSON.stringify(BenefitIDFilter$outboundSchema.parse(benefitIDFilter));
}
export function benefitIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitIDFilter' from JSON`);
}
/** @internal */
export const ProductsListRequest$inboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    query: z.nullable(z.string()).optional(),
    is_archived: z.nullable(z.boolean()).optional(),
    is_recurring: z.nullable(z.boolean()).optional(),
    benefit_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(ProductSortProperty$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "is_archived": "isArchived",
        "is_recurring": "isRecurring",
        "benefit_id": "benefitId",
    });
});
/** @internal */
export const ProductsListRequest$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    query: z.nullable(z.string()).optional(),
    isArchived: z.nullable(z.boolean()).optional(),
    isRecurring: z.nullable(z.boolean()).optional(),
    benefitId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(ProductSortProperty$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        isArchived: "is_archived",
        isRecurring: "is_recurring",
        benefitId: "benefit_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductsListRequest$;
(function (ProductsListRequest$) {
    /** @deprecated use `ProductsListRequest$inboundSchema` instead. */
    ProductsListRequest$.inboundSchema = ProductsListRequest$inboundSchema;
    /** @deprecated use `ProductsListRequest$outboundSchema` instead. */
    ProductsListRequest$.outboundSchema = ProductsListRequest$outboundSchema;
})(ProductsListRequest$ || (ProductsListRequest$ = {}));
export function productsListRequestToJSON(productsListRequest) {
    return JSON.stringify(ProductsListRequest$outboundSchema.parse(productsListRequest));
}
export function productsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductsListRequest' from JSON`);
}
/** @internal */
export const ProductsListResponse$inboundSchema = z.object({
    Result: ListResourceProduct$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const ProductsListResponse$outboundSchema = z.object({
    result: ListResourceProduct$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductsListResponse$;
(function (ProductsListResponse$) {
    /** @deprecated use `ProductsListResponse$inboundSchema` instead. */
    ProductsListResponse$.inboundSchema = ProductsListResponse$inboundSchema;
    /** @deprecated use `ProductsListResponse$outboundSchema` instead. */
    ProductsListResponse$.outboundSchema = ProductsListResponse$outboundSchema;
})(ProductsListResponse$ || (ProductsListResponse$ = {}));
export function productsListResponseToJSON(productsListResponse) {
    return JSON.stringify(ProductsListResponse$outboundSchema.parse(productsListResponse));
}
export function productsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductsListResponse' from JSON`);
}
//# sourceMappingURL=productslist.js.map