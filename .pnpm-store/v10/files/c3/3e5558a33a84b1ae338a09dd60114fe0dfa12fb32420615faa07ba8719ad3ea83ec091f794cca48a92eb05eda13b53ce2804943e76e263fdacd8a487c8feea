/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const LicenseKeyDeactivate$inboundSchema = z.object({
    key: z.string(),
    organization_id: z.string(),
    activation_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "activation_id": "activationId",
    });
});
/** @internal */
export const LicenseKeyDeactivate$outboundSchema = z.object({
    key: z.string(),
    organizationId: z.string(),
    activationId: z.string(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        activationId: "activation_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyDeactivate$;
(function (LicenseKeyDeactivate$) {
    /** @deprecated use `LicenseKeyDeactivate$inboundSchema` instead. */
    LicenseKeyDeactivate$.inboundSchema = LicenseKeyDeactivate$inboundSchema;
    /** @deprecated use `LicenseKeyDeactivate$outboundSchema` instead. */
    LicenseKeyDeactivate$.outboundSchema = LicenseKeyDeactivate$outboundSchema;
})(LicenseKeyDeactivate$ || (LicenseKeyDeactivate$ = {}));
export function licenseKeyDeactivateToJSON(licenseKeyDeactivate) {
    return JSON.stringify(LicenseKeyDeactivate$outboundSchema.parse(licenseKeyDeactivate));
}
export function licenseKeyDeactivateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyDeactivate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyDeactivate' from JSON`);
}
//# sourceMappingURL=licensekeydeactivate.js.map