/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CountAggregation$inboundSchema, CountAggregation$outboundSchema, } from "./countaggregation.js";
import { Filter$inboundSchema, Filter$outboundSchema, } from "./filter.js";
import { PropertyAggregation$inboundSchema, PropertyAggregation$outboundSchema, } from "./propertyaggregation.js";
/** @internal */
export const MeterMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const MeterMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterMetadata$;
(function (MeterMetadata$) {
    /** @deprecated use `MeterMetadata$inboundSchema` instead. */
    MeterMetadata$.inboundSchema = MeterMetadata$inboundSchema;
    /** @deprecated use `MeterMetadata$outboundSchema` instead. */
    MeterMetadata$.outboundSchema = MeterMetadata$outboundSchema;
})(MeterMetadata$ || (MeterMetadata$ = {}));
export function meterMetadataToJSON(meterMetadata) {
    return JSON.stringify(MeterMetadata$outboundSchema.parse(meterMetadata));
}
export function meterMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterMetadata' from JSON`);
}
/** @internal */
export const MeterAggregation$inboundSchema = z.union([
    CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/** @internal */
export const MeterAggregation$outboundSchema = z.union([
    CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterAggregation$;
(function (MeterAggregation$) {
    /** @deprecated use `MeterAggregation$inboundSchema` instead. */
    MeterAggregation$.inboundSchema = MeterAggregation$inboundSchema;
    /** @deprecated use `MeterAggregation$outboundSchema` instead. */
    MeterAggregation$.outboundSchema = MeterAggregation$outboundSchema;
})(MeterAggregation$ || (MeterAggregation$ = {}));
export function meterAggregationToJSON(meterAggregation) {
    return JSON.stringify(MeterAggregation$outboundSchema.parse(meterAggregation));
}
export function meterAggregationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterAggregation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterAggregation' from JSON`);
}
/** @internal */
export const Meter$inboundSchema = z
    .object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    name: z.string(),
    filter: Filter$inboundSchema,
    aggregation: z.union([
        CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({
            func: v.func,
        }))),
    ]),
    organization_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const Meter$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    name: z.string(),
    filter: Filter$outboundSchema,
    aggregation: z.union([
        CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
    ]),
    organizationId: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Meter$;
(function (Meter$) {
    /** @deprecated use `Meter$inboundSchema` instead. */
    Meter$.inboundSchema = Meter$inboundSchema;
    /** @deprecated use `Meter$outboundSchema` instead. */
    Meter$.outboundSchema = Meter$outboundSchema;
})(Meter$ || (Meter$ = {}));
export function meterToJSON(meter) {
    return JSON.stringify(Meter$outboundSchema.parse(meter));
}
export function meterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Meter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Meter' from JSON`);
}
//# sourceMappingURL=meter.js.map