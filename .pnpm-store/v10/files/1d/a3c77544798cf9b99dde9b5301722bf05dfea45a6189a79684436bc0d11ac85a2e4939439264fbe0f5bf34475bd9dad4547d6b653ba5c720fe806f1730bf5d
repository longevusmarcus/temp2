/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { FileServiceTypes$inboundSchema, FileServiceTypes$outboundSchema, } from "./fileservicetypes.js";
import { S3FileUploadMultipart$inboundSchema, S3FileUploadMultipart$outboundSchema, } from "./s3fileuploadmultipart.js";
/** @internal */
export const FileUpload$inboundSchema = z.object({
    id: z.string(),
    organization_id: z.string(),
    name: z.string(),
    path: z.string(),
    mime_type: z.string(),
    size: z.number().int(),
    storage_version: z.nullable(z.string()),
    checksum_etag: z.nullable(z.string()),
    checksum_sha256_base64: z.nullable(z.string()),
    checksum_sha256_hex: z.nullable(z.string()),
    last_modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    upload: S3FileUploadMultipart$inboundSchema,
    version: z.nullable(z.string()),
    is_uploaded: z.boolean().default(false),
    service: FileServiceTypes$inboundSchema,
    size_readable: z.string(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "mime_type": "mimeType",
        "storage_version": "storageVersion",
        "checksum_etag": "checksumEtag",
        "checksum_sha256_base64": "checksumSha256Base64",
        "checksum_sha256_hex": "checksumSha256Hex",
        "last_modified_at": "lastModifiedAt",
        "is_uploaded": "isUploaded",
        "size_readable": "sizeReadable",
    });
});
/** @internal */
export const FileUpload$outboundSchema = z.object({
    id: z.string(),
    organizationId: z.string(),
    name: z.string(),
    path: z.string(),
    mimeType: z.string(),
    size: z.number().int(),
    storageVersion: z.nullable(z.string()),
    checksumEtag: z.nullable(z.string()),
    checksumSha256Base64: z.nullable(z.string()),
    checksumSha256Hex: z.nullable(z.string()),
    lastModifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    upload: S3FileUploadMultipart$outboundSchema,
    version: z.nullable(z.string()),
    isUploaded: z.boolean().default(false),
    service: FileServiceTypes$outboundSchema,
    sizeReadable: z.string(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        mimeType: "mime_type",
        storageVersion: "storage_version",
        checksumEtag: "checksum_etag",
        checksumSha256Base64: "checksum_sha256_base64",
        checksumSha256Hex: "checksum_sha256_hex",
        lastModifiedAt: "last_modified_at",
        isUploaded: "is_uploaded",
        sizeReadable: "size_readable",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FileUpload$;
(function (FileUpload$) {
    /** @deprecated use `FileUpload$inboundSchema` instead. */
    FileUpload$.inboundSchema = FileUpload$inboundSchema;
    /** @deprecated use `FileUpload$outboundSchema` instead. */
    FileUpload$.outboundSchema = FileUpload$outboundSchema;
})(FileUpload$ || (FileUpload$ = {}));
export function fileUploadToJSON(fileUpload) {
    return JSON.stringify(FileUpload$outboundSchema.parse(fileUpload));
}
export function fileUploadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FileUpload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileUpload' from JSON`);
}
//# sourceMappingURL=fileupload.js.map