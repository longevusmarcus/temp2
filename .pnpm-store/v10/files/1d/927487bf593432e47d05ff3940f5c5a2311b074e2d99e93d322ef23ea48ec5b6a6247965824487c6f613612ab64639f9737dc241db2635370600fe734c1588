/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
/** @internal */
export const CheckoutUpdateCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CheckoutUpdateCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutUpdateCustomFieldData$;
(function (CheckoutUpdateCustomFieldData$) {
    /** @deprecated use `CheckoutUpdateCustomFieldData$inboundSchema` instead. */
    CheckoutUpdateCustomFieldData$.inboundSchema = CheckoutUpdateCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutUpdateCustomFieldData$outboundSchema` instead. */
    CheckoutUpdateCustomFieldData$.outboundSchema = CheckoutUpdateCustomFieldData$outboundSchema;
})(CheckoutUpdateCustomFieldData$ || (CheckoutUpdateCustomFieldData$ = {}));
export function checkoutUpdateCustomFieldDataToJSON(checkoutUpdateCustomFieldData) {
    return JSON.stringify(CheckoutUpdateCustomFieldData$outboundSchema.parse(checkoutUpdateCustomFieldData));
}
export function checkoutUpdateCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutUpdateCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdateCustomFieldData' from JSON`);
}
/** @internal */
export const CheckoutUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CheckoutUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutUpdateMetadata$;
(function (CheckoutUpdateMetadata$) {
    /** @deprecated use `CheckoutUpdateMetadata$inboundSchema` instead. */
    CheckoutUpdateMetadata$.inboundSchema = CheckoutUpdateMetadata$inboundSchema;
    /** @deprecated use `CheckoutUpdateMetadata$outboundSchema` instead. */
    CheckoutUpdateMetadata$.outboundSchema = CheckoutUpdateMetadata$outboundSchema;
})(CheckoutUpdateMetadata$ || (CheckoutUpdateMetadata$ = {}));
export function checkoutUpdateMetadataToJSON(checkoutUpdateMetadata) {
    return JSON.stringify(CheckoutUpdateMetadata$outboundSchema.parse(checkoutUpdateMetadata));
}
export function checkoutUpdateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdateMetadata' from JSON`);
}
/** @internal */
export const CheckoutUpdateCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CheckoutUpdateCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutUpdateCustomerMetadata$;
(function (CheckoutUpdateCustomerMetadata$) {
    /** @deprecated use `CheckoutUpdateCustomerMetadata$inboundSchema` instead. */
    CheckoutUpdateCustomerMetadata$.inboundSchema = CheckoutUpdateCustomerMetadata$inboundSchema;
    /** @deprecated use `CheckoutUpdateCustomerMetadata$outboundSchema` instead. */
    CheckoutUpdateCustomerMetadata$.outboundSchema = CheckoutUpdateCustomerMetadata$outboundSchema;
})(CheckoutUpdateCustomerMetadata$ || (CheckoutUpdateCustomerMetadata$ = {}));
export function checkoutUpdateCustomerMetadataToJSON(checkoutUpdateCustomerMetadata) {
    return JSON.stringify(CheckoutUpdateCustomerMetadata$outboundSchema.parse(checkoutUpdateCustomerMetadata));
}
export function checkoutUpdateCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutUpdateCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdateCustomerMetadata' from JSON`);
}
/** @internal */
export const CheckoutUpdate$inboundSchema = z.object({
    custom_field_data: z.nullable(z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ])))).optional(),
    product_id: z.nullable(z.string()).optional(),
    product_price_id: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    discount_id: z.nullable(z.string()).optional(),
    allow_discount_codes: z.nullable(z.boolean()).optional(),
    customer_ip_address: z.nullable(z.string()).optional(),
    customer_metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    success_url: z.nullable(z.string()).optional(),
    embed_origin: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "custom_field_data": "customFieldData",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "customer_ip_address": "customerIpAddress",
        "customer_metadata": "customerMetadata",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
    });
});
/** @internal */
export const CheckoutUpdate$outboundSchema = z.object({
    customFieldData: z.nullable(z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ])))).optional(),
    productId: z.nullable(z.string()).optional(),
    productPriceId: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    discountId: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.nullable(z.boolean()).optional(),
    customerIpAddress: z.nullable(z.string()).optional(),
    customerMetadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    successUrl: z.nullable(z.string()).optional(),
    embedOrigin: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        customFieldData: "custom_field_data",
        productId: "product_id",
        productPriceId: "product_price_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        customerIpAddress: "customer_ip_address",
        customerMetadata: "customer_metadata",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutUpdate$;
(function (CheckoutUpdate$) {
    /** @deprecated use `CheckoutUpdate$inboundSchema` instead. */
    CheckoutUpdate$.inboundSchema = CheckoutUpdate$inboundSchema;
    /** @deprecated use `CheckoutUpdate$outboundSchema` instead. */
    CheckoutUpdate$.outboundSchema = CheckoutUpdate$outboundSchema;
})(CheckoutUpdate$ || (CheckoutUpdate$ = {}));
export function checkoutUpdateToJSON(checkoutUpdate) {
    return JSON.stringify(CheckoutUpdate$outboundSchema.parse(checkoutUpdate));
}
export function checkoutUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdate' from JSON`);
}
//# sourceMappingURL=checkoutupdate.js.map