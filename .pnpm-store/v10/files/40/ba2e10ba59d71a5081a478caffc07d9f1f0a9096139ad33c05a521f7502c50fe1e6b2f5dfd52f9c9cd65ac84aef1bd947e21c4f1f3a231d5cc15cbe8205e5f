/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DownloadableFileRead$inboundSchema, DownloadableFileRead$outboundSchema, } from "../components/downloadablefileread.js";
import { FileUploadCompleted$inboundSchema, FileUploadCompleted$outboundSchema, } from "../components/fileuploadcompleted.js";
import { OrganizationAvatarFileRead$inboundSchema, OrganizationAvatarFileRead$outboundSchema, } from "../components/organizationavatarfileread.js";
import { ProductMediaFileRead$inboundSchema, ProductMediaFileRead$outboundSchema, } from "../components/productmediafileread.js";
/** @internal */
export const FilesUploadedRequest$inboundSchema = z.object({
    id: z.string(),
    FileUploadCompleted: FileUploadCompleted$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "FileUploadCompleted": "fileUploadCompleted",
    });
});
/** @internal */
export const FilesUploadedRequest$outboundSchema = z.object({
    id: z.string(),
    fileUploadCompleted: FileUploadCompleted$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        fileUploadCompleted: "FileUploadCompleted",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FilesUploadedRequest$;
(function (FilesUploadedRequest$) {
    /** @deprecated use `FilesUploadedRequest$inboundSchema` instead. */
    FilesUploadedRequest$.inboundSchema = FilesUploadedRequest$inboundSchema;
    /** @deprecated use `FilesUploadedRequest$outboundSchema` instead. */
    FilesUploadedRequest$.outboundSchema = FilesUploadedRequest$outboundSchema;
})(FilesUploadedRequest$ || (FilesUploadedRequest$ = {}));
export function filesUploadedRequestToJSON(filesUploadedRequest) {
    return JSON.stringify(FilesUploadedRequest$outboundSchema.parse(filesUploadedRequest));
}
export function filesUploadedRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FilesUploadedRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesUploadedRequest' from JSON`);
}
/** @internal */
export const FilesUploadedResponseFilesUploaded$inboundSchema = z.union([
    DownloadableFileRead$inboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileRead$inboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileRead$inboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
]);
/** @internal */
export const FilesUploadedResponseFilesUploaded$outboundSchema = z.union([
    DownloadableFileRead$outboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileRead$outboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileRead$outboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FilesUploadedResponseFilesUploaded$;
(function (FilesUploadedResponseFilesUploaded$) {
    /** @deprecated use `FilesUploadedResponseFilesUploaded$inboundSchema` instead. */
    FilesUploadedResponseFilesUploaded$.inboundSchema = FilesUploadedResponseFilesUploaded$inboundSchema;
    /** @deprecated use `FilesUploadedResponseFilesUploaded$outboundSchema` instead. */
    FilesUploadedResponseFilesUploaded$.outboundSchema = FilesUploadedResponseFilesUploaded$outboundSchema;
})(FilesUploadedResponseFilesUploaded$ || (FilesUploadedResponseFilesUploaded$ = {}));
export function filesUploadedResponseFilesUploadedToJSON(filesUploadedResponseFilesUploaded) {
    return JSON.stringify(FilesUploadedResponseFilesUploaded$outboundSchema.parse(filesUploadedResponseFilesUploaded));
}
export function filesUploadedResponseFilesUploadedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FilesUploadedResponseFilesUploaded$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesUploadedResponseFilesUploaded' from JSON`);
}
//# sourceMappingURL=filesuploaded.js.map