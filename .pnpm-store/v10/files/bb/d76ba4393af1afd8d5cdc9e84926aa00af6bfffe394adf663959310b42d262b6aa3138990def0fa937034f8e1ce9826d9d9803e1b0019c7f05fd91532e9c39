/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DiscountDuration$inboundSchema, DiscountDuration$outboundSchema, } from "./discountduration.js";
import { DiscountType$inboundSchema, DiscountType$outboundSchema, } from "./discounttype.js";
/** @internal */
export const DiscountFixedRepeatDurationBaseMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const DiscountFixedRepeatDurationBaseMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountFixedRepeatDurationBaseMetadata$;
(function (DiscountFixedRepeatDurationBaseMetadata$) {
    /** @deprecated use `DiscountFixedRepeatDurationBaseMetadata$inboundSchema` instead. */
    DiscountFixedRepeatDurationBaseMetadata$.inboundSchema = DiscountFixedRepeatDurationBaseMetadata$inboundSchema;
    /** @deprecated use `DiscountFixedRepeatDurationBaseMetadata$outboundSchema` instead. */
    DiscountFixedRepeatDurationBaseMetadata$.outboundSchema = DiscountFixedRepeatDurationBaseMetadata$outboundSchema;
})(DiscountFixedRepeatDurationBaseMetadata$ || (DiscountFixedRepeatDurationBaseMetadata$ = {}));
export function discountFixedRepeatDurationBaseMetadataToJSON(discountFixedRepeatDurationBaseMetadata) {
    return JSON.stringify(DiscountFixedRepeatDurationBaseMetadata$outboundSchema.parse(discountFixedRepeatDurationBaseMetadata));
}
export function discountFixedRepeatDurationBaseMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountFixedRepeatDurationBaseMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountFixedRepeatDurationBaseMetadata' from JSON`);
}
/** @internal */
export const DiscountFixedRepeatDurationBase$inboundSchema = z.object({
    duration: DiscountDuration$inboundSchema,
    duration_in_months: z.number().int(),
    type: DiscountType$inboundSchema,
    amount: z.number().int(),
    currency: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    name: z.string(),
    code: z.nullable(z.string()),
    starts_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    max_redemptions: z.nullable(z.number().int()),
    redemptions_count: z.number().int(),
    organization_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "duration_in_months": "durationInMonths",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "starts_at": "startsAt",
        "ends_at": "endsAt",
        "max_redemptions": "maxRedemptions",
        "redemptions_count": "redemptionsCount",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const DiscountFixedRepeatDurationBase$outboundSchema = z.object({
    duration: DiscountDuration$outboundSchema,
    durationInMonths: z.number().int(),
    type: DiscountType$outboundSchema,
    amount: z.number().int(),
    currency: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    name: z.string(),
    code: z.nullable(z.string()),
    startsAt: z.nullable(z.date().transform(v => v.toISOString())),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())),
    maxRedemptions: z.nullable(z.number().int()),
    redemptionsCount: z.number().int(),
    organizationId: z.string(),
}).transform((v) => {
    return remap$(v, {
        durationInMonths: "duration_in_months",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        startsAt: "starts_at",
        endsAt: "ends_at",
        maxRedemptions: "max_redemptions",
        redemptionsCount: "redemptions_count",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountFixedRepeatDurationBase$;
(function (DiscountFixedRepeatDurationBase$) {
    /** @deprecated use `DiscountFixedRepeatDurationBase$inboundSchema` instead. */
    DiscountFixedRepeatDurationBase$.inboundSchema = DiscountFixedRepeatDurationBase$inboundSchema;
    /** @deprecated use `DiscountFixedRepeatDurationBase$outboundSchema` instead. */
    DiscountFixedRepeatDurationBase$.outboundSchema = DiscountFixedRepeatDurationBase$outboundSchema;
})(DiscountFixedRepeatDurationBase$ || (DiscountFixedRepeatDurationBase$ = {}));
export function discountFixedRepeatDurationBaseToJSON(discountFixedRepeatDurationBase) {
    return JSON.stringify(DiscountFixedRepeatDurationBase$outboundSchema.parse(discountFixedRepeatDurationBase));
}
export function discountFixedRepeatDurationBaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountFixedRepeatDurationBase$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountFixedRepeatDurationBase' from JSON`);
}
//# sourceMappingURL=discountfixedrepeatdurationbase.js.map