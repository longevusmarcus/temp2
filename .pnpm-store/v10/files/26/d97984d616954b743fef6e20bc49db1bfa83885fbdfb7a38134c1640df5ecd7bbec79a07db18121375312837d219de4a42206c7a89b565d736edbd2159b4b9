/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const LicenseKeyUser$inboundSchema = z.object({
    id: z.string(),
    email: z.string(),
    public_name: z.string(),
    avatar_url: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "public_name": "publicName",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
export const LicenseKeyUser$outboundSchema = z.object({
    id: z.string(),
    email: z.string(),
    publicName: z.string(),
    avatarUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        publicName: "public_name",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeyUser$;
(function (LicenseKeyUser$) {
    /** @deprecated use `LicenseKeyUser$inboundSchema` instead. */
    LicenseKeyUser$.inboundSchema = LicenseKeyUser$inboundSchema;
    /** @deprecated use `LicenseKeyUser$outboundSchema` instead. */
    LicenseKeyUser$.outboundSchema = LicenseKeyUser$outboundSchema;
})(LicenseKeyUser$ || (LicenseKeyUser$ = {}));
export function licenseKeyUserToJSON(licenseKeyUser) {
    return JSON.stringify(LicenseKeyUser$outboundSchema.parse(licenseKeyUser));
}
export function licenseKeyUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeyUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyUser' from JSON`);
}
//# sourceMappingURL=licensekeyuser.js.map