/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
export const TokenTypeHint = {
    AccessToken: "access_token",
    RefreshToken: "refresh_token",
};
/** @internal */
export const TokenTypeHint$inboundSchema = z.nativeEnum(TokenTypeHint);
/** @internal */
export const TokenTypeHint$outboundSchema = TokenTypeHint$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TokenTypeHint$;
(function (TokenTypeHint$) {
    /** @deprecated use `TokenTypeHint$inboundSchema` instead. */
    TokenTypeHint$.inboundSchema = TokenTypeHint$inboundSchema;
    /** @deprecated use `TokenTypeHint$outboundSchema` instead. */
    TokenTypeHint$.outboundSchema = TokenTypeHint$outboundSchema;
})(TokenTypeHint$ || (TokenTypeHint$ = {}));
/** @internal */
export const RevokeTokenRequest$inboundSchema = z.object({
    token: z.string(),
    token_type_hint: z.nullable(TokenTypeHint$inboundSchema).optional(),
    client_id: z.string(),
    client_secret: z.string(),
}).transform((v) => {
    return remap$(v, {
        "token_type_hint": "tokenTypeHint",
        "client_id": "clientId",
        "client_secret": "clientSecret",
    });
});
/** @internal */
export const RevokeTokenRequest$outboundSchema = z.object({
    token: z.string(),
    tokenTypeHint: z.nullable(TokenTypeHint$outboundSchema).optional(),
    clientId: z.string(),
    clientSecret: z.string(),
}).transform((v) => {
    return remap$(v, {
        tokenTypeHint: "token_type_hint",
        clientId: "client_id",
        clientSecret: "client_secret",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RevokeTokenRequest$;
(function (RevokeTokenRequest$) {
    /** @deprecated use `RevokeTokenRequest$inboundSchema` instead. */
    RevokeTokenRequest$.inboundSchema = RevokeTokenRequest$inboundSchema;
    /** @deprecated use `RevokeTokenRequest$outboundSchema` instead. */
    RevokeTokenRequest$.outboundSchema = RevokeTokenRequest$outboundSchema;
})(RevokeTokenRequest$ || (RevokeTokenRequest$ = {}));
export function revokeTokenRequestToJSON(revokeTokenRequest) {
    return JSON.stringify(RevokeTokenRequest$outboundSchema.parse(revokeTokenRequest));
}
export function revokeTokenRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RevokeTokenRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RevokeTokenRequest' from JSON`);
}
//# sourceMappingURL=revoketokenrequest.js.map