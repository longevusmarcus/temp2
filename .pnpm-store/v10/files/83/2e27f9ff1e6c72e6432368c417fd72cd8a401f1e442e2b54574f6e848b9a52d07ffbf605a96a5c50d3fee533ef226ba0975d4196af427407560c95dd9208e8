/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DiscountDuration$inboundSchema, DiscountDuration$outboundSchema, } from "./discountduration.js";
import { DiscountType$inboundSchema, DiscountType$outboundSchema, } from "./discounttype.js";
/** @internal */
export const DiscountUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const DiscountUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountUpdateMetadata$;
(function (DiscountUpdateMetadata$) {
    /** @deprecated use `DiscountUpdateMetadata$inboundSchema` instead. */
    DiscountUpdateMetadata$.inboundSchema = DiscountUpdateMetadata$inboundSchema;
    /** @deprecated use `DiscountUpdateMetadata$outboundSchema` instead. */
    DiscountUpdateMetadata$.outboundSchema = DiscountUpdateMetadata$outboundSchema;
})(DiscountUpdateMetadata$ || (DiscountUpdateMetadata$ = {}));
export function discountUpdateMetadataToJSON(discountUpdateMetadata) {
    return JSON.stringify(DiscountUpdateMetadata$outboundSchema.parse(discountUpdateMetadata));
}
export function discountUpdateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountUpdateMetadata' from JSON`);
}
/** @internal */
export const DiscountUpdate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    code: z.nullable(z.string()).optional(),
    starts_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    max_redemptions: z.nullable(z.number().int()).optional(),
    duration: z.nullable(DiscountDuration$inboundSchema).optional(),
    duration_in_months: z.nullable(z.number().int()).optional(),
    type: z.nullable(DiscountType$inboundSchema).optional(),
    amount: z.nullable(z.number().int()).optional(),
    currency: z.nullable(z.string().default("usd")),
    basis_points: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
    return remap$(v, {
        "starts_at": "startsAt",
        "ends_at": "endsAt",
        "max_redemptions": "maxRedemptions",
        "duration_in_months": "durationInMonths",
        "basis_points": "basisPoints",
    });
});
/** @internal */
export const DiscountUpdate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    code: z.nullable(z.string()).optional(),
    startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    maxRedemptions: z.nullable(z.number().int()).optional(),
    duration: z.nullable(DiscountDuration$outboundSchema).optional(),
    durationInMonths: z.nullable(z.number().int()).optional(),
    type: z.nullable(DiscountType$outboundSchema).optional(),
    amount: z.nullable(z.number().int()).optional(),
    currency: z.nullable(z.string().default("usd")),
    basisPoints: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
    return remap$(v, {
        startsAt: "starts_at",
        endsAt: "ends_at",
        maxRedemptions: "max_redemptions",
        durationInMonths: "duration_in_months",
        basisPoints: "basis_points",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountUpdate$;
(function (DiscountUpdate$) {
    /** @deprecated use `DiscountUpdate$inboundSchema` instead. */
    DiscountUpdate$.inboundSchema = DiscountUpdate$inboundSchema;
    /** @deprecated use `DiscountUpdate$outboundSchema` instead. */
    DiscountUpdate$.outboundSchema = DiscountUpdate$outboundSchema;
})(DiscountUpdate$ || (DiscountUpdate$ = {}));
export function discountUpdateToJSON(discountUpdate) {
    return JSON.stringify(DiscountUpdate$outboundSchema.parse(discountUpdate));
}
export function discountUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountUpdate' from JSON`);
}
//# sourceMappingURL=discountupdate.js.map