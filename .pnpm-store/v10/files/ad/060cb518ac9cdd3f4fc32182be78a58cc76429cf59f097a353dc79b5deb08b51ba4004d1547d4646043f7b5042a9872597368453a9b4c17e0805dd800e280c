"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerCreate$ = exports.CustomerCreate$outboundSchema = exports.CustomerCreate$inboundSchema = exports.CustomerCreateTaxId$ = exports.CustomerCreateTaxId$outboundSchema = exports.CustomerCreateTaxId$inboundSchema = exports.CustomerCreateMetadata$ = exports.CustomerCreateMetadata$outboundSchema = exports.CustomerCreateMetadata$inboundSchema = void 0;
exports.customerCreateMetadataToJSON = customerCreateMetadataToJSON;
exports.customerCreateMetadataFromJSON = customerCreateMetadataFromJSON;
exports.customerCreateTaxIdToJSON = customerCreateTaxIdToJSON;
exports.customerCreateTaxIdFromJSON = customerCreateTaxIdFromJSON;
exports.customerCreateToJSON = customerCreateToJSON;
exports.customerCreateFromJSON = customerCreateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
const taxidformat_js_1 = require("./taxidformat.js");
/** @internal */
exports.CustomerCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.CustomerCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerCreateMetadata$;
(function (CustomerCreateMetadata$) {
    /** @deprecated use `CustomerCreateMetadata$inboundSchema` instead. */
    CustomerCreateMetadata$.inboundSchema = exports.CustomerCreateMetadata$inboundSchema;
    /** @deprecated use `CustomerCreateMetadata$outboundSchema` instead. */
    CustomerCreateMetadata$.outboundSchema = exports.CustomerCreateMetadata$outboundSchema;
})(CustomerCreateMetadata$ || (exports.CustomerCreateMetadata$ = CustomerCreateMetadata$ = {}));
function customerCreateMetadataToJSON(customerCreateMetadata) {
    return JSON.stringify(exports.CustomerCreateMetadata$outboundSchema.parse(customerCreateMetadata));
}
function customerCreateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerCreateMetadata' from JSON`);
}
/** @internal */
exports.CustomerCreateTaxId$inboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema]);
/** @internal */
exports.CustomerCreateTaxId$outboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerCreateTaxId$;
(function (CustomerCreateTaxId$) {
    /** @deprecated use `CustomerCreateTaxId$inboundSchema` instead. */
    CustomerCreateTaxId$.inboundSchema = exports.CustomerCreateTaxId$inboundSchema;
    /** @deprecated use `CustomerCreateTaxId$outboundSchema` instead. */
    CustomerCreateTaxId$.outboundSchema = exports.CustomerCreateTaxId$outboundSchema;
})(CustomerCreateTaxId$ || (exports.CustomerCreateTaxId$ = CustomerCreateTaxId$ = {}));
function customerCreateTaxIdToJSON(customerCreateTaxId) {
    return JSON.stringify(exports.CustomerCreateTaxId$outboundSchema.parse(customerCreateTaxId));
}
function customerCreateTaxIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerCreateTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerCreateTaxId' from JSON`);
}
/** @internal */
exports.CustomerCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    external_id: z.nullable(z.string()).optional(),
    email: z.string(),
    name: z.nullable(z.string()).optional(),
    billing_address: z.nullable(address_js_1.Address$inboundSchema).optional(),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema])))).optional(),
    organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "external_id": "externalId",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.CustomerCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    externalId: z.nullable(z.string()).optional(),
    email: z.string(),
    name: z.nullable(z.string()).optional(),
    billingAddress: z.nullable(address_js_1.Address$outboundSchema).optional(),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema])))).optional(),
    organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        externalId: "external_id",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerCreate$;
(function (CustomerCreate$) {
    /** @deprecated use `CustomerCreate$inboundSchema` instead. */
    CustomerCreate$.inboundSchema = exports.CustomerCreate$inboundSchema;
    /** @deprecated use `CustomerCreate$outboundSchema` instead. */
    CustomerCreate$.outboundSchema = exports.CustomerCreate$outboundSchema;
})(CustomerCreate$ || (exports.CustomerCreate$ = CustomerCreate$ = {}));
function customerCreateToJSON(customerCreate) {
    return JSON.stringify(exports.CustomerCreate$outboundSchema.parse(customerCreate));
}
function customerCreateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerCreate' from JSON`);
}
//# sourceMappingURL=customercreate.js.map