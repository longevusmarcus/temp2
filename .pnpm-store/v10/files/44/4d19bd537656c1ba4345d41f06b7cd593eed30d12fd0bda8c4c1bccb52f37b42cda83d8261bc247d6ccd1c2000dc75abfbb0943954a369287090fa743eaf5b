/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CheckoutSortProperty$inboundSchema, CheckoutSortProperty$outboundSchema, } from "../components/checkoutsortproperty.js";
import { ListResourceCheckout$inboundSchema, ListResourceCheckout$outboundSchema, } from "../components/listresourcecheckout.js";
/** @internal */
export const CheckoutsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CheckoutsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutsListQueryParamOrganizationIDFilter$;
(function (CheckoutsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `CheckoutsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    CheckoutsListQueryParamOrganizationIDFilter$.inboundSchema = CheckoutsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `CheckoutsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    CheckoutsListQueryParamOrganizationIDFilter$.outboundSchema = CheckoutsListQueryParamOrganizationIDFilter$outboundSchema;
})(CheckoutsListQueryParamOrganizationIDFilter$ || (CheckoutsListQueryParamOrganizationIDFilter$ = {}));
export function checkoutsListQueryParamOrganizationIDFilterToJSON(checkoutsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(CheckoutsListQueryParamOrganizationIDFilter$outboundSchema.parse(checkoutsListQueryParamOrganizationIDFilter));
}
export function checkoutsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const CheckoutsListQueryParamProductIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CheckoutsListQueryParamProductIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutsListQueryParamProductIDFilter$;
(function (CheckoutsListQueryParamProductIDFilter$) {
    /** @deprecated use `CheckoutsListQueryParamProductIDFilter$inboundSchema` instead. */
    CheckoutsListQueryParamProductIDFilter$.inboundSchema = CheckoutsListQueryParamProductIDFilter$inboundSchema;
    /** @deprecated use `CheckoutsListQueryParamProductIDFilter$outboundSchema` instead. */
    CheckoutsListQueryParamProductIDFilter$.outboundSchema = CheckoutsListQueryParamProductIDFilter$outboundSchema;
})(CheckoutsListQueryParamProductIDFilter$ || (CheckoutsListQueryParamProductIDFilter$ = {}));
export function checkoutsListQueryParamProductIDFilterToJSON(checkoutsListQueryParamProductIDFilter) {
    return JSON.stringify(CheckoutsListQueryParamProductIDFilter$outboundSchema.parse(checkoutsListQueryParamProductIDFilter));
}
export function checkoutsListQueryParamProductIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutsListQueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutsListQueryParamProductIDFilter' from JSON`);
}
/** @internal */
export const CheckoutsListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CheckoutSortProperty$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "product_id": "productId",
    });
});
/** @internal */
export const CheckoutsListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CheckoutSortProperty$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        productId: "product_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutsListRequest$;
(function (CheckoutsListRequest$) {
    /** @deprecated use `CheckoutsListRequest$inboundSchema` instead. */
    CheckoutsListRequest$.inboundSchema = CheckoutsListRequest$inboundSchema;
    /** @deprecated use `CheckoutsListRequest$outboundSchema` instead. */
    CheckoutsListRequest$.outboundSchema = CheckoutsListRequest$outboundSchema;
})(CheckoutsListRequest$ || (CheckoutsListRequest$ = {}));
export function checkoutsListRequestToJSON(checkoutsListRequest) {
    return JSON.stringify(CheckoutsListRequest$outboundSchema.parse(checkoutsListRequest));
}
export function checkoutsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutsListRequest' from JSON`);
}
/** @internal */
export const CheckoutsListResponse$inboundSchema = z.object({
    Result: ListResourceCheckout$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const CheckoutsListResponse$outboundSchema = z.object({
    result: ListResourceCheckout$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutsListResponse$;
(function (CheckoutsListResponse$) {
    /** @deprecated use `CheckoutsListResponse$inboundSchema` instead. */
    CheckoutsListResponse$.inboundSchema = CheckoutsListResponse$inboundSchema;
    /** @deprecated use `CheckoutsListResponse$outboundSchema` instead. */
    CheckoutsListResponse$.outboundSchema = CheckoutsListResponse$outboundSchema;
})(CheckoutsListResponse$ || (CheckoutsListResponse$ = {}));
export function checkoutsListResponseToJSON(checkoutsListResponse) {
    return JSON.stringify(CheckoutsListResponse$outboundSchema.parse(checkoutsListResponse));
}
export function checkoutsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutsListResponse' from JSON`);
}
//# sourceMappingURL=checkoutslist.js.map