/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { LicenseKeyUpdate$inboundSchema, LicenseKeyUpdate$outboundSchema, } from "../components/licensekeyupdate.js";
/** @internal */
export const LicenseKeysUpdateRequest$inboundSchema = z.object({
    id: z.string(),
    LicenseKeyUpdate: LicenseKeyUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "LicenseKeyUpdate": "licenseKeyUpdate",
    });
});
/** @internal */
export const LicenseKeysUpdateRequest$outboundSchema = z.object({
    id: z.string(),
    licenseKeyUpdate: LicenseKeyUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        licenseKeyUpdate: "LicenseKeyUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeysUpdateRequest$;
(function (LicenseKeysUpdateRequest$) {
    /** @deprecated use `LicenseKeysUpdateRequest$inboundSchema` instead. */
    LicenseKeysUpdateRequest$.inboundSchema = LicenseKeysUpdateRequest$inboundSchema;
    /** @deprecated use `LicenseKeysUpdateRequest$outboundSchema` instead. */
    LicenseKeysUpdateRequest$.outboundSchema = LicenseKeysUpdateRequest$outboundSchema;
})(LicenseKeysUpdateRequest$ || (LicenseKeysUpdateRequest$ = {}));
export function licenseKeysUpdateRequestToJSON(licenseKeysUpdateRequest) {
    return JSON.stringify(LicenseKeysUpdateRequest$outboundSchema.parse(licenseKeysUpdateRequest));
}
export function licenseKeysUpdateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeysUpdateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeysUpdateRequest' from JSON`);
}
//# sourceMappingURL=licensekeysupdate.js.map