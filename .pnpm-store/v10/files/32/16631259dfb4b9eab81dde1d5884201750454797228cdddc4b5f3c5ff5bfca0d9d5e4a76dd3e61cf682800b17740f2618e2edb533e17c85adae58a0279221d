"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicenseKeyCustomer$ = exports.LicenseKeyCustomer$outboundSchema = exports.LicenseKeyCustomer$inboundSchema = exports.LicenseKeyCustomerTaxId$ = exports.LicenseKeyCustomerTaxId$outboundSchema = exports.LicenseKeyCustomerTaxId$inboundSchema = exports.LicenseKeyCustomerMetadata$ = exports.LicenseKeyCustomerMetadata$outboundSchema = exports.LicenseKeyCustomerMetadata$inboundSchema = void 0;
exports.licenseKeyCustomerMetadataToJSON = licenseKeyCustomerMetadataToJSON;
exports.licenseKeyCustomerMetadataFromJSON = licenseKeyCustomerMetadataFromJSON;
exports.licenseKeyCustomerTaxIdToJSON = licenseKeyCustomerTaxIdToJSON;
exports.licenseKeyCustomerTaxIdFromJSON = licenseKeyCustomerTaxIdFromJSON;
exports.licenseKeyCustomerToJSON = licenseKeyCustomerToJSON;
exports.licenseKeyCustomerFromJSON = licenseKeyCustomerFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
const taxidformat_js_1 = require("./taxidformat.js");
/** @internal */
exports.LicenseKeyCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.LicenseKeyCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseKeyCustomerMetadata$;
(function (LicenseKeyCustomerMetadata$) {
    /** @deprecated use `LicenseKeyCustomerMetadata$inboundSchema` instead. */
    LicenseKeyCustomerMetadata$.inboundSchema = exports.LicenseKeyCustomerMetadata$inboundSchema;
    /** @deprecated use `LicenseKeyCustomerMetadata$outboundSchema` instead. */
    LicenseKeyCustomerMetadata$.outboundSchema = exports.LicenseKeyCustomerMetadata$outboundSchema;
})(LicenseKeyCustomerMetadata$ || (exports.LicenseKeyCustomerMetadata$ = LicenseKeyCustomerMetadata$ = {}));
function licenseKeyCustomerMetadataToJSON(licenseKeyCustomerMetadata) {
    return JSON.stringify(exports.LicenseKeyCustomerMetadata$outboundSchema.parse(licenseKeyCustomerMetadata));
}
function licenseKeyCustomerMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LicenseKeyCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyCustomerMetadata' from JSON`);
}
/** @internal */
exports.LicenseKeyCustomerTaxId$inboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema]);
/** @internal */
exports.LicenseKeyCustomerTaxId$outboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseKeyCustomerTaxId$;
(function (LicenseKeyCustomerTaxId$) {
    /** @deprecated use `LicenseKeyCustomerTaxId$inboundSchema` instead. */
    LicenseKeyCustomerTaxId$.inboundSchema = exports.LicenseKeyCustomerTaxId$inboundSchema;
    /** @deprecated use `LicenseKeyCustomerTaxId$outboundSchema` instead. */
    LicenseKeyCustomerTaxId$.outboundSchema = exports.LicenseKeyCustomerTaxId$outboundSchema;
})(LicenseKeyCustomerTaxId$ || (exports.LicenseKeyCustomerTaxId$ = LicenseKeyCustomerTaxId$ = {}));
function licenseKeyCustomerTaxIdToJSON(licenseKeyCustomerTaxId) {
    return JSON.stringify(exports.LicenseKeyCustomerTaxId$outboundSchema.parse(licenseKeyCustomerTaxId));
}
function licenseKeyCustomerTaxIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LicenseKeyCustomerTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyCustomerTaxId' from JSON`);
}
/** @internal */
exports.LicenseKeyCustomer$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    external_id: z.nullable(z.string()),
    email: z.string(),
    email_verified: z.boolean(),
    name: z.nullable(z.string()),
    billing_address: z.nullable(address_js_1.Address$inboundSchema),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema])))),
    organization_id: z.string(),
    deleted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    avatar_url: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "external_id": "externalId",
        "email_verified": "emailVerified",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
        "deleted_at": "deletedAt",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
exports.LicenseKeyCustomer$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    externalId: z.nullable(z.string()),
    email: z.string(),
    emailVerified: z.boolean(),
    name: z.nullable(z.string()),
    billingAddress: z.nullable(address_js_1.Address$outboundSchema),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema])))),
    organizationId: z.string(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
    avatarUrl: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        externalId: "external_id",
        emailVerified: "email_verified",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
        deletedAt: "deleted_at",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseKeyCustomer$;
(function (LicenseKeyCustomer$) {
    /** @deprecated use `LicenseKeyCustomer$inboundSchema` instead. */
    LicenseKeyCustomer$.inboundSchema = exports.LicenseKeyCustomer$inboundSchema;
    /** @deprecated use `LicenseKeyCustomer$outboundSchema` instead. */
    LicenseKeyCustomer$.outboundSchema = exports.LicenseKeyCustomer$outboundSchema;
})(LicenseKeyCustomer$ || (exports.LicenseKeyCustomer$ = LicenseKeyCustomer$ = {}));
function licenseKeyCustomerToJSON(licenseKeyCustomer) {
    return JSON.stringify(exports.LicenseKeyCustomer$outboundSchema.parse(licenseKeyCustomer));
}
function licenseKeyCustomerFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LicenseKeyCustomer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeyCustomer' from JSON`);
}
//# sourceMappingURL=licensekeycustomer.js.map