/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldSelectProperties$inboundSchema, CustomFieldSelectProperties$outboundSchema, } from "./customfieldselectproperties.js";
/** @internal */
export const CustomFieldCreateSelectMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomFieldCreateSelectMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldCreateSelectMetadata$;
(function (CustomFieldCreateSelectMetadata$) {
    /** @deprecated use `CustomFieldCreateSelectMetadata$inboundSchema` instead. */
    CustomFieldCreateSelectMetadata$.inboundSchema = CustomFieldCreateSelectMetadata$inboundSchema;
    /** @deprecated use `CustomFieldCreateSelectMetadata$outboundSchema` instead. */
    CustomFieldCreateSelectMetadata$.outboundSchema = CustomFieldCreateSelectMetadata$outboundSchema;
})(CustomFieldCreateSelectMetadata$ || (CustomFieldCreateSelectMetadata$ = {}));
export function customFieldCreateSelectMetadataToJSON(customFieldCreateSelectMetadata) {
    return JSON.stringify(CustomFieldCreateSelectMetadata$outboundSchema.parse(customFieldCreateSelectMetadata));
}
export function customFieldCreateSelectMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldCreateSelectMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldCreateSelectMetadata' from JSON`);
}
/** @internal */
export const CustomFieldCreateSelect$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    type: z.literal("select").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.nullable(z.string()).optional(),
    properties: CustomFieldSelectProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CustomFieldCreateSelect$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    type: z.literal("select").default("select"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.nullable(z.string()).optional(),
    properties: CustomFieldSelectProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldCreateSelect$;
(function (CustomFieldCreateSelect$) {
    /** @deprecated use `CustomFieldCreateSelect$inboundSchema` instead. */
    CustomFieldCreateSelect$.inboundSchema = CustomFieldCreateSelect$inboundSchema;
    /** @deprecated use `CustomFieldCreateSelect$outboundSchema` instead. */
    CustomFieldCreateSelect$.outboundSchema = CustomFieldCreateSelect$outboundSchema;
})(CustomFieldCreateSelect$ || (CustomFieldCreateSelect$ = {}));
export function customFieldCreateSelectToJSON(customFieldCreateSelect) {
    return JSON.stringify(CustomFieldCreateSelect$outboundSchema.parse(customFieldCreateSelect));
}
export function customFieldCreateSelectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldCreateSelect$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldCreateSelect' from JSON`);
}
//# sourceMappingURL=customfieldcreateselect.js.map