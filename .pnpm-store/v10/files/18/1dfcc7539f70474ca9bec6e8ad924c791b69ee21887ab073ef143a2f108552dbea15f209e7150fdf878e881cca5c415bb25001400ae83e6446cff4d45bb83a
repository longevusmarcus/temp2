import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldDateProperties, CustomFieldDateProperties$Outbound } from "./customfielddateproperties.js";
export type CustomFieldUpdateDateMetadata = string | number | boolean;
/**
 * Schema to update a custom field of type date.
 */
export type CustomFieldUpdateDate = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | null | undefined;
    name?: string | null | undefined;
    slug?: string | null | undefined;
    type?: "date" | undefined;
    properties?: CustomFieldDateProperties | null | undefined;
};
/** @internal */
export declare const CustomFieldUpdateDateMetadata$inboundSchema: z.ZodType<CustomFieldUpdateDateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldUpdateDateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldUpdateDateMetadata$outboundSchema: z.ZodType<CustomFieldUpdateDateMetadata$Outbound, z.ZodTypeDef, CustomFieldUpdateDateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldUpdateDateMetadata$ {
    /** @deprecated use `CustomFieldUpdateDateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldUpdateDateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldUpdateDateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldUpdateDateMetadata$Outbound, z.ZodTypeDef, CustomFieldUpdateDateMetadata>;
    /** @deprecated use `CustomFieldUpdateDateMetadata$Outbound` instead. */
    type Outbound = CustomFieldUpdateDateMetadata$Outbound;
}
export declare function customFieldUpdateDateMetadataToJSON(customFieldUpdateDateMetadata: CustomFieldUpdateDateMetadata): string;
export declare function customFieldUpdateDateMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldUpdateDateMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldUpdateDate$inboundSchema: z.ZodType<CustomFieldUpdateDate, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldUpdateDate$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | null | undefined;
    name?: string | null | undefined;
    slug?: string | null | undefined;
    type: "date";
    properties?: CustomFieldDateProperties$Outbound | null | undefined;
};
/** @internal */
export declare const CustomFieldUpdateDate$outboundSchema: z.ZodType<CustomFieldUpdateDate$Outbound, z.ZodTypeDef, CustomFieldUpdateDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldUpdateDate$ {
    /** @deprecated use `CustomFieldUpdateDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldUpdateDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldUpdateDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldUpdateDate$Outbound, z.ZodTypeDef, CustomFieldUpdateDate>;
    /** @deprecated use `CustomFieldUpdateDate$Outbound` instead. */
    type Outbound = CustomFieldUpdateDate$Outbound;
}
export declare function customFieldUpdateDateToJSON(customFieldUpdateDate: CustomFieldUpdateDate): string;
export declare function customFieldUpdateDateFromJSON(jsonString: string): SafeParseResult<CustomFieldUpdateDate, SDKValidationError>;
//# sourceMappingURL=customfieldupdatedate.d.ts.map