/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { CustomerStateBenefitGrant$inboundSchema, CustomerStateBenefitGrant$outboundSchema, } from "./customerstatebenefitgrant.js";
import { CustomerStateSubscription$inboundSchema, CustomerStateSubscription$outboundSchema, } from "./customerstatesubscription.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const CustomerStateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomerStateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerStateMetadata$;
(function (CustomerStateMetadata$) {
    /** @deprecated use `CustomerStateMetadata$inboundSchema` instead. */
    CustomerStateMetadata$.inboundSchema = CustomerStateMetadata$inboundSchema;
    /** @deprecated use `CustomerStateMetadata$outboundSchema` instead. */
    CustomerStateMetadata$.outboundSchema = CustomerStateMetadata$outboundSchema;
})(CustomerStateMetadata$ || (CustomerStateMetadata$ = {}));
export function customerStateMetadataToJSON(customerStateMetadata) {
    return JSON.stringify(CustomerStateMetadata$outboundSchema.parse(customerStateMetadata));
}
export function customerStateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerStateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateMetadata' from JSON`);
}
/** @internal */
export const CustomerStateTaxId$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const CustomerStateTaxId$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerStateTaxId$;
(function (CustomerStateTaxId$) {
    /** @deprecated use `CustomerStateTaxId$inboundSchema` instead. */
    CustomerStateTaxId$.inboundSchema = CustomerStateTaxId$inboundSchema;
    /** @deprecated use `CustomerStateTaxId$outboundSchema` instead. */
    CustomerStateTaxId$.outboundSchema = CustomerStateTaxId$outboundSchema;
})(CustomerStateTaxId$ || (CustomerStateTaxId$ = {}));
export function customerStateTaxIdToJSON(customerStateTaxId) {
    return JSON.stringify(CustomerStateTaxId$outboundSchema.parse(customerStateTaxId));
}
export function customerStateTaxIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerStateTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateTaxId' from JSON`);
}
/** @internal */
export const CustomerState$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    external_id: z.nullable(z.string()),
    email: z.string(),
    email_verified: z.boolean(),
    name: z.nullable(z.string()),
    billing_address: z.nullable(Address$inboundSchema),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))),
    organization_id: z.string(),
    deleted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    active_subscriptions: z.array(CustomerStateSubscription$inboundSchema),
    granted_benefits: z.array(CustomerStateBenefitGrant$inboundSchema),
    avatar_url: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "external_id": "externalId",
        "email_verified": "emailVerified",
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "organization_id": "organizationId",
        "deleted_at": "deletedAt",
        "active_subscriptions": "activeSubscriptions",
        "granted_benefits": "grantedBenefits",
        "avatar_url": "avatarUrl",
    });
});
/** @internal */
export const CustomerState$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    externalId: z.nullable(z.string()),
    email: z.string(),
    emailVerified: z.boolean(),
    name: z.nullable(z.string()),
    billingAddress: z.nullable(Address$outboundSchema),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))),
    organizationId: z.string(),
    deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
    activeSubscriptions: z.array(CustomerStateSubscription$outboundSchema),
    grantedBenefits: z.array(CustomerStateBenefitGrant$outboundSchema),
    avatarUrl: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        externalId: "external_id",
        emailVerified: "email_verified",
        billingAddress: "billing_address",
        taxId: "tax_id",
        organizationId: "organization_id",
        deletedAt: "deleted_at",
        activeSubscriptions: "active_subscriptions",
        grantedBenefits: "granted_benefits",
        avatarUrl: "avatar_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerState$;
(function (CustomerState$) {
    /** @deprecated use `CustomerState$inboundSchema` instead. */
    CustomerState$.inboundSchema = CustomerState$inboundSchema;
    /** @deprecated use `CustomerState$outboundSchema` instead. */
    CustomerState$.outboundSchema = CustomerState$outboundSchema;
})(CustomerState$ || (CustomerState$ = {}));
export function customerStateToJSON(customerState) {
    return JSON.stringify(CustomerState$outboundSchema.parse(customerState));
}
export function customerStateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerState$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerState' from JSON`);
}
//# sourceMappingURL=customerstate.js.map