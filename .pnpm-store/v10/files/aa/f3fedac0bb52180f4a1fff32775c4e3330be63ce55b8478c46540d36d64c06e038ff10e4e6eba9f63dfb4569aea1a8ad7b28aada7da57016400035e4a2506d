/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DiscountDuration$inboundSchema, DiscountDuration$outboundSchema, } from "./discountduration.js";
import { DiscountType$inboundSchema, DiscountType$outboundSchema, } from "./discounttype.js";
/** @internal */
export const DiscountPercentageOnceForeverDurationBaseMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const DiscountPercentageOnceForeverDurationBaseMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountPercentageOnceForeverDurationBaseMetadata$;
(function (DiscountPercentageOnceForeverDurationBaseMetadata$) {
    /** @deprecated use `DiscountPercentageOnceForeverDurationBaseMetadata$inboundSchema` instead. */
    DiscountPercentageOnceForeverDurationBaseMetadata$.inboundSchema = DiscountPercentageOnceForeverDurationBaseMetadata$inboundSchema;
    /** @deprecated use `DiscountPercentageOnceForeverDurationBaseMetadata$outboundSchema` instead. */
    DiscountPercentageOnceForeverDurationBaseMetadata$.outboundSchema = DiscountPercentageOnceForeverDurationBaseMetadata$outboundSchema;
})(DiscountPercentageOnceForeverDurationBaseMetadata$ || (DiscountPercentageOnceForeverDurationBaseMetadata$ = {}));
export function discountPercentageOnceForeverDurationBaseMetadataToJSON(discountPercentageOnceForeverDurationBaseMetadata) {
    return JSON.stringify(DiscountPercentageOnceForeverDurationBaseMetadata$outboundSchema.parse(discountPercentageOnceForeverDurationBaseMetadata));
}
export function discountPercentageOnceForeverDurationBaseMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountPercentageOnceForeverDurationBaseMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountPercentageOnceForeverDurationBaseMetadata' from JSON`);
}
/** @internal */
export const DiscountPercentageOnceForeverDurationBase$inboundSchema = z.object({
    duration: DiscountDuration$inboundSchema,
    type: DiscountType$inboundSchema,
    basis_points: z.number().int(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    name: z.string(),
    code: z.nullable(z.string()),
    starts_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    max_redemptions: z.nullable(z.number().int()),
    redemptions_count: z.number().int(),
    organization_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "basis_points": "basisPoints",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "starts_at": "startsAt",
        "ends_at": "endsAt",
        "max_redemptions": "maxRedemptions",
        "redemptions_count": "redemptionsCount",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const DiscountPercentageOnceForeverDurationBase$outboundSchema = z.object({
    duration: DiscountDuration$outboundSchema,
    type: DiscountType$outboundSchema,
    basisPoints: z.number().int(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    name: z.string(),
    code: z.nullable(z.string()),
    startsAt: z.nullable(z.date().transform(v => v.toISOString())),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())),
    maxRedemptions: z.nullable(z.number().int()),
    redemptionsCount: z.number().int(),
    organizationId: z.string(),
}).transform((v) => {
    return remap$(v, {
        basisPoints: "basis_points",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        startsAt: "starts_at",
        endsAt: "ends_at",
        maxRedemptions: "max_redemptions",
        redemptionsCount: "redemptions_count",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountPercentageOnceForeverDurationBase$;
(function (DiscountPercentageOnceForeverDurationBase$) {
    /** @deprecated use `DiscountPercentageOnceForeverDurationBase$inboundSchema` instead. */
    DiscountPercentageOnceForeverDurationBase$.inboundSchema = DiscountPercentageOnceForeverDurationBase$inboundSchema;
    /** @deprecated use `DiscountPercentageOnceForeverDurationBase$outboundSchema` instead. */
    DiscountPercentageOnceForeverDurationBase$.outboundSchema = DiscountPercentageOnceForeverDurationBase$outboundSchema;
})(DiscountPercentageOnceForeverDurationBase$ || (DiscountPercentageOnceForeverDurationBase$ = {}));
export function discountPercentageOnceForeverDurationBaseToJSON(discountPercentageOnceForeverDurationBase) {
    return JSON.stringify(DiscountPercentageOnceForeverDurationBase$outboundSchema.parse(discountPercentageOnceForeverDurationBase));
}
export function discountPercentageOnceForeverDurationBaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountPercentageOnceForeverDurationBase$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountPercentageOnceForeverDurationBase' from JSON`);
}
//# sourceMappingURL=discountpercentageonceforeverdurationbase.js.map