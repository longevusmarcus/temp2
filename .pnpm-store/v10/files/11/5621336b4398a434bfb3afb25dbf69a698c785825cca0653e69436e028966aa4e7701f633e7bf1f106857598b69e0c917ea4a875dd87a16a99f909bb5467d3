/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceRepository$inboundSchema, ListResourceRepository$outboundSchema, } from "../components/listresourcerepository.js";
import { Platforms$inboundSchema, Platforms$outboundSchema, } from "../components/platforms.js";
import { RepositorySortProperty$inboundSchema, RepositorySortProperty$outboundSchema, } from "../components/repositorysortproperty.js";
/** @internal */
export const QueryParamPlatformFilter$inboundSchema = z.union([Platforms$inboundSchema, z.array(Platforms$inboundSchema)]);
/** @internal */
export const QueryParamPlatformFilter$outboundSchema = z.union([Platforms$outboundSchema, z.array(Platforms$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamPlatformFilter$;
(function (QueryParamPlatformFilter$) {
    /** @deprecated use `QueryParamPlatformFilter$inboundSchema` instead. */
    QueryParamPlatformFilter$.inboundSchema = QueryParamPlatformFilter$inboundSchema;
    /** @deprecated use `QueryParamPlatformFilter$outboundSchema` instead. */
    QueryParamPlatformFilter$.outboundSchema = QueryParamPlatformFilter$outboundSchema;
})(QueryParamPlatformFilter$ || (QueryParamPlatformFilter$ = {}));
export function queryParamPlatformFilterToJSON(queryParamPlatformFilter) {
    return JSON.stringify(QueryParamPlatformFilter$outboundSchema.parse(queryParamPlatformFilter));
}
export function queryParamPlatformFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamPlatformFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamPlatformFilter' from JSON`);
}
/** @internal */
export const QueryParamRepositoryNameFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const QueryParamRepositoryNameFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamRepositoryNameFilter$;
(function (QueryParamRepositoryNameFilter$) {
    /** @deprecated use `QueryParamRepositoryNameFilter$inboundSchema` instead. */
    QueryParamRepositoryNameFilter$.inboundSchema = QueryParamRepositoryNameFilter$inboundSchema;
    /** @deprecated use `QueryParamRepositoryNameFilter$outboundSchema` instead. */
    QueryParamRepositoryNameFilter$.outboundSchema = QueryParamRepositoryNameFilter$outboundSchema;
})(QueryParamRepositoryNameFilter$ || (QueryParamRepositoryNameFilter$ = {}));
export function queryParamRepositoryNameFilterToJSON(queryParamRepositoryNameFilter) {
    return JSON.stringify(QueryParamRepositoryNameFilter$outboundSchema.parse(queryParamRepositoryNameFilter));
}
export function queryParamRepositoryNameFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamRepositoryNameFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamRepositoryNameFilter' from JSON`);
}
/** @internal */
export const ExternalOrganizationNameFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const ExternalOrganizationNameFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExternalOrganizationNameFilter$;
(function (ExternalOrganizationNameFilter$) {
    /** @deprecated use `ExternalOrganizationNameFilter$inboundSchema` instead. */
    ExternalOrganizationNameFilter$.inboundSchema = ExternalOrganizationNameFilter$inboundSchema;
    /** @deprecated use `ExternalOrganizationNameFilter$outboundSchema` instead. */
    ExternalOrganizationNameFilter$.outboundSchema = ExternalOrganizationNameFilter$outboundSchema;
})(ExternalOrganizationNameFilter$ || (ExternalOrganizationNameFilter$ = {}));
export function externalOrganizationNameFilterToJSON(externalOrganizationNameFilter) {
    return JSON.stringify(ExternalOrganizationNameFilter$outboundSchema.parse(externalOrganizationNameFilter));
}
export function externalOrganizationNameFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExternalOrganizationNameFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExternalOrganizationNameFilter' from JSON`);
}
/** @internal */
export const QueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const QueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamOrganizationIDFilter$;
(function (QueryParamOrganizationIDFilter$) {
    /** @deprecated use `QueryParamOrganizationIDFilter$inboundSchema` instead. */
    QueryParamOrganizationIDFilter$.inboundSchema = QueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `QueryParamOrganizationIDFilter$outboundSchema` instead. */
    QueryParamOrganizationIDFilter$.outboundSchema = QueryParamOrganizationIDFilter$outboundSchema;
})(QueryParamOrganizationIDFilter$ || (QueryParamOrganizationIDFilter$ = {}));
export function queryParamOrganizationIDFilterToJSON(queryParamOrganizationIDFilter) {
    return JSON.stringify(QueryParamOrganizationIDFilter$outboundSchema.parse(queryParamOrganizationIDFilter));
}
export function queryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const RepositoriesListRequest$inboundSchema = z.object({
    platform: z.nullable(z.union([Platforms$inboundSchema, z.array(Platforms$inboundSchema)])).optional(),
    name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    external_organization_name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    is_private: z.nullable(z.boolean()).optional(),
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(RepositorySortProperty$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "external_organization_name": "externalOrganizationName",
        "is_private": "isPrivate",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const RepositoriesListRequest$outboundSchema = z.object({
    platform: z.nullable(z.union([Platforms$outboundSchema, z.array(Platforms$outboundSchema)])).optional(),
    name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalOrganizationName: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    isPrivate: z.nullable(z.boolean()).optional(),
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(RepositorySortProperty$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        externalOrganizationName: "external_organization_name",
        isPrivate: "is_private",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RepositoriesListRequest$;
(function (RepositoriesListRequest$) {
    /** @deprecated use `RepositoriesListRequest$inboundSchema` instead. */
    RepositoriesListRequest$.inboundSchema = RepositoriesListRequest$inboundSchema;
    /** @deprecated use `RepositoriesListRequest$outboundSchema` instead. */
    RepositoriesListRequest$.outboundSchema = RepositoriesListRequest$outboundSchema;
})(RepositoriesListRequest$ || (RepositoriesListRequest$ = {}));
export function repositoriesListRequestToJSON(repositoriesListRequest) {
    return JSON.stringify(RepositoriesListRequest$outboundSchema.parse(repositoriesListRequest));
}
export function repositoriesListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RepositoriesListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RepositoriesListRequest' from JSON`);
}
/** @internal */
export const RepositoriesListResponse$inboundSchema = z.object({
    Result: ListResourceRepository$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const RepositoriesListResponse$outboundSchema = z.object({
    result: ListResourceRepository$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RepositoriesListResponse$;
(function (RepositoriesListResponse$) {
    /** @deprecated use `RepositoriesListResponse$inboundSchema` instead. */
    RepositoriesListResponse$.inboundSchema = RepositoriesListResponse$inboundSchema;
    /** @deprecated use `RepositoriesListResponse$outboundSchema` instead. */
    RepositoriesListResponse$.outboundSchema = RepositoriesListResponse$outboundSchema;
})(RepositoriesListResponse$ || (RepositoriesListResponse$ = {}));
export function repositoriesListResponseToJSON(repositoriesListResponse) {
    return JSON.stringify(RepositoriesListResponse$outboundSchema.parse(repositoriesListResponse));
}
export function repositoriesListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RepositoriesListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RepositoriesListResponse' from JSON`);
}
//# sourceMappingURL=repositorieslist.js.map