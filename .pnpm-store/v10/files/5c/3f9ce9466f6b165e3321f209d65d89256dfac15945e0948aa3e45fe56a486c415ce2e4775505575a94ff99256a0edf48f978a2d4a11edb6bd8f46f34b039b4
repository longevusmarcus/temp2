/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Platforms$inboundSchema, Platforms$outboundSchema, } from "./platforms.js";
/** @internal */
export const ExternalOrganization$inboundSchema = z.object({
    id: z.string(),
    platform: Platforms$inboundSchema,
    name: z.string(),
    avatar_url: z.string(),
    is_personal: z.boolean(),
    bio: z.nullable(z.string()),
    pretty_name: z.nullable(z.string()),
    company: z.nullable(z.string()),
    blog: z.nullable(z.string()),
    location: z.nullable(z.string()),
    email: z.nullable(z.string()),
    twitter_username: z.nullable(z.string()),
    organization_id: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "avatar_url": "avatarUrl",
        "is_personal": "isPersonal",
        "pretty_name": "prettyName",
        "twitter_username": "twitterUsername",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const ExternalOrganization$outboundSchema = z.object({
    id: z.string(),
    platform: Platforms$outboundSchema,
    name: z.string(),
    avatarUrl: z.string(),
    isPersonal: z.boolean(),
    bio: z.nullable(z.string()),
    prettyName: z.nullable(z.string()),
    company: z.nullable(z.string()),
    blog: z.nullable(z.string()),
    location: z.nullable(z.string()),
    email: z.nullable(z.string()),
    twitterUsername: z.nullable(z.string()),
    organizationId: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        avatarUrl: "avatar_url",
        isPersonal: "is_personal",
        prettyName: "pretty_name",
        twitterUsername: "twitter_username",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExternalOrganization$;
(function (ExternalOrganization$) {
    /** @deprecated use `ExternalOrganization$inboundSchema` instead. */
    ExternalOrganization$.inboundSchema = ExternalOrganization$inboundSchema;
    /** @deprecated use `ExternalOrganization$outboundSchema` instead. */
    ExternalOrganization$.outboundSchema = ExternalOrganization$outboundSchema;
})(ExternalOrganization$ || (ExternalOrganization$ = {}));
export function externalOrganizationToJSON(externalOrganization) {
    return JSON.stringify(ExternalOrganization$outboundSchema.parse(externalOrganization));
}
export function externalOrganizationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExternalOrganization$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExternalOrganization' from JSON`);
}
//# sourceMappingURL=externalorganization.js.map