import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Order, Order$Outbound } from "./order.js";
/**
 * Sent when an order is paid.
 *
 * @remarks
 *
 * When you receive this event, the order is fully processed and payment has been received.
 *
 * **Discord & Slack support:** Full
 */
export type WebhookOrderPaidPayload = {
    type?: "order.paid" | undefined;
    data: Order;
};
/** @internal */
export declare const WebhookOrderPaidPayload$inboundSchema: z.ZodType<WebhookOrderPaidPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookOrderPaidPayload$Outbound = {
    type: "order.paid";
    data: Order$Outbound;
};
/** @internal */
export declare const WebhookOrderPaidPayload$outboundSchema: z.ZodType<WebhookOrderPaidPayload$Outbound, z.ZodTypeDef, WebhookOrderPaidPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookOrderPaidPayload$ {
    /** @deprecated use `WebhookOrderPaidPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookOrderPaidPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookOrderPaidPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookOrderPaidPayload$Outbound, z.ZodTypeDef, WebhookOrderPaidPayload>;
    /** @deprecated use `WebhookOrderPaidPayload$Outbound` instead. */
    type Outbound = WebhookOrderPaidPayload$Outbound;
}
export declare function webhookOrderPaidPayloadToJSON(webhookOrderPaidPayload: WebhookOrderPaidPayload): string;
export declare function webhookOrderPaidPayloadFromJSON(jsonString: string): SafeParseResult<WebhookOrderPaidPayload, SDKValidationError>;
//# sourceMappingURL=webhookorderpaidpayload.d.ts.map