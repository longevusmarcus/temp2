/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { FileDownload$inboundSchema, FileDownload$outboundSchema, } from "./filedownload.js";
/** @internal */
export const DownloadableRead$inboundSchema = z.object({
    id: z.string(),
    benefit_id: z.string(),
    file: FileDownload$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "benefit_id": "benefitId",
    });
});
/** @internal */
export const DownloadableRead$outboundSchema = z.object({
    id: z.string(),
    benefitId: z.string(),
    file: FileDownload$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        benefitId: "benefit_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DownloadableRead$;
(function (DownloadableRead$) {
    /** @deprecated use `DownloadableRead$inboundSchema` instead. */
    DownloadableRead$.inboundSchema = DownloadableRead$inboundSchema;
    /** @deprecated use `DownloadableRead$outboundSchema` instead. */
    DownloadableRead$.outboundSchema = DownloadableRead$outboundSchema;
})(DownloadableRead$ || (DownloadableRead$ = {}));
export function downloadableReadToJSON(downloadableRead) {
    return JSON.stringify(DownloadableRead$outboundSchema.parse(downloadableRead));
}
export function downloadableReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DownloadableRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DownloadableRead' from JSON`);
}
//# sourceMappingURL=downloadableread.js.map