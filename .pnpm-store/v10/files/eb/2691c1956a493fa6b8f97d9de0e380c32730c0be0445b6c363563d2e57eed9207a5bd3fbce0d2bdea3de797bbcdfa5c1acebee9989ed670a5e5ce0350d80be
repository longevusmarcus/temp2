/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { RefundReason$inboundSchema, RefundReason$outboundSchema, } from "./refundreason.js";
/** @internal */
export const RefundCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const RefundCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundCreateMetadata$;
(function (RefundCreateMetadata$) {
    /** @deprecated use `RefundCreateMetadata$inboundSchema` instead. */
    RefundCreateMetadata$.inboundSchema = RefundCreateMetadata$inboundSchema;
    /** @deprecated use `RefundCreateMetadata$outboundSchema` instead. */
    RefundCreateMetadata$.outboundSchema = RefundCreateMetadata$outboundSchema;
})(RefundCreateMetadata$ || (RefundCreateMetadata$ = {}));
export function refundCreateMetadataToJSON(refundCreateMetadata) {
    return JSON.stringify(RefundCreateMetadata$outboundSchema.parse(refundCreateMetadata));
}
export function refundCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundCreateMetadata' from JSON`);
}
/** @internal */
export const RefundCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    order_id: z.string(),
    reason: RefundReason$inboundSchema,
    amount: z.number().int(),
    comment: z.nullable(z.string()).optional(),
    revoke_benefits: z.boolean().default(false),
}).transform((v) => {
    return remap$(v, {
        "order_id": "orderId",
        "revoke_benefits": "revokeBenefits",
    });
});
/** @internal */
export const RefundCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    orderId: z.string(),
    reason: RefundReason$outboundSchema,
    amount: z.number().int(),
    comment: z.nullable(z.string()).optional(),
    revokeBenefits: z.boolean().default(false),
}).transform((v) => {
    return remap$(v, {
        orderId: "order_id",
        revokeBenefits: "revoke_benefits",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RefundCreate$;
(function (RefundCreate$) {
    /** @deprecated use `RefundCreate$inboundSchema` instead. */
    RefundCreate$.inboundSchema = RefundCreate$inboundSchema;
    /** @deprecated use `RefundCreate$outboundSchema` instead. */
    RefundCreate$.outboundSchema = RefundCreate$outboundSchema;
})(RefundCreate$ || (RefundCreate$ = {}));
export function refundCreateToJSON(refundCreate) {
    return JSON.stringify(RefundCreate$outboundSchema.parse(refundCreate));
}
export function refundCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RefundCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundCreate' from JSON`);
}
//# sourceMappingURL=refundcreate.js.map