/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DownloadableFileRead$inboundSchema, DownloadableFileRead$outboundSchema, } from "../components/downloadablefileread.js";
import { FilePatch$inboundSchema, FilePatch$outboundSchema, } from "../components/filepatch.js";
import { OrganizationAvatarFileRead$inboundSchema, OrganizationAvatarFileRead$outboundSchema, } from "../components/organizationavatarfileread.js";
import { ProductMediaFileRead$inboundSchema, ProductMediaFileRead$outboundSchema, } from "../components/productmediafileread.js";
/** @internal */
export const FilesUpdateRequest$inboundSchema = z.object({
    id: z.string(),
    FilePatch: FilePatch$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "FilePatch": "filePatch",
    });
});
/** @internal */
export const FilesUpdateRequest$outboundSchema = z.object({
    id: z.string(),
    filePatch: FilePatch$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        filePatch: "FilePatch",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FilesUpdateRequest$;
(function (FilesUpdateRequest$) {
    /** @deprecated use `FilesUpdateRequest$inboundSchema` instead. */
    FilesUpdateRequest$.inboundSchema = FilesUpdateRequest$inboundSchema;
    /** @deprecated use `FilesUpdateRequest$outboundSchema` instead. */
    FilesUpdateRequest$.outboundSchema = FilesUpdateRequest$outboundSchema;
})(FilesUpdateRequest$ || (FilesUpdateRequest$ = {}));
export function filesUpdateRequestToJSON(filesUpdateRequest) {
    return JSON.stringify(FilesUpdateRequest$outboundSchema.parse(filesUpdateRequest));
}
export function filesUpdateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FilesUpdateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesUpdateRequest' from JSON`);
}
/** @internal */
export const FilesUpdateResponseFilesUpdate$inboundSchema = z.union([
    DownloadableFileRead$inboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileRead$inboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileRead$inboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
]);
/** @internal */
export const FilesUpdateResponseFilesUpdate$outboundSchema = z.union([
    DownloadableFileRead$outboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileRead$outboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileRead$outboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FilesUpdateResponseFilesUpdate$;
(function (FilesUpdateResponseFilesUpdate$) {
    /** @deprecated use `FilesUpdateResponseFilesUpdate$inboundSchema` instead. */
    FilesUpdateResponseFilesUpdate$.inboundSchema = FilesUpdateResponseFilesUpdate$inboundSchema;
    /** @deprecated use `FilesUpdateResponseFilesUpdate$outboundSchema` instead. */
    FilesUpdateResponseFilesUpdate$.outboundSchema = FilesUpdateResponseFilesUpdate$outboundSchema;
})(FilesUpdateResponseFilesUpdate$ || (FilesUpdateResponseFilesUpdate$ = {}));
export function filesUpdateResponseFilesUpdateToJSON(filesUpdateResponseFilesUpdate) {
    return JSON.stringify(FilesUpdateResponseFilesUpdate$outboundSchema.parse(filesUpdateResponseFilesUpdate));
}
export function filesUpdateResponseFilesUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FilesUpdateResponseFilesUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesUpdateResponseFilesUpdate' from JSON`);
}
//# sourceMappingURL=filesupdate.js.map