/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerCancellationReason$inboundSchema, CustomerCancellationReason$outboundSchema, } from "./customercancellationreason.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
import { SubscriptionStatus$inboundSchema, SubscriptionStatus$outboundSchema, } from "./subscriptionstatus.js";
/** @internal */
export const CustomerOrderSubscription$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    recurring_interval: SubscriptionRecurringInterval$inboundSchema,
    status: SubscriptionStatus$inboundSchema,
    current_period_start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    current_period_end: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    cancel_at_period_end: z.boolean(),
    canceled_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    started_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ended_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    customer_id: z.string(),
    product_id: z.string(),
    discount_id: z.nullable(z.string()),
    checkout_id: z.nullable(z.string()),
    customer_cancellation_reason: z.nullable(CustomerCancellationReason$inboundSchema),
    customer_cancellation_comment: z.nullable(z.string()),
    price_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "recurring_interval": "recurringInterval",
        "current_period_start": "currentPeriodStart",
        "current_period_end": "currentPeriodEnd",
        "cancel_at_period_end": "cancelAtPeriodEnd",
        "canceled_at": "canceledAt",
        "started_at": "startedAt",
        "ends_at": "endsAt",
        "ended_at": "endedAt",
        "customer_id": "customerId",
        "product_id": "productId",
        "discount_id": "discountId",
        "checkout_id": "checkoutId",
        "customer_cancellation_reason": "customerCancellationReason",
        "customer_cancellation_comment": "customerCancellationComment",
        "price_id": "priceId",
    });
});
/** @internal */
export const CustomerOrderSubscription$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    recurringInterval: SubscriptionRecurringInterval$outboundSchema,
    status: SubscriptionStatus$outboundSchema,
    currentPeriodStart: z.date().transform(v => v.toISOString()),
    currentPeriodEnd: z.nullable(z.date().transform(v => v.toISOString())),
    cancelAtPeriodEnd: z.boolean(),
    canceledAt: z.nullable(z.date().transform(v => v.toISOString())),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())),
    endedAt: z.nullable(z.date().transform(v => v.toISOString())),
    customerId: z.string(),
    productId: z.string(),
    discountId: z.nullable(z.string()),
    checkoutId: z.nullable(z.string()),
    customerCancellationReason: z.nullable(CustomerCancellationReason$outboundSchema),
    customerCancellationComment: z.nullable(z.string()),
    priceId: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        recurringInterval: "recurring_interval",
        currentPeriodStart: "current_period_start",
        currentPeriodEnd: "current_period_end",
        cancelAtPeriodEnd: "cancel_at_period_end",
        canceledAt: "canceled_at",
        startedAt: "started_at",
        endsAt: "ends_at",
        endedAt: "ended_at",
        customerId: "customer_id",
        productId: "product_id",
        discountId: "discount_id",
        checkoutId: "checkout_id",
        customerCancellationReason: "customer_cancellation_reason",
        customerCancellationComment: "customer_cancellation_comment",
        priceId: "price_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerOrderSubscription$;
(function (CustomerOrderSubscription$) {
    /** @deprecated use `CustomerOrderSubscription$inboundSchema` instead. */
    CustomerOrderSubscription$.inboundSchema = CustomerOrderSubscription$inboundSchema;
    /** @deprecated use `CustomerOrderSubscription$outboundSchema` instead. */
    CustomerOrderSubscription$.outboundSchema = CustomerOrderSubscription$outboundSchema;
})(CustomerOrderSubscription$ || (CustomerOrderSubscription$ = {}));
export function customerOrderSubscriptionToJSON(customerOrderSubscription) {
    return JSON.stringify(CustomerOrderSubscription$outboundSchema.parse(customerOrderSubscription));
}
export function customerOrderSubscriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerOrderSubscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerOrderSubscription' from JSON`);
}
//# sourceMappingURL=customerordersubscription.js.map