"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntrospectTokenResponse$ = exports.IntrospectTokenResponse$outboundSchema = exports.IntrospectTokenResponse$inboundSchema = exports.TokenType$ = exports.TokenType$outboundSchema = exports.TokenType$inboundSchema = exports.TokenType = void 0;
exports.introspectTokenResponseToJSON = introspectTokenResponseToJSON;
exports.introspectTokenResponseFromJSON = introspectTokenResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const subtype_js_1 = require("./subtype.js");
exports.TokenType = {
    AccessToken: "access_token",
    RefreshToken: "refresh_token",
};
/** @internal */
exports.TokenType$inboundSchema = z
    .nativeEnum(exports.TokenType);
/** @internal */
exports.TokenType$outboundSchema = exports.TokenType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TokenType$;
(function (TokenType$) {
    /** @deprecated use `TokenType$inboundSchema` instead. */
    TokenType$.inboundSchema = exports.TokenType$inboundSchema;
    /** @deprecated use `TokenType$outboundSchema` instead. */
    TokenType$.outboundSchema = exports.TokenType$outboundSchema;
})(TokenType$ || (exports.TokenType$ = TokenType$ = {}));
/** @internal */
exports.IntrospectTokenResponse$inboundSchema = z.object({
    active: z.boolean(),
    client_id: z.string(),
    token_type: exports.TokenType$inboundSchema,
    scope: z.string(),
    sub_type: subtype_js_1.SubType$inboundSchema,
    sub: z.string(),
    aud: z.string(),
    iss: z.string(),
    exp: z.number().int(),
    iat: z.number().int(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "client_id": "clientId",
        "token_type": "tokenType",
        "sub_type": "subType",
    });
});
/** @internal */
exports.IntrospectTokenResponse$outboundSchema = z.object({
    active: z.boolean(),
    clientId: z.string(),
    tokenType: exports.TokenType$outboundSchema,
    scope: z.string(),
    subType: subtype_js_1.SubType$outboundSchema,
    sub: z.string(),
    aud: z.string(),
    iss: z.string(),
    exp: z.number().int(),
    iat: z.number().int(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        clientId: "client_id",
        tokenType: "token_type",
        subType: "sub_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var IntrospectTokenResponse$;
(function (IntrospectTokenResponse$) {
    /** @deprecated use `IntrospectTokenResponse$inboundSchema` instead. */
    IntrospectTokenResponse$.inboundSchema = exports.IntrospectTokenResponse$inboundSchema;
    /** @deprecated use `IntrospectTokenResponse$outboundSchema` instead. */
    IntrospectTokenResponse$.outboundSchema = exports.IntrospectTokenResponse$outboundSchema;
})(IntrospectTokenResponse$ || (exports.IntrospectTokenResponse$ = IntrospectTokenResponse$ = {}));
function introspectTokenResponseToJSON(introspectTokenResponse) {
    return JSON.stringify(exports.IntrospectTokenResponse$outboundSchema.parse(introspectTokenResponse));
}
function introspectTokenResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.IntrospectTokenResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IntrospectTokenResponse' from JSON`);
}
//# sourceMappingURL=introspecttokenresponse.js.map