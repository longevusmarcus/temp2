/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
export const IntrospectTokenRequestTokenTypeHint = {
    AccessToken: "access_token",
    RefreshToken: "refresh_token",
};
/** @internal */
export const IntrospectTokenRequestTokenTypeHint$inboundSchema = z.nativeEnum(IntrospectTokenRequestTokenTypeHint);
/** @internal */
export const IntrospectTokenRequestTokenTypeHint$outboundSchema = IntrospectTokenRequestTokenTypeHint$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IntrospectTokenRequestTokenTypeHint$;
(function (IntrospectTokenRequestTokenTypeHint$) {
    /** @deprecated use `IntrospectTokenRequestTokenTypeHint$inboundSchema` instead. */
    IntrospectTokenRequestTokenTypeHint$.inboundSchema = IntrospectTokenRequestTokenTypeHint$inboundSchema;
    /** @deprecated use `IntrospectTokenRequestTokenTypeHint$outboundSchema` instead. */
    IntrospectTokenRequestTokenTypeHint$.outboundSchema = IntrospectTokenRequestTokenTypeHint$outboundSchema;
})(IntrospectTokenRequestTokenTypeHint$ || (IntrospectTokenRequestTokenTypeHint$ = {}));
/** @internal */
export const IntrospectTokenRequest$inboundSchema = z.object({
    token: z.string(),
    token_type_hint: z.nullable(IntrospectTokenRequestTokenTypeHint$inboundSchema)
        .optional(),
    client_id: z.string(),
    client_secret: z.string(),
}).transform((v) => {
    return remap$(v, {
        "token_type_hint": "tokenTypeHint",
        "client_id": "clientId",
        "client_secret": "clientSecret",
    });
});
/** @internal */
export const IntrospectTokenRequest$outboundSchema = z.object({
    token: z.string(),
    tokenTypeHint: z.nullable(IntrospectTokenRequestTokenTypeHint$outboundSchema)
        .optional(),
    clientId: z.string(),
    clientSecret: z.string(),
}).transform((v) => {
    return remap$(v, {
        tokenTypeHint: "token_type_hint",
        clientId: "client_id",
        clientSecret: "client_secret",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IntrospectTokenRequest$;
(function (IntrospectTokenRequest$) {
    /** @deprecated use `IntrospectTokenRequest$inboundSchema` instead. */
    IntrospectTokenRequest$.inboundSchema = IntrospectTokenRequest$inboundSchema;
    /** @deprecated use `IntrospectTokenRequest$outboundSchema` instead. */
    IntrospectTokenRequest$.outboundSchema = IntrospectTokenRequest$outboundSchema;
})(IntrospectTokenRequest$ || (IntrospectTokenRequest$ = {}));
export function introspectTokenRequestToJSON(introspectTokenRequest) {
    return JSON.stringify(IntrospectTokenRequest$outboundSchema.parse(introspectTokenRequest));
}
export function introspectTokenRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IntrospectTokenRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IntrospectTokenRequest' from JSON`);
}
//# sourceMappingURL=introspecttokenrequest.js.map