/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { AttachedCustomField$inboundSchema, AttachedCustomField$outboundSchema, } from "./attachedcustomfield.js";
import { CheckoutDiscountFixedOnceForeverDuration$inboundSchema, CheckoutDiscountFixedOnceForeverDuration$outboundSchema, } from "./checkoutdiscountfixedonceforeverduration.js";
import { CheckoutDiscountFixedRepeatDuration$inboundSchema, CheckoutDiscountFixedRepeatDuration$outboundSchema, } from "./checkoutdiscountfixedrepeatduration.js";
import { CheckoutDiscountPercentageOnceForeverDuration$inboundSchema, CheckoutDiscountPercentageOnceForeverDuration$outboundSchema, } from "./checkoutdiscountpercentageonceforeverduration.js";
import { CheckoutDiscountPercentageRepeatDuration$inboundSchema, CheckoutDiscountPercentageRepeatDuration$outboundSchema, } from "./checkoutdiscountpercentagerepeatduration.js";
import { CheckoutProduct$inboundSchema, CheckoutProduct$outboundSchema, } from "./checkoutproduct.js";
import { CheckoutStatus$inboundSchema, CheckoutStatus$outboundSchema, } from "./checkoutstatus.js";
import { LegacyRecurringProductPrice$inboundSchema, LegacyRecurringProductPrice$outboundSchema, } from "./legacyrecurringproductprice.js";
import { Organization$inboundSchema, Organization$outboundSchema, } from "./organization.js";
import { PaymentProcessor$inboundSchema, PaymentProcessor$outboundSchema, } from "./paymentprocessor.js";
import { ProductPrice$inboundSchema, ProductPrice$outboundSchema, } from "./productprice.js";
/** @internal */
export const CheckoutPublicCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CheckoutPublicCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutPublicCustomFieldData$;
(function (CheckoutPublicCustomFieldData$) {
    /** @deprecated use `CheckoutPublicCustomFieldData$inboundSchema` instead. */
    CheckoutPublicCustomFieldData$.inboundSchema = CheckoutPublicCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutPublicCustomFieldData$outboundSchema` instead. */
    CheckoutPublicCustomFieldData$.outboundSchema = CheckoutPublicCustomFieldData$outboundSchema;
})(CheckoutPublicCustomFieldData$ || (CheckoutPublicCustomFieldData$ = {}));
export function checkoutPublicCustomFieldDataToJSON(checkoutPublicCustomFieldData) {
    return JSON.stringify(CheckoutPublicCustomFieldData$outboundSchema.parse(checkoutPublicCustomFieldData));
}
export function checkoutPublicCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutPublicCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublicCustomFieldData' from JSON`);
}
/** @internal */
export const CheckoutPublicProductPrice$inboundSchema = z.union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
]);
/** @internal */
export const CheckoutPublicProductPrice$outboundSchema = z.union([
    LegacyRecurringProductPrice$outboundSchema,
    ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutPublicProductPrice$;
(function (CheckoutPublicProductPrice$) {
    /** @deprecated use `CheckoutPublicProductPrice$inboundSchema` instead. */
    CheckoutPublicProductPrice$.inboundSchema = CheckoutPublicProductPrice$inboundSchema;
    /** @deprecated use `CheckoutPublicProductPrice$outboundSchema` instead. */
    CheckoutPublicProductPrice$.outboundSchema = CheckoutPublicProductPrice$outboundSchema;
})(CheckoutPublicProductPrice$ || (CheckoutPublicProductPrice$ = {}));
export function checkoutPublicProductPriceToJSON(checkoutPublicProductPrice) {
    return JSON.stringify(CheckoutPublicProductPrice$outboundSchema.parse(checkoutPublicProductPrice));
}
export function checkoutPublicProductPriceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutPublicProductPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublicProductPrice' from JSON`);
}
/** @internal */
export const CheckoutPublicDiscount$inboundSchema = z.union([
    CheckoutDiscountPercentageOnceForeverDuration$inboundSchema,
    CheckoutDiscountFixedOnceForeverDuration$inboundSchema,
    CheckoutDiscountPercentageRepeatDuration$inboundSchema,
    CheckoutDiscountFixedRepeatDuration$inboundSchema,
]);
/** @internal */
export const CheckoutPublicDiscount$outboundSchema = z.union([
    CheckoutDiscountPercentageOnceForeverDuration$outboundSchema,
    CheckoutDiscountFixedOnceForeverDuration$outboundSchema,
    CheckoutDiscountPercentageRepeatDuration$outboundSchema,
    CheckoutDiscountFixedRepeatDuration$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutPublicDiscount$;
(function (CheckoutPublicDiscount$) {
    /** @deprecated use `CheckoutPublicDiscount$inboundSchema` instead. */
    CheckoutPublicDiscount$.inboundSchema = CheckoutPublicDiscount$inboundSchema;
    /** @deprecated use `CheckoutPublicDiscount$outboundSchema` instead. */
    CheckoutPublicDiscount$.outboundSchema = CheckoutPublicDiscount$outboundSchema;
})(CheckoutPublicDiscount$ || (CheckoutPublicDiscount$ = {}));
export function checkoutPublicDiscountToJSON(checkoutPublicDiscount) {
    return JSON.stringify(CheckoutPublicDiscount$outboundSchema.parse(checkoutPublicDiscount));
}
export function checkoutPublicDiscountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutPublicDiscount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublicDiscount' from JSON`);
}
/** @internal */
export const CheckoutPublic$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    payment_processor: PaymentProcessor$inboundSchema,
    status: CheckoutStatus$inboundSchema,
    client_secret: z.string(),
    url: z.string(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    success_url: z.string(),
    embed_origin: z.nullable(z.string()),
    amount: z.nullable(z.number().int()),
    tax_amount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    subtotal_amount: z.nullable(z.number().int()),
    total_amount: z.nullable(z.number().int()),
    product_id: z.string(),
    product_price_id: z.string(),
    discount_id: z.nullable(z.string()),
    allow_discount_codes: z.boolean(),
    is_discount_applicable: z.boolean(),
    is_free_product_price: z.boolean(),
    is_payment_required: z.boolean(),
    is_payment_setup_required: z.boolean(),
    is_payment_form_required: z.boolean(),
    customer_id: z.nullable(z.string()),
    customer_name: z.nullable(z.string()),
    customer_email: z.nullable(z.string()),
    customer_ip_address: z.nullable(z.string()),
    customer_billing_address: z.nullable(Address$inboundSchema),
    customer_tax_id: z.nullable(z.string()),
    payment_processor_metadata: z.record(z.string()),
    products: z.array(CheckoutProduct$inboundSchema),
    product: CheckoutProduct$inboundSchema,
    product_price: z.union([
        LegacyRecurringProductPrice$inboundSchema,
        ProductPrice$inboundSchema,
    ]),
    discount: z.nullable(z.union([
        CheckoutDiscountPercentageOnceForeverDuration$inboundSchema,
        CheckoutDiscountFixedOnceForeverDuration$inboundSchema,
        CheckoutDiscountPercentageRepeatDuration$inboundSchema,
        CheckoutDiscountFixedRepeatDuration$inboundSchema,
    ])),
    organization: Organization$inboundSchema,
    attached_custom_fields: z.array(AttachedCustomField$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "custom_field_data": "customFieldData",
        "payment_processor": "paymentProcessor",
        "client_secret": "clientSecret",
        "expires_at": "expiresAt",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
        "tax_amount": "taxAmount",
        "subtotal_amount": "subtotalAmount",
        "total_amount": "totalAmount",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "is_discount_applicable": "isDiscountApplicable",
        "is_free_product_price": "isFreeProductPrice",
        "is_payment_required": "isPaymentRequired",
        "is_payment_setup_required": "isPaymentSetupRequired",
        "is_payment_form_required": "isPaymentFormRequired",
        "customer_id": "customerId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "payment_processor_metadata": "paymentProcessorMetadata",
        "product_price": "productPrice",
        "attached_custom_fields": "attachedCustomFields",
    });
});
/** @internal */
export const CheckoutPublic$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    paymentProcessor: PaymentProcessor$outboundSchema,
    status: CheckoutStatus$outboundSchema,
    clientSecret: z.string(),
    url: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    successUrl: z.string(),
    embedOrigin: z.nullable(z.string()),
    amount: z.nullable(z.number().int()),
    taxAmount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    subtotalAmount: z.nullable(z.number().int()),
    totalAmount: z.nullable(z.number().int()),
    productId: z.string(),
    productPriceId: z.string(),
    discountId: z.nullable(z.string()),
    allowDiscountCodes: z.boolean(),
    isDiscountApplicable: z.boolean(),
    isFreeProductPrice: z.boolean(),
    isPaymentRequired: z.boolean(),
    isPaymentSetupRequired: z.boolean(),
    isPaymentFormRequired: z.boolean(),
    customerId: z.nullable(z.string()),
    customerName: z.nullable(z.string()),
    customerEmail: z.nullable(z.string()),
    customerIpAddress: z.nullable(z.string()),
    customerBillingAddress: z.nullable(Address$outboundSchema),
    customerTaxId: z.nullable(z.string()),
    paymentProcessorMetadata: z.record(z.string()),
    products: z.array(CheckoutProduct$outboundSchema),
    product: CheckoutProduct$outboundSchema,
    productPrice: z.union([
        LegacyRecurringProductPrice$outboundSchema,
        ProductPrice$outboundSchema,
    ]),
    discount: z.nullable(z.union([
        CheckoutDiscountPercentageOnceForeverDuration$outboundSchema,
        CheckoutDiscountFixedOnceForeverDuration$outboundSchema,
        CheckoutDiscountPercentageRepeatDuration$outboundSchema,
        CheckoutDiscountFixedRepeatDuration$outboundSchema,
    ])),
    organization: Organization$outboundSchema,
    attachedCustomFields: z.array(AttachedCustomField$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        customFieldData: "custom_field_data",
        paymentProcessor: "payment_processor",
        clientSecret: "client_secret",
        expiresAt: "expires_at",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
        taxAmount: "tax_amount",
        subtotalAmount: "subtotal_amount",
        totalAmount: "total_amount",
        productId: "product_id",
        productPriceId: "product_price_id",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        isDiscountApplicable: "is_discount_applicable",
        isFreeProductPrice: "is_free_product_price",
        isPaymentRequired: "is_payment_required",
        isPaymentSetupRequired: "is_payment_setup_required",
        isPaymentFormRequired: "is_payment_form_required",
        customerId: "customer_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        paymentProcessorMetadata: "payment_processor_metadata",
        productPrice: "product_price",
        attachedCustomFields: "attached_custom_fields",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutPublic$;
(function (CheckoutPublic$) {
    /** @deprecated use `CheckoutPublic$inboundSchema` instead. */
    CheckoutPublic$.inboundSchema = CheckoutPublic$inboundSchema;
    /** @deprecated use `CheckoutPublic$outboundSchema` instead. */
    CheckoutPublic$.outboundSchema = CheckoutPublic$outboundSchema;
})(CheckoutPublic$ || (CheckoutPublic$ = {}));
export function checkoutPublicToJSON(checkoutPublic) {
    return JSON.stringify(CheckoutPublic$outboundSchema.parse(checkoutPublic));
}
export function checkoutPublicFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutPublic$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublic' from JSON`);
}
//# sourceMappingURL=checkoutpublic.js.map