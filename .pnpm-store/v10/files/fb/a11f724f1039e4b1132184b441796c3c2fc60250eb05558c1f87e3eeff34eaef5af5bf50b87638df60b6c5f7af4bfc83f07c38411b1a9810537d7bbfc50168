/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { DownloadableFileCreate$inboundSchema, DownloadableFileCreate$outboundSchema, } from "./downloadablefilecreate.js";
import { OrganizationAvatarFileCreate$inboundSchema, OrganizationAvatarFileCreate$outboundSchema, } from "./organizationavatarfilecreate.js";
import { ProductMediaFileCreate$inboundSchema, ProductMediaFileCreate$outboundSchema, } from "./productmediafilecreate.js";
/** @internal */
export const FileCreate$inboundSchema = z.union([
    DownloadableFileCreate$inboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileCreate$inboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileCreate$inboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
]);
/** @internal */
export const FileCreate$outboundSchema = z.union([
    DownloadableFileCreate$outboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    OrganizationAvatarFileCreate$outboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
    ProductMediaFileCreate$outboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FileCreate$;
(function (FileCreate$) {
    /** @deprecated use `FileCreate$inboundSchema` instead. */
    FileCreate$.inboundSchema = FileCreate$inboundSchema;
    /** @deprecated use `FileCreate$outboundSchema` instead. */
    FileCreate$.outboundSchema = FileCreate$outboundSchema;
})(FileCreate$ || (FileCreate$ = {}));
export function fileCreateToJSON(fileCreate) {
    return JSON.stringify(FileCreate$outboundSchema.parse(fileCreate));
}
export function fileCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FileCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileCreate' from JSON`);
}
//# sourceMappingURL=filecreate.js.map