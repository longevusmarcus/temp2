import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomerCancellationReason } from "./customercancellationreason.js";
export type SubscriptionCancel = {
    /**
     * Cancel an active subscription once the current period ends.
     *
     * @remarks
     *
     * Or uncancel a subscription currently set to be revoked at period end.
     */
    cancelAtPeriodEnd?: boolean | null | undefined;
    /**
     * Cancel and revoke an active subscription immediately
     */
    revoke?: true | null | undefined;
    /**
     * Customer reason for cancellation.
     *
     * @remarks
     *
     * Helpful to monitor reasons behind churn for future improvements.
     *
     * Only set this in case your own service is requesting the reason from the
     * customer. Or you know based on direct conversations, i.e support, with
     * the customer.
     *
     * * `too_expensive`: Too expensive for the customer.
     * * `missing_features`: Customer is missing certain features.
     * * `switched_service`: Customer switched to another service.
     * * `unused`: Customer is not using it enough.
     * * `customer_service`: Customer is not satisfied with the customer service.
     * * `low_quality`: Customer is unhappy with the quality.
     * * `too_complex`: Customer considers the service too complicated.
     * * `other`: Other reason(s).
     */
    customerCancellationReason?: CustomerCancellationReason | null | undefined;
    /**
     * Customer feedback and why they decided to cancel.
     *
     * @remarks
     *
     * **IMPORTANT:**
     * Do not use this to store internal notes! It's intended to be input
     * from the customer and is therefore also available in their Polar
     * purchases library.
     *
     * Only set this in case your own service is requesting the reason from the
     * customer. Or you copy a message directly from a customer
     * conversation, i.e support.
     */
    customerCancellationComment?: string | null | undefined;
};
/** @internal */
export declare const SubscriptionCancel$inboundSchema: z.ZodType<SubscriptionCancel, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionCancel$Outbound = {
    cancel_at_period_end?: boolean | null | undefined;
    revoke: true | null;
    customer_cancellation_reason?: string | null | undefined;
    customer_cancellation_comment?: string | null | undefined;
};
/** @internal */
export declare const SubscriptionCancel$outboundSchema: z.ZodType<SubscriptionCancel$Outbound, z.ZodTypeDef, SubscriptionCancel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionCancel$ {
    /** @deprecated use `SubscriptionCancel$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionCancel, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionCancel$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionCancel$Outbound, z.ZodTypeDef, SubscriptionCancel>;
    /** @deprecated use `SubscriptionCancel$Outbound` instead. */
    type Outbound = SubscriptionCancel$Outbound;
}
export declare function subscriptionCancelToJSON(subscriptionCancel: SubscriptionCancel): string;
export declare function subscriptionCancelFromJSON(jsonString: string): SafeParseResult<SubscriptionCancel, SDKValidationError>;
//# sourceMappingURL=subscriptioncancel.d.ts.map