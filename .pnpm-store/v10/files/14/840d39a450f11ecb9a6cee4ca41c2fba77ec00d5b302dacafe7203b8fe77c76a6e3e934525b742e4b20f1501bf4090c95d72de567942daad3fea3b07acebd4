/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitDownloadablesProperties$inboundSchema, BenefitDownloadablesProperties$outboundSchema, } from "./benefitdownloadablesproperties.js";
/** @internal */
export const BenefitDownloadables$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    type: z.literal("downloadables").optional(),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organization_id: z.string(),
    properties: BenefitDownloadablesProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const BenefitDownloadables$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    type: z.literal("downloadables").default("downloadables"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organizationId: z.string(),
    properties: BenefitDownloadablesProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitDownloadables$;
(function (BenefitDownloadables$) {
    /** @deprecated use `BenefitDownloadables$inboundSchema` instead. */
    BenefitDownloadables$.inboundSchema = BenefitDownloadables$inboundSchema;
    /** @deprecated use `BenefitDownloadables$outboundSchema` instead. */
    BenefitDownloadables$.outboundSchema = BenefitDownloadables$outboundSchema;
})(BenefitDownloadables$ || (BenefitDownloadables$ = {}));
export function benefitDownloadablesToJSON(benefitDownloadables) {
    return JSON.stringify(BenefitDownloadables$outboundSchema.parse(benefitDownloadables));
}
export function benefitDownloadablesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitDownloadables$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitDownloadables' from JSON`);
}
//# sourceMappingURL=benefitdownloadables.js.map