import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { LegacyRecurringProductPriceCustom, LegacyRecurringProductPriceCustom$Outbound } from "./legacyrecurringproductpricecustom.js";
import { LegacyRecurringProductPriceFixed, LegacyRecurringProductPriceFixed$Outbound } from "./legacyrecurringproductpricefixed.js";
import { LegacyRecurringProductPriceFree, LegacyRecurringProductPriceFree$Outbound } from "./legacyrecurringproductpricefree.js";
export type LegacyRecurringProductPrice = (LegacyRecurringProductPriceFree & {
    amountType: "free";
}) | (LegacyRecurringProductPriceFixed & {
    amountType: "fixed";
}) | (LegacyRecurringProductPriceCustom & {
    amountType: "custom";
});
/** @internal */
export declare const LegacyRecurringProductPrice$inboundSchema: z.ZodType<LegacyRecurringProductPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type LegacyRecurringProductPrice$Outbound = (LegacyRecurringProductPriceFree$Outbound & {
    amount_type: "free";
}) | (LegacyRecurringProductPriceFixed$Outbound & {
    amount_type: "fixed";
}) | (LegacyRecurringProductPriceCustom$Outbound & {
    amount_type: "custom";
});
/** @internal */
export declare const LegacyRecurringProductPrice$outboundSchema: z.ZodType<LegacyRecurringProductPrice$Outbound, z.ZodTypeDef, LegacyRecurringProductPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LegacyRecurringProductPrice$ {
    /** @deprecated use `LegacyRecurringProductPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LegacyRecurringProductPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `LegacyRecurringProductPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LegacyRecurringProductPrice$Outbound, z.ZodTypeDef, LegacyRecurringProductPrice>;
    /** @deprecated use `LegacyRecurringProductPrice$Outbound` instead. */
    type Outbound = LegacyRecurringProductPrice$Outbound;
}
export declare function legacyRecurringProductPriceToJSON(legacyRecurringProductPrice: LegacyRecurringProductPrice): string;
export declare function legacyRecurringProductPriceFromJSON(jsonString: string): SafeParseResult<LegacyRecurringProductPrice, SDKValidationError>;
//# sourceMappingURL=legacyrecurringproductprice.d.ts.map