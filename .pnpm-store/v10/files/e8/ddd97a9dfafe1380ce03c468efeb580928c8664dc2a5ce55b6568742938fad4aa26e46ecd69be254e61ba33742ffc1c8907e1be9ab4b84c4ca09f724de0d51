/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldSelectProperties$inboundSchema, CustomFieldSelectProperties$outboundSchema, } from "./customfieldselectproperties.js";
/** @internal */
export const CustomFieldSelectMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomFieldSelectMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldSelectMetadata$;
(function (CustomFieldSelectMetadata$) {
    /** @deprecated use `CustomFieldSelectMetadata$inboundSchema` instead. */
    CustomFieldSelectMetadata$.inboundSchema = CustomFieldSelectMetadata$inboundSchema;
    /** @deprecated use `CustomFieldSelectMetadata$outboundSchema` instead. */
    CustomFieldSelectMetadata$.outboundSchema = CustomFieldSelectMetadata$outboundSchema;
})(CustomFieldSelectMetadata$ || (CustomFieldSelectMetadata$ = {}));
export function customFieldSelectMetadataToJSON(customFieldSelectMetadata) {
    return JSON.stringify(CustomFieldSelectMetadata$outboundSchema.parse(customFieldSelectMetadata));
}
export function customFieldSelectMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldSelectMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldSelectMetadata' from JSON`);
}
/** @internal */
export const CustomFieldSelect$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("select").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.string(),
    properties: CustomFieldSelectProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CustomFieldSelect$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("select").default("select"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.string(),
    properties: CustomFieldSelectProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldSelect$;
(function (CustomFieldSelect$) {
    /** @deprecated use `CustomFieldSelect$inboundSchema` instead. */
    CustomFieldSelect$.inboundSchema = CustomFieldSelect$inboundSchema;
    /** @deprecated use `CustomFieldSelect$outboundSchema` instead. */
    CustomFieldSelect$.outboundSchema = CustomFieldSelect$outboundSchema;
})(CustomFieldSelect$ || (CustomFieldSelect$ = {}));
export function customFieldSelectToJSON(customFieldSelect) {
    return JSON.stringify(CustomFieldSelect$outboundSchema.parse(customFieldSelect));
}
export function customFieldSelectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldSelect$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldSelect' from JSON`);
}
//# sourceMappingURL=customfieldselect.js.map