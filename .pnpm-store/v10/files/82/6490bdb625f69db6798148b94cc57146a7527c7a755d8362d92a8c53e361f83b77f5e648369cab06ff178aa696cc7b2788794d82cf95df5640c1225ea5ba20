import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { TaxIDFormat } from "./taxidformat.js";
export type SubscriptionCustomerMetadata = string | number | boolean;
export type TaxId = string | TaxIDFormat;
export type SubscriptionCustomer = {
    /**
     * The ID of the customer.
     */
    id: string;
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    /**
     * The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.
     */
    externalId: string | null;
    /**
     * The email address of the customer. This must be unique within the organization.
     */
    email: string;
    /**
     * Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.
     */
    emailVerified: boolean;
    /**
     * The name of the customer.
     */
    name: string | null;
    billingAddress: Address | null;
    taxId: Array<string | TaxIDFormat | null> | null;
    /**
     * The ID of the organization owning the customer.
     */
    organizationId: string;
    /**
     * Timestamp for when the customer was soft deleted.
     */
    deletedAt: Date | null;
    avatarUrl: string;
};
/** @internal */
export declare const SubscriptionCustomerMetadata$inboundSchema: z.ZodType<SubscriptionCustomerMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionCustomerMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const SubscriptionCustomerMetadata$outboundSchema: z.ZodType<SubscriptionCustomerMetadata$Outbound, z.ZodTypeDef, SubscriptionCustomerMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionCustomerMetadata$ {
    /** @deprecated use `SubscriptionCustomerMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionCustomerMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionCustomerMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionCustomerMetadata$Outbound, z.ZodTypeDef, SubscriptionCustomerMetadata>;
    /** @deprecated use `SubscriptionCustomerMetadata$Outbound` instead. */
    type Outbound = SubscriptionCustomerMetadata$Outbound;
}
export declare function subscriptionCustomerMetadataToJSON(subscriptionCustomerMetadata: SubscriptionCustomerMetadata): string;
export declare function subscriptionCustomerMetadataFromJSON(jsonString: string): SafeParseResult<SubscriptionCustomerMetadata, SDKValidationError>;
/** @internal */
export declare const TaxId$inboundSchema: z.ZodType<TaxId, z.ZodTypeDef, unknown>;
/** @internal */
export type TaxId$Outbound = string | string;
/** @internal */
export declare const TaxId$outboundSchema: z.ZodType<TaxId$Outbound, z.ZodTypeDef, TaxId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TaxId$ {
    /** @deprecated use `TaxId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `TaxId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `TaxId$Outbound` instead. */
    type Outbound = TaxId$Outbound;
}
export declare function taxIdToJSON(taxId: TaxId): string;
export declare function taxIdFromJSON(jsonString: string): SafeParseResult<TaxId, SDKValidationError>;
/** @internal */
export declare const SubscriptionCustomer$inboundSchema: z.ZodType<SubscriptionCustomer, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionCustomer$Outbound = {
    id: string;
    created_at: string;
    modified_at: string | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    external_id: string | null;
    email: string;
    email_verified: boolean;
    name: string | null;
    billing_address: Address$Outbound | null;
    tax_id: Array<string | string | null> | null;
    organization_id: string;
    deleted_at: string | null;
    avatar_url: string;
};
/** @internal */
export declare const SubscriptionCustomer$outboundSchema: z.ZodType<SubscriptionCustomer$Outbound, z.ZodTypeDef, SubscriptionCustomer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionCustomer$ {
    /** @deprecated use `SubscriptionCustomer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionCustomer, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionCustomer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionCustomer$Outbound, z.ZodTypeDef, SubscriptionCustomer>;
    /** @deprecated use `SubscriptionCustomer$Outbound` instead. */
    type Outbound = SubscriptionCustomer$Outbound;
}
export declare function subscriptionCustomerToJSON(subscriptionCustomer: SubscriptionCustomer): string;
export declare function subscriptionCustomerFromJSON(jsonString: string): SafeParseResult<SubscriptionCustomer, SDKValidationError>;
//# sourceMappingURL=subscriptioncustomer.d.ts.map