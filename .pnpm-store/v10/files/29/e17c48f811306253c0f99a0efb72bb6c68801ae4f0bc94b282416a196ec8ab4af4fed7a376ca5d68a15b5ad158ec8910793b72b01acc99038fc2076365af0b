/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CountAggregation$inboundSchema, CountAggregation$outboundSchema, } from "./countaggregation.js";
import { Filter$inboundSchema, Filter$outboundSchema, } from "./filter.js";
import { PropertyAggregation$inboundSchema, PropertyAggregation$outboundSchema, } from "./propertyaggregation.js";
/** @internal */
export const MeterCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const MeterCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterCreateMetadata$;
(function (MeterCreateMetadata$) {
    /** @deprecated use `MeterCreateMetadata$inboundSchema` instead. */
    MeterCreateMetadata$.inboundSchema = MeterCreateMetadata$inboundSchema;
    /** @deprecated use `MeterCreateMetadata$outboundSchema` instead. */
    MeterCreateMetadata$.outboundSchema = MeterCreateMetadata$outboundSchema;
})(MeterCreateMetadata$ || (MeterCreateMetadata$ = {}));
export function meterCreateMetadataToJSON(meterCreateMetadata) {
    return JSON.stringify(MeterCreateMetadata$outboundSchema.parse(meterCreateMetadata));
}
export function meterCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterCreateMetadata' from JSON`);
}
/** @internal */
export const MeterCreateAggregation$inboundSchema = z.union([
    CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/** @internal */
export const MeterCreateAggregation$outboundSchema = z.union([
    CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterCreateAggregation$;
(function (MeterCreateAggregation$) {
    /** @deprecated use `MeterCreateAggregation$inboundSchema` instead. */
    MeterCreateAggregation$.inboundSchema = MeterCreateAggregation$inboundSchema;
    /** @deprecated use `MeterCreateAggregation$outboundSchema` instead. */
    MeterCreateAggregation$.outboundSchema = MeterCreateAggregation$outboundSchema;
})(MeterCreateAggregation$ || (MeterCreateAggregation$ = {}));
export function meterCreateAggregationToJSON(meterCreateAggregation) {
    return JSON.stringify(MeterCreateAggregation$outboundSchema.parse(meterCreateAggregation));
}
export function meterCreateAggregationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterCreateAggregation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterCreateAggregation' from JSON`);
}
/** @internal */
export const MeterCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    filter: Filter$inboundSchema,
    aggregation: z.union([
        CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
    ]),
    organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
    });
});
/** @internal */
export const MeterCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    filter: Filter$outboundSchema,
    aggregation: z.union([
        CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
    ]),
    organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterCreate$;
(function (MeterCreate$) {
    /** @deprecated use `MeterCreate$inboundSchema` instead. */
    MeterCreate$.inboundSchema = MeterCreate$inboundSchema;
    /** @deprecated use `MeterCreate$outboundSchema` instead. */
    MeterCreate$.outboundSchema = MeterCreate$outboundSchema;
})(MeterCreate$ || (MeterCreate$ = {}));
export function meterCreateToJSON(meterCreate) {
    return JSON.stringify(MeterCreate$outboundSchema.parse(meterCreate));
}
export function meterCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterCreate' from JSON`);
}
//# sourceMappingURL=metercreate.js.map