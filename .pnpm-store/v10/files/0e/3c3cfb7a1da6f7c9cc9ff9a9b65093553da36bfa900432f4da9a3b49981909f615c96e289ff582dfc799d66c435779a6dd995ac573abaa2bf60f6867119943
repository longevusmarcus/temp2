/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { CountAggregation$inboundSchema, CountAggregation$outboundSchema, } from "./countaggregation.js";
import { Filter$inboundSchema, Filter$outboundSchema, } from "./filter.js";
import { PropertyAggregation$inboundSchema, PropertyAggregation$outboundSchema, } from "./propertyaggregation.js";
/** @internal */
export const MeterUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const MeterUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterUpdateMetadata$;
(function (MeterUpdateMetadata$) {
    /** @deprecated use `MeterUpdateMetadata$inboundSchema` instead. */
    MeterUpdateMetadata$.inboundSchema = MeterUpdateMetadata$inboundSchema;
    /** @deprecated use `MeterUpdateMetadata$outboundSchema` instead. */
    MeterUpdateMetadata$.outboundSchema = MeterUpdateMetadata$outboundSchema;
})(MeterUpdateMetadata$ || (MeterUpdateMetadata$ = {}));
export function meterUpdateMetadataToJSON(meterUpdateMetadata) {
    return JSON.stringify(MeterUpdateMetadata$outboundSchema.parse(meterUpdateMetadata));
}
export function meterUpdateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterUpdateMetadata' from JSON`);
}
/** @internal */
export const Aggregation$inboundSchema = z.union([
    CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/** @internal */
export const Aggregation$outboundSchema = z.union([
    CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Aggregation$;
(function (Aggregation$) {
    /** @deprecated use `Aggregation$inboundSchema` instead. */
    Aggregation$.inboundSchema = Aggregation$inboundSchema;
    /** @deprecated use `Aggregation$outboundSchema` instead. */
    Aggregation$.outboundSchema = Aggregation$outboundSchema;
})(Aggregation$ || (Aggregation$ = {}));
export function aggregationToJSON(aggregation) {
    return JSON.stringify(Aggregation$outboundSchema.parse(aggregation));
}
export function aggregationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Aggregation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Aggregation' from JSON`);
}
/** @internal */
export const MeterUpdate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    filter: z.nullable(Filter$inboundSchema).optional(),
    aggregation: z.nullable(z.union([
        CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({
            func: v.func,
        }))),
    ])).optional(),
});
/** @internal */
export const MeterUpdate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    filter: z.nullable(Filter$outboundSchema).optional(),
    aggregation: z.nullable(z.union([
        CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({
            func: v.func,
        }))),
        PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({
            func: v.func,
        }))),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterUpdate$;
(function (MeterUpdate$) {
    /** @deprecated use `MeterUpdate$inboundSchema` instead. */
    MeterUpdate$.inboundSchema = MeterUpdate$inboundSchema;
    /** @deprecated use `MeterUpdate$outboundSchema` instead. */
    MeterUpdate$.outboundSchema = MeterUpdate$outboundSchema;
})(MeterUpdate$ || (MeterUpdate$ = {}));
export function meterUpdateToJSON(meterUpdate) {
    return JSON.stringify(MeterUpdate$outboundSchema.parse(meterUpdate));
}
export function meterUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterUpdate' from JSON`);
}
//# sourceMappingURL=meterupdate.js.map