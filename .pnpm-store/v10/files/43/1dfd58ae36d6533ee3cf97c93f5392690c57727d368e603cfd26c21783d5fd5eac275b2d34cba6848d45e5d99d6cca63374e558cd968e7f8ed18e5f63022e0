import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AttachedCustomFieldCreate, AttachedCustomFieldCreate$Outbound } from "./attachedcustomfieldcreate.js";
import { ProductPriceCustomCreate, ProductPriceCustomCreate$Outbound } from "./productpricecustomcreate.js";
import { ProductPriceFixedCreate, ProductPriceFixedCreate$Outbound } from "./productpricefixedcreate.js";
import { ProductPriceFreeCreate, ProductPriceFreeCreate$Outbound } from "./productpricefreecreate.js";
import { SubscriptionRecurringInterval } from "./subscriptionrecurringinterval.js";
export type ProductCreateMetadata = string | number | boolean;
export type ProductCreatePrices = ProductPriceFreeCreate | ProductPriceFixedCreate | ProductPriceCustomCreate;
/**
 * Schema to create a product.
 */
export type ProductCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    /**
     * The name of the product.
     */
    name: string;
    /**
     * The description of the product.
     */
    description?: string | null | undefined;
    /**
     * The recurring interval of the product. If `None`, the product is a one-time purchase.
     */
    recurringInterval: SubscriptionRecurringInterval | null;
    /**
     * List of available prices for this product. Currently, only a single price is supported.
     */
    prices: Array<ProductPriceFreeCreate | ProductPriceFixedCreate | ProductPriceCustomCreate>;
    /**
     * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
     */
    medias?: Array<string> | null | undefined;
    /**
     * List of custom fields to attach.
     */
    attachedCustomFields?: Array<AttachedCustomFieldCreate> | undefined;
    /**
     * The ID of the organization owning the product. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
};
/** @internal */
export declare const ProductCreateMetadata$inboundSchema: z.ZodType<ProductCreateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductCreateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const ProductCreateMetadata$outboundSchema: z.ZodType<ProductCreateMetadata$Outbound, z.ZodTypeDef, ProductCreateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductCreateMetadata$ {
    /** @deprecated use `ProductCreateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductCreateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductCreateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductCreateMetadata$Outbound, z.ZodTypeDef, ProductCreateMetadata>;
    /** @deprecated use `ProductCreateMetadata$Outbound` instead. */
    type Outbound = ProductCreateMetadata$Outbound;
}
export declare function productCreateMetadataToJSON(productCreateMetadata: ProductCreateMetadata): string;
export declare function productCreateMetadataFromJSON(jsonString: string): SafeParseResult<ProductCreateMetadata, SDKValidationError>;
/** @internal */
export declare const ProductCreatePrices$inboundSchema: z.ZodType<ProductCreatePrices, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductCreatePrices$Outbound = ProductPriceFreeCreate$Outbound | ProductPriceFixedCreate$Outbound | ProductPriceCustomCreate$Outbound;
/** @internal */
export declare const ProductCreatePrices$outboundSchema: z.ZodType<ProductCreatePrices$Outbound, z.ZodTypeDef, ProductCreatePrices>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductCreatePrices$ {
    /** @deprecated use `ProductCreatePrices$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductCreatePrices, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductCreatePrices$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductCreatePrices$Outbound, z.ZodTypeDef, ProductCreatePrices>;
    /** @deprecated use `ProductCreatePrices$Outbound` instead. */
    type Outbound = ProductCreatePrices$Outbound;
}
export declare function productCreatePricesToJSON(productCreatePrices: ProductCreatePrices): string;
export declare function productCreatePricesFromJSON(jsonString: string): SafeParseResult<ProductCreatePrices, SDKValidationError>;
/** @internal */
export declare const ProductCreate$inboundSchema: z.ZodType<ProductCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductCreate$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    name: string;
    description?: string | null | undefined;
    recurring_interval: string | null;
    prices: Array<ProductPriceFreeCreate$Outbound | ProductPriceFixedCreate$Outbound | ProductPriceCustomCreate$Outbound>;
    medias?: Array<string> | null | undefined;
    attached_custom_fields?: Array<AttachedCustomFieldCreate$Outbound> | undefined;
    organization_id?: string | null | undefined;
};
/** @internal */
export declare const ProductCreate$outboundSchema: z.ZodType<ProductCreate$Outbound, z.ZodTypeDef, ProductCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductCreate$ {
    /** @deprecated use `ProductCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductCreate$Outbound, z.ZodTypeDef, ProductCreate>;
    /** @deprecated use `ProductCreate$Outbound` instead. */
    type Outbound = ProductCreate$Outbound;
}
export declare function productCreateToJSON(productCreate: ProductCreate): string;
export declare function productCreateFromJSON(jsonString: string): SafeParseResult<ProductCreate, SDKValidationError>;
//# sourceMappingURL=productcreate.d.ts.map