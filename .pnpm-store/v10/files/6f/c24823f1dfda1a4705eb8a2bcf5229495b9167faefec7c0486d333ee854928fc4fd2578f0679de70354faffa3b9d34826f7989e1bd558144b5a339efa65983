import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type AuthorizationCodeTokenRequest = {
    grantType?: "authorization_code" | undefined;
    clientId: string;
    clientSecret: string;
    code: string;
    redirectUri: string;
};
/** @internal */
export declare const AuthorizationCodeTokenRequest$inboundSchema: z.ZodType<AuthorizationCodeTokenRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthorizationCodeTokenRequest$Outbound = {
    grant_type: "authorization_code";
    client_id: string;
    client_secret: string;
    code: string;
    redirect_uri: string;
};
/** @internal */
export declare const AuthorizationCodeTokenRequest$outboundSchema: z.ZodType<AuthorizationCodeTokenRequest$Outbound, z.ZodTypeDef, AuthorizationCodeTokenRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthorizationCodeTokenRequest$ {
    /** @deprecated use `AuthorizationCodeTokenRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthorizationCodeTokenRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthorizationCodeTokenRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthorizationCodeTokenRequest$Outbound, z.ZodTypeDef, AuthorizationCodeTokenRequest>;
    /** @deprecated use `AuthorizationCodeTokenRequest$Outbound` instead. */
    type Outbound = AuthorizationCodeTokenRequest$Outbound;
}
export declare function authorizationCodeTokenRequestToJSON(authorizationCodeTokenRequest: AuthorizationCodeTokenRequest): string;
export declare function authorizationCodeTokenRequestFromJSON(jsonString: string): SafeParseResult<AuthorizationCodeTokenRequest, SDKValidationError>;
//# sourceMappingURL=authorizationcodetokenrequest.d.ts.map