/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const S3FileUploadPart$inboundSchema = z.object({
    number: z.number().int(),
    chunk_start: z.number().int(),
    chunk_end: z.number().int(),
    checksum_sha256_base64: z.nullable(z.string()).optional(),
    url: z.string(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    headers: z.record(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "chunk_start": "chunkStart",
        "chunk_end": "chunkEnd",
        "checksum_sha256_base64": "checksumSha256Base64",
        "expires_at": "expiresAt",
    });
});
/** @internal */
export const S3FileUploadPart$outboundSchema = z.object({
    number: z.number().int(),
    chunkStart: z.number().int(),
    chunkEnd: z.number().int(),
    checksumSha256Base64: z.nullable(z.string()).optional(),
    url: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    headers: z.record(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        chunkStart: "chunk_start",
        chunkEnd: "chunk_end",
        checksumSha256Base64: "checksum_sha256_base64",
        expiresAt: "expires_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var S3FileUploadPart$;
(function (S3FileUploadPart$) {
    /** @deprecated use `S3FileUploadPart$inboundSchema` instead. */
    S3FileUploadPart$.inboundSchema = S3FileUploadPart$inboundSchema;
    /** @deprecated use `S3FileUploadPart$outboundSchema` instead. */
    S3FileUploadPart$.outboundSchema = S3FileUploadPart$outboundSchema;
})(S3FileUploadPart$ || (S3FileUploadPart$ = {}));
export function s3FileUploadPartToJSON(s3FileUploadPart) {
    return JSON.stringify(S3FileUploadPart$outboundSchema.parse(s3FileUploadPart));
}
export function s3FileUploadPartFromJSON(jsonString) {
    return safeParse(jsonString, (x) => S3FileUploadPart$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'S3FileUploadPart' from JSON`);
}
//# sourceMappingURL=s3fileuploadpart.js.map