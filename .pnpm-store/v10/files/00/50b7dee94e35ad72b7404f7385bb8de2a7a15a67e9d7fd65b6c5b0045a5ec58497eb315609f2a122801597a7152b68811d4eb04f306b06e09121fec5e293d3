import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { AttachedCustomField, AttachedCustomField$Outbound } from "./attachedcustomfield.js";
import { CheckoutDiscountFixedOnceForeverDuration, CheckoutDiscountFixedOnceForeverDuration$Outbound } from "./checkoutdiscountfixedonceforeverduration.js";
import { CheckoutDiscountFixedRepeatDuration, CheckoutDiscountFixedRepeatDuration$Outbound } from "./checkoutdiscountfixedrepeatduration.js";
import { CheckoutDiscountPercentageOnceForeverDuration, CheckoutDiscountPercentageOnceForeverDuration$Outbound } from "./checkoutdiscountpercentageonceforeverduration.js";
import { CheckoutDiscountPercentageRepeatDuration, CheckoutDiscountPercentageRepeatDuration$Outbound } from "./checkoutdiscountpercentagerepeatduration.js";
import { CheckoutProduct, CheckoutProduct$Outbound } from "./checkoutproduct.js";
import { CheckoutStatus } from "./checkoutstatus.js";
import { LegacyRecurringProductPrice, LegacyRecurringProductPrice$Outbound } from "./legacyrecurringproductprice.js";
import { PaymentProcessor } from "./paymentprocessor.js";
import { ProductPrice, ProductPrice$Outbound } from "./productprice.js";
export type CheckoutCustomFieldData = string | number | boolean | Date;
export type CheckoutMetadata = string | number | boolean;
/**
 * Price of the selected product.
 */
export type CheckoutProductPrice = LegacyRecurringProductPrice | ProductPrice;
export type CheckoutDiscount = CheckoutDiscountPercentageOnceForeverDuration | CheckoutDiscountFixedOnceForeverDuration | CheckoutDiscountPercentageRepeatDuration | CheckoutDiscountFixedRepeatDuration;
export type CustomerMetadata = string | number | boolean;
/**
 * Checkout session data retrieved using an access token.
 */
export type Checkout = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: {
        [k: string]: string | number | boolean | Date | null;
    } | undefined;
    paymentProcessor: PaymentProcessor;
    status: CheckoutStatus;
    /**
     * Client secret used to update and complete the checkout session from the client.
     */
    clientSecret: string;
    /**
     * URL where the customer can access the checkout session.
     */
    url: string;
    /**
     * Expiration date and time of the checkout session.
     */
    expiresAt: Date;
    /**
     * URL where the customer will be redirected after a successful payment.
     */
    successUrl: string;
    /**
     * When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.
     */
    embedOrigin: string | null;
    amount: number | null;
    /**
     * Computed tax amount to pay in cents.
     */
    taxAmount: number | null;
    /**
     * Currency code of the checkout session.
     */
    currency: string | null;
    /**
     * Subtotal amount in cents, including discounts and before tax.
     */
    subtotalAmount: number | null;
    /**
     * Total amount to pay in cents, including discounts and after tax.
     */
    totalAmount: number | null;
    /**
     * ID of the product to checkout.
     */
    productId: string;
    /**
     * ID of the product price to checkout.
     */
    productPriceId: string;
    /**
     * ID of the discount applied to the checkout.
     */
    discountId: string | null;
    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     */
    allowDiscountCodes: boolean;
    /**
     * Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.
     */
    isDiscountApplicable: boolean;
    /**
     * Whether the product price is free, regardless of discounts.
     */
    isFreeProductPrice: boolean;
    /**
     * Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.
     */
    isPaymentRequired: boolean;
    /**
     * Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.
     */
    isPaymentSetupRequired: boolean;
    /**
     * Whether the checkout requires a payment form, whether because of a payment or payment method setup.
     */
    isPaymentFormRequired: boolean;
    customerId: string | null;
    /**
     * Name of the customer.
     */
    customerName: string | null;
    /**
     * Email address of the customer.
     */
    customerEmail: string | null;
    customerIpAddress: string | null;
    customerBillingAddress: Address | null;
    customerTaxId: string | null;
    paymentProcessorMetadata: {
        [k: string]: string;
    };
    metadata: {
        [k: string]: string | number | boolean;
    };
    /**
     * ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.
     */
    customerExternalId: string | null;
    /**
     * List of products available to select.
     */
    products: Array<CheckoutProduct>;
    /**
     * Product data for a checkout session.
     */
    product: CheckoutProduct;
    /**
     * Price of the selected product.
     */
    productPrice: LegacyRecurringProductPrice | ProductPrice;
    discount: CheckoutDiscountPercentageOnceForeverDuration | CheckoutDiscountFixedOnceForeverDuration | CheckoutDiscountPercentageRepeatDuration | CheckoutDiscountFixedRepeatDuration | null;
    subscriptionId: string | null;
    attachedCustomFields: Array<AttachedCustomField>;
    customerMetadata: {
        [k: string]: string | number | boolean;
    };
};
/** @internal */
export declare const CheckoutCustomFieldData$inboundSchema: z.ZodType<CheckoutCustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutCustomFieldData$Outbound = string | number | boolean | string;
/** @internal */
export declare const CheckoutCustomFieldData$outboundSchema: z.ZodType<CheckoutCustomFieldData$Outbound, z.ZodTypeDef, CheckoutCustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutCustomFieldData$ {
    /** @deprecated use `CheckoutCustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutCustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutCustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutCustomFieldData$Outbound, z.ZodTypeDef, CheckoutCustomFieldData>;
    /** @deprecated use `CheckoutCustomFieldData$Outbound` instead. */
    type Outbound = CheckoutCustomFieldData$Outbound;
}
export declare function checkoutCustomFieldDataToJSON(checkoutCustomFieldData: CheckoutCustomFieldData): string;
export declare function checkoutCustomFieldDataFromJSON(jsonString: string): SafeParseResult<CheckoutCustomFieldData, SDKValidationError>;
/** @internal */
export declare const CheckoutMetadata$inboundSchema: z.ZodType<CheckoutMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CheckoutMetadata$outboundSchema: z.ZodType<CheckoutMetadata$Outbound, z.ZodTypeDef, CheckoutMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutMetadata$ {
    /** @deprecated use `CheckoutMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutMetadata$Outbound, z.ZodTypeDef, CheckoutMetadata>;
    /** @deprecated use `CheckoutMetadata$Outbound` instead. */
    type Outbound = CheckoutMetadata$Outbound;
}
export declare function checkoutMetadataToJSON(checkoutMetadata: CheckoutMetadata): string;
export declare function checkoutMetadataFromJSON(jsonString: string): SafeParseResult<CheckoutMetadata, SDKValidationError>;
/** @internal */
export declare const CheckoutProductPrice$inboundSchema: z.ZodType<CheckoutProductPrice, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutProductPrice$Outbound = LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
/** @internal */
export declare const CheckoutProductPrice$outboundSchema: z.ZodType<CheckoutProductPrice$Outbound, z.ZodTypeDef, CheckoutProductPrice>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutProductPrice$ {
    /** @deprecated use `CheckoutProductPrice$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutProductPrice, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutProductPrice$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutProductPrice$Outbound, z.ZodTypeDef, CheckoutProductPrice>;
    /** @deprecated use `CheckoutProductPrice$Outbound` instead. */
    type Outbound = CheckoutProductPrice$Outbound;
}
export declare function checkoutProductPriceToJSON(checkoutProductPrice: CheckoutProductPrice): string;
export declare function checkoutProductPriceFromJSON(jsonString: string): SafeParseResult<CheckoutProductPrice, SDKValidationError>;
/** @internal */
export declare const CheckoutDiscount$inboundSchema: z.ZodType<CheckoutDiscount, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutDiscount$Outbound = CheckoutDiscountPercentageOnceForeverDuration$Outbound | CheckoutDiscountFixedOnceForeverDuration$Outbound | CheckoutDiscountPercentageRepeatDuration$Outbound | CheckoutDiscountFixedRepeatDuration$Outbound;
/** @internal */
export declare const CheckoutDiscount$outboundSchema: z.ZodType<CheckoutDiscount$Outbound, z.ZodTypeDef, CheckoutDiscount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutDiscount$ {
    /** @deprecated use `CheckoutDiscount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutDiscount, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutDiscount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutDiscount$Outbound, z.ZodTypeDef, CheckoutDiscount>;
    /** @deprecated use `CheckoutDiscount$Outbound` instead. */
    type Outbound = CheckoutDiscount$Outbound;
}
export declare function checkoutDiscountToJSON(checkoutDiscount: CheckoutDiscount): string;
export declare function checkoutDiscountFromJSON(jsonString: string): SafeParseResult<CheckoutDiscount, SDKValidationError>;
/** @internal */
export declare const CustomerMetadata$inboundSchema: z.ZodType<CustomerMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomerMetadata$outboundSchema: z.ZodType<CustomerMetadata$Outbound, z.ZodTypeDef, CustomerMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerMetadata$ {
    /** @deprecated use `CustomerMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerMetadata$Outbound, z.ZodTypeDef, CustomerMetadata>;
    /** @deprecated use `CustomerMetadata$Outbound` instead. */
    type Outbound = CustomerMetadata$Outbound;
}
export declare function customerMetadataToJSON(customerMetadata: CustomerMetadata): string;
export declare function customerMetadataFromJSON(jsonString: string): SafeParseResult<CustomerMetadata, SDKValidationError>;
/** @internal */
export declare const Checkout$inboundSchema: z.ZodType<Checkout, z.ZodTypeDef, unknown>;
/** @internal */
export type Checkout$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    custom_field_data?: {
        [k: string]: string | number | boolean | string | null;
    } | undefined;
    payment_processor: string;
    status: string;
    client_secret: string;
    url: string;
    expires_at: string;
    success_url: string;
    embed_origin: string | null;
    amount: number | null;
    tax_amount: number | null;
    currency: string | null;
    subtotal_amount: number | null;
    total_amount: number | null;
    product_id: string;
    product_price_id: string;
    discount_id: string | null;
    allow_discount_codes: boolean;
    is_discount_applicable: boolean;
    is_free_product_price: boolean;
    is_payment_required: boolean;
    is_payment_setup_required: boolean;
    is_payment_form_required: boolean;
    customer_id: string | null;
    customer_name: string | null;
    customer_email: string | null;
    customer_ip_address: string | null;
    customer_billing_address: Address$Outbound | null;
    customer_tax_id: string | null;
    payment_processor_metadata: {
        [k: string]: string;
    };
    metadata: {
        [k: string]: string | number | boolean;
    };
    customer_external_id: string | null;
    products: Array<CheckoutProduct$Outbound>;
    product: CheckoutProduct$Outbound;
    product_price: LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
    discount: CheckoutDiscountPercentageOnceForeverDuration$Outbound | CheckoutDiscountFixedOnceForeverDuration$Outbound | CheckoutDiscountPercentageRepeatDuration$Outbound | CheckoutDiscountFixedRepeatDuration$Outbound | null;
    subscription_id: string | null;
    attached_custom_fields: Array<AttachedCustomField$Outbound>;
    customer_metadata: {
        [k: string]: string | number | boolean;
    };
};
/** @internal */
export declare const Checkout$outboundSchema: z.ZodType<Checkout$Outbound, z.ZodTypeDef, Checkout>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Checkout$ {
    /** @deprecated use `Checkout$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Checkout, z.ZodTypeDef, unknown>;
    /** @deprecated use `Checkout$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Checkout$Outbound, z.ZodTypeDef, Checkout>;
    /** @deprecated use `Checkout$Outbound` instead. */
    type Outbound = Checkout$Outbound;
}
export declare function checkoutToJSON(checkout: Checkout): string;
export declare function checkoutFromJSON(jsonString: string): SafeParseResult<Checkout, SDKValidationError>;
//# sourceMappingURL=checkout.d.ts.map