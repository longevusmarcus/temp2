/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { DiscountDuration$inboundSchema, DiscountDuration$outboundSchema, } from "./discountduration.js";
import { DiscountType$inboundSchema, DiscountType$outboundSchema, } from "./discounttype.js";
/** @internal */
export const DiscountPercentageOnceForeverDurationCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const DiscountPercentageOnceForeverDurationCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountPercentageOnceForeverDurationCreateMetadata$;
(function (DiscountPercentageOnceForeverDurationCreateMetadata$) {
    /** @deprecated use `DiscountPercentageOnceForeverDurationCreateMetadata$inboundSchema` instead. */
    DiscountPercentageOnceForeverDurationCreateMetadata$.inboundSchema = DiscountPercentageOnceForeverDurationCreateMetadata$inboundSchema;
    /** @deprecated use `DiscountPercentageOnceForeverDurationCreateMetadata$outboundSchema` instead. */
    DiscountPercentageOnceForeverDurationCreateMetadata$.outboundSchema = DiscountPercentageOnceForeverDurationCreateMetadata$outboundSchema;
})(DiscountPercentageOnceForeverDurationCreateMetadata$ || (DiscountPercentageOnceForeverDurationCreateMetadata$ = {}));
export function discountPercentageOnceForeverDurationCreateMetadataToJSON(discountPercentageOnceForeverDurationCreateMetadata) {
    return JSON.stringify(DiscountPercentageOnceForeverDurationCreateMetadata$outboundSchema.parse(discountPercentageOnceForeverDurationCreateMetadata));
}
export function discountPercentageOnceForeverDurationCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountPercentageOnceForeverDurationCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountPercentageOnceForeverDurationCreateMetadata' from JSON`);
}
/** @internal */
export const DiscountPercentageOnceForeverDurationCreate$inboundSchema = z.object({
    duration: DiscountDuration$inboundSchema,
    type: DiscountType$inboundSchema,
    basis_points: z.number().int(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    code: z.nullable(z.string()).optional(),
    starts_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    max_redemptions: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
    organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "basis_points": "basisPoints",
        "starts_at": "startsAt",
        "ends_at": "endsAt",
        "max_redemptions": "maxRedemptions",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const DiscountPercentageOnceForeverDurationCreate$outboundSchema = z.object({
    duration: DiscountDuration$outboundSchema,
    type: DiscountType$outboundSchema,
    basisPoints: z.number().int(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    name: z.string(),
    code: z.nullable(z.string()).optional(),
    startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    maxRedemptions: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
    organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        basisPoints: "basis_points",
        startsAt: "starts_at",
        endsAt: "ends_at",
        maxRedemptions: "max_redemptions",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountPercentageOnceForeverDurationCreate$;
(function (DiscountPercentageOnceForeverDurationCreate$) {
    /** @deprecated use `DiscountPercentageOnceForeverDurationCreate$inboundSchema` instead. */
    DiscountPercentageOnceForeverDurationCreate$.inboundSchema = DiscountPercentageOnceForeverDurationCreate$inboundSchema;
    /** @deprecated use `DiscountPercentageOnceForeverDurationCreate$outboundSchema` instead. */
    DiscountPercentageOnceForeverDurationCreate$.outboundSchema = DiscountPercentageOnceForeverDurationCreate$outboundSchema;
})(DiscountPercentageOnceForeverDurationCreate$ || (DiscountPercentageOnceForeverDurationCreate$ = {}));
export function discountPercentageOnceForeverDurationCreateToJSON(discountPercentageOnceForeverDurationCreate) {
    return JSON.stringify(DiscountPercentageOnceForeverDurationCreate$outboundSchema.parse(discountPercentageOnceForeverDurationCreate));
}
export function discountPercentageOnceForeverDurationCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountPercentageOnceForeverDurationCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountPercentageOnceForeverDurationCreate' from JSON`);
}
//# sourceMappingURL=discountpercentageonceforeverdurationcreate.js.map