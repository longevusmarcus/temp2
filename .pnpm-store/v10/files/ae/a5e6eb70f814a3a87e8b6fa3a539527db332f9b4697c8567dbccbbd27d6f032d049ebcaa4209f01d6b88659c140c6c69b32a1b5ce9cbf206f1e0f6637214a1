/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { RFCDate } from "../../types/rfcdate.js";
import { ProductBillingType$inboundSchema, ProductBillingType$outboundSchema, } from "../components/productbillingtype.js";
import { TimeInterval$inboundSchema, TimeInterval$outboundSchema, } from "../components/timeinterval.js";
/** @internal */
export const MetricsGetQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const MetricsGetQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsGetQueryParamOrganizationIDFilter$;
(function (MetricsGetQueryParamOrganizationIDFilter$) {
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$inboundSchema` instead. */
    MetricsGetQueryParamOrganizationIDFilter$.inboundSchema = MetricsGetQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$outboundSchema` instead. */
    MetricsGetQueryParamOrganizationIDFilter$.outboundSchema = MetricsGetQueryParamOrganizationIDFilter$outboundSchema;
})(MetricsGetQueryParamOrganizationIDFilter$ || (MetricsGetQueryParamOrganizationIDFilter$ = {}));
export function metricsGetQueryParamOrganizationIDFilterToJSON(metricsGetQueryParamOrganizationIDFilter) {
    return JSON.stringify(MetricsGetQueryParamOrganizationIDFilter$outboundSchema.parse(metricsGetQueryParamOrganizationIDFilter));
}
export function metricsGetQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsGetQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const MetricsGetQueryParamProductIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const MetricsGetQueryParamProductIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsGetQueryParamProductIDFilter$;
(function (MetricsGetQueryParamProductIDFilter$) {
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$inboundSchema` instead. */
    MetricsGetQueryParamProductIDFilter$.inboundSchema = MetricsGetQueryParamProductIDFilter$inboundSchema;
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$outboundSchema` instead. */
    MetricsGetQueryParamProductIDFilter$.outboundSchema = MetricsGetQueryParamProductIDFilter$outboundSchema;
})(MetricsGetQueryParamProductIDFilter$ || (MetricsGetQueryParamProductIDFilter$ = {}));
export function metricsGetQueryParamProductIDFilterToJSON(metricsGetQueryParamProductIDFilter) {
    return JSON.stringify(MetricsGetQueryParamProductIDFilter$outboundSchema.parse(metricsGetQueryParamProductIDFilter));
}
export function metricsGetQueryParamProductIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsGetQueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetQueryParamProductIDFilter' from JSON`);
}
/** @internal */
export const QueryParamProductBillingTypeFilter$inboundSchema = z.union([
    ProductBillingType$inboundSchema,
    z.array(ProductBillingType$inboundSchema),
]);
/** @internal */
export const QueryParamProductBillingTypeFilter$outboundSchema = z.union([
    ProductBillingType$outboundSchema,
    z.array(ProductBillingType$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamProductBillingTypeFilter$;
(function (QueryParamProductBillingTypeFilter$) {
    /** @deprecated use `QueryParamProductBillingTypeFilter$inboundSchema` instead. */
    QueryParamProductBillingTypeFilter$.inboundSchema = QueryParamProductBillingTypeFilter$inboundSchema;
    /** @deprecated use `QueryParamProductBillingTypeFilter$outboundSchema` instead. */
    QueryParamProductBillingTypeFilter$.outboundSchema = QueryParamProductBillingTypeFilter$outboundSchema;
})(QueryParamProductBillingTypeFilter$ || (QueryParamProductBillingTypeFilter$ = {}));
export function queryParamProductBillingTypeFilterToJSON(queryParamProductBillingTypeFilter) {
    return JSON.stringify(QueryParamProductBillingTypeFilter$outboundSchema.parse(queryParamProductBillingTypeFilter));
}
export function queryParamProductBillingTypeFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamProductBillingTypeFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamProductBillingTypeFilter' from JSON`);
}
/** @internal */
export const MetricsGetQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const MetricsGetQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsGetQueryParamCustomerIDFilter$;
(function (MetricsGetQueryParamCustomerIDFilter$) {
    /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$inboundSchema` instead. */
    MetricsGetQueryParamCustomerIDFilter$.inboundSchema = MetricsGetQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$outboundSchema` instead. */
    MetricsGetQueryParamCustomerIDFilter$.outboundSchema = MetricsGetQueryParamCustomerIDFilter$outboundSchema;
})(MetricsGetQueryParamCustomerIDFilter$ || (MetricsGetQueryParamCustomerIDFilter$ = {}));
export function metricsGetQueryParamCustomerIDFilterToJSON(metricsGetQueryParamCustomerIDFilter) {
    return JSON.stringify(MetricsGetQueryParamCustomerIDFilter$outboundSchema.parse(metricsGetQueryParamCustomerIDFilter));
}
export function metricsGetQueryParamCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsGetQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
export const MetricsGetRequest$inboundSchema = z.object({
    start_date: z.string().transform(v => new RFCDate(v)),
    end_date: z.string().transform(v => new RFCDate(v)),
    interval: TimeInterval$inboundSchema,
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    billing_type: z.nullable(z.union([
        ProductBillingType$inboundSchema,
        z.array(ProductBillingType$inboundSchema),
    ])).optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "start_date": "startDate",
        "end_date": "endDate",
        "organization_id": "organizationId",
        "product_id": "productId",
        "billing_type": "billingType",
        "customer_id": "customerId",
    });
});
/** @internal */
export const MetricsGetRequest$outboundSchema = z.object({
    startDate: z.instanceof(RFCDate).transform(v => v.toString()),
    endDate: z.instanceof(RFCDate).transform(v => v.toString()),
    interval: TimeInterval$outboundSchema,
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    billingType: z.nullable(z.union([
        ProductBillingType$outboundSchema,
        z.array(ProductBillingType$outboundSchema),
    ])).optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
}).transform((v) => {
    return remap$(v, {
        startDate: "start_date",
        endDate: "end_date",
        organizationId: "organization_id",
        productId: "product_id",
        billingType: "billing_type",
        customerId: "customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsGetRequest$;
(function (MetricsGetRequest$) {
    /** @deprecated use `MetricsGetRequest$inboundSchema` instead. */
    MetricsGetRequest$.inboundSchema = MetricsGetRequest$inboundSchema;
    /** @deprecated use `MetricsGetRequest$outboundSchema` instead. */
    MetricsGetRequest$.outboundSchema = MetricsGetRequest$outboundSchema;
})(MetricsGetRequest$ || (MetricsGetRequest$ = {}));
export function metricsGetRequestToJSON(metricsGetRequest) {
    return JSON.stringify(MetricsGetRequest$outboundSchema.parse(metricsGetRequest));
}
export function metricsGetRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsGetRequest' from JSON`);
}
//# sourceMappingURL=metricsget.js.map