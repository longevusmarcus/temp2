/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { TimeInterval$inboundSchema, TimeInterval$outboundSchema, } from "../components/timeinterval.js";
/** @internal */
export const MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetersQuantitiesQueryParamCustomerIDFilter$;
(function (MetersQuantitiesQueryParamCustomerIDFilter$) {
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema` instead. */
    MetersQuantitiesQueryParamCustomerIDFilter$.inboundSchema = MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema` instead. */
    MetersQuantitiesQueryParamCustomerIDFilter$.outboundSchema = MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema;
})(MetersQuantitiesQueryParamCustomerIDFilter$ || (MetersQuantitiesQueryParamCustomerIDFilter$ = {}));
export function metersQuantitiesQueryParamCustomerIDFilterToJSON(metersQuantitiesQueryParamCustomerIDFilter) {
    return JSON.stringify(MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema.parse(metersQuantitiesQueryParamCustomerIDFilter));
}
export function metersQuantitiesQueryParamCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersQuantitiesQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
export const QueryParamExternalCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const QueryParamExternalCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamExternalCustomerIDFilter$;
(function (QueryParamExternalCustomerIDFilter$) {
    /** @deprecated use `QueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    QueryParamExternalCustomerIDFilter$.inboundSchema = QueryParamExternalCustomerIDFilter$inboundSchema;
    /** @deprecated use `QueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    QueryParamExternalCustomerIDFilter$.outboundSchema = QueryParamExternalCustomerIDFilter$outboundSchema;
})(QueryParamExternalCustomerIDFilter$ || (QueryParamExternalCustomerIDFilter$ = {}));
export function queryParamExternalCustomerIDFilterToJSON(queryParamExternalCustomerIDFilter) {
    return JSON.stringify(QueryParamExternalCustomerIDFilter$outboundSchema.parse(queryParamExternalCustomerIDFilter));
}
export function queryParamExternalCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamExternalCustomerIDFilter' from JSON`);
}
/** @internal */
export const MetersQuantitiesRequest$inboundSchema = z.object({
    id: z.string(),
    start_timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    end_timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    interval: TimeInterval$inboundSchema,
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "start_timestamp": "startTimestamp",
        "end_timestamp": "endTimestamp",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
export const MetersQuantitiesRequest$outboundSchema = z.object({
    id: z.string(),
    startTimestamp: z.date().transform(v => v.toISOString()),
    endTimestamp: z.date().transform(v => v.toISOString()),
    interval: TimeInterval$outboundSchema,
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        startTimestamp: "start_timestamp",
        endTimestamp: "end_timestamp",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetersQuantitiesRequest$;
(function (MetersQuantitiesRequest$) {
    /** @deprecated use `MetersQuantitiesRequest$inboundSchema` instead. */
    MetersQuantitiesRequest$.inboundSchema = MetersQuantitiesRequest$inboundSchema;
    /** @deprecated use `MetersQuantitiesRequest$outboundSchema` instead. */
    MetersQuantitiesRequest$.outboundSchema = MetersQuantitiesRequest$outboundSchema;
})(MetersQuantitiesRequest$ || (MetersQuantitiesRequest$ = {}));
export function metersQuantitiesRequestToJSON(metersQuantitiesRequest) {
    return JSON.stringify(MetersQuantitiesRequest$outboundSchema.parse(metersQuantitiesRequest));
}
export function metersQuantitiesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetersQuantitiesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersQuantitiesRequest' from JSON`);
}
//# sourceMappingURL=metersquantities.js.map