/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Assignee$inboundSchema, Assignee$outboundSchema, } from "./assignee.js";
import { Author$inboundSchema, Author$outboundSchema, } from "./author.js";
import { Funding$inboundSchema, Funding$outboundSchema, } from "./funding.js";
import { Label$inboundSchema, Label$outboundSchema, } from "./label.js";
import { Platforms$inboundSchema, Platforms$outboundSchema, } from "./platforms.js";
import { Reactions$inboundSchema, Reactions$outboundSchema, } from "./reactions.js";
import { Repository$inboundSchema, Repository$outboundSchema, } from "./repository.js";
import { State$inboundSchema, State$outboundSchema } from "./state.js";
/** @internal */
export const Issue$inboundSchema = z
    .object({
    id: z.string(),
    platform: Platforms$inboundSchema,
    number: z.number().int(),
    title: z.string(),
    body: z.nullable(z.string()).optional(),
    comments: z.nullable(z.number().int()).optional(),
    labels: z.array(Label$inboundSchema).optional(),
    author: z.nullable(Author$inboundSchema).optional(),
    assignees: z.nullable(z.array(Assignee$inboundSchema)).optional(),
    reactions: z.nullable(Reactions$inboundSchema).optional(),
    state: State$inboundSchema,
    issue_closed_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    issue_modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    issue_created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    needs_confirmation_solved: z.boolean(),
    confirmed_solved_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    funding: Funding$inboundSchema,
    repository: Repository$inboundSchema,
    upfront_split_to_contributors: z.nullable(z.number().int()).optional(),
    pledge_badge_currently_embedded: z.boolean(),
    badge_custom_content: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "issue_closed_at": "issueClosedAt",
        "issue_modified_at": "issueModifiedAt",
        "issue_created_at": "issueCreatedAt",
        "needs_confirmation_solved": "needsConfirmationSolved",
        "confirmed_solved_at": "confirmedSolvedAt",
        "upfront_split_to_contributors": "upfrontSplitToContributors",
        "pledge_badge_currently_embedded": "pledgeBadgeCurrentlyEmbedded",
        "badge_custom_content": "badgeCustomContent",
    });
});
/** @internal */
export const Issue$outboundSchema = z.object({
    id: z.string(),
    platform: Platforms$outboundSchema,
    number: z.number().int(),
    title: z.string(),
    body: z.nullable(z.string()).optional(),
    comments: z.nullable(z.number().int()).optional(),
    labels: z.array(Label$outboundSchema).optional(),
    author: z.nullable(Author$outboundSchema).optional(),
    assignees: z.nullable(z.array(Assignee$outboundSchema)).optional(),
    reactions: z.nullable(Reactions$outboundSchema).optional(),
    state: State$outboundSchema,
    issueClosedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    issueModifiedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    issueCreatedAt: z.date().transform(v => v.toISOString()),
    needsConfirmationSolved: z.boolean(),
    confirmedSolvedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    funding: Funding$outboundSchema,
    repository: Repository$outboundSchema,
    upfrontSplitToContributors: z.nullable(z.number().int()).optional(),
    pledgeBadgeCurrentlyEmbedded: z.boolean(),
    badgeCustomContent: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        issueClosedAt: "issue_closed_at",
        issueModifiedAt: "issue_modified_at",
        issueCreatedAt: "issue_created_at",
        needsConfirmationSolved: "needs_confirmation_solved",
        confirmedSolvedAt: "confirmed_solved_at",
        upfrontSplitToContributors: "upfront_split_to_contributors",
        pledgeBadgeCurrentlyEmbedded: "pledge_badge_currently_embedded",
        badgeCustomContent: "badge_custom_content",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Issue$;
(function (Issue$) {
    /** @deprecated use `Issue$inboundSchema` instead. */
    Issue$.inboundSchema = Issue$inboundSchema;
    /** @deprecated use `Issue$outboundSchema` instead. */
    Issue$.outboundSchema = Issue$outboundSchema;
})(Issue$ || (Issue$ = {}));
export function issueToJSON(issue) {
    return JSON.stringify(Issue$outboundSchema.parse(issue));
}
export function issueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Issue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Issue' from JSON`);
}
//# sourceMappingURL=issue.js.map