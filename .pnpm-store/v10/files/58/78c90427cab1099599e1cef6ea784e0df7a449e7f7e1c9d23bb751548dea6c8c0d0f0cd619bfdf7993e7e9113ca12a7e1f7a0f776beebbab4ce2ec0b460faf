/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { OAuth2ClientConfigurationUpdate$inboundSchema, OAuth2ClientConfigurationUpdate$outboundSchema, } from "../components/oauth2clientconfigurationupdate.js";
/** @internal */
export const Oauth2ClientsOauth2UpdateClientRequest$inboundSchema = z.object({
    client_id: z.string(),
    OAuth2ClientConfigurationUpdate: OAuth2ClientConfigurationUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "client_id": "clientId",
        "OAuth2ClientConfigurationUpdate": "oAuth2ClientConfigurationUpdate",
    });
});
/** @internal */
export const Oauth2ClientsOauth2UpdateClientRequest$outboundSchema = z.object({
    clientId: z.string(),
    oAuth2ClientConfigurationUpdate: OAuth2ClientConfigurationUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        clientId: "client_id",
        oAuth2ClientConfigurationUpdate: "OAuth2ClientConfigurationUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Oauth2ClientsOauth2UpdateClientRequest$;
(function (Oauth2ClientsOauth2UpdateClientRequest$) {
    /** @deprecated use `Oauth2ClientsOauth2UpdateClientRequest$inboundSchema` instead. */
    Oauth2ClientsOauth2UpdateClientRequest$.inboundSchema = Oauth2ClientsOauth2UpdateClientRequest$inboundSchema;
    /** @deprecated use `Oauth2ClientsOauth2UpdateClientRequest$outboundSchema` instead. */
    Oauth2ClientsOauth2UpdateClientRequest$.outboundSchema = Oauth2ClientsOauth2UpdateClientRequest$outboundSchema;
})(Oauth2ClientsOauth2UpdateClientRequest$ || (Oauth2ClientsOauth2UpdateClientRequest$ = {}));
export function oauth2ClientsOauth2UpdateClientRequestToJSON(oauth2ClientsOauth2UpdateClientRequest) {
    return JSON.stringify(Oauth2ClientsOauth2UpdateClientRequest$outboundSchema.parse(oauth2ClientsOauth2UpdateClientRequest));
}
export function oauth2ClientsOauth2UpdateClientRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Oauth2ClientsOauth2UpdateClientRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Oauth2ClientsOauth2UpdateClientRequest' from JSON`);
}
//# sourceMappingURL=oauth2clientsoauth2updateclient.js.map