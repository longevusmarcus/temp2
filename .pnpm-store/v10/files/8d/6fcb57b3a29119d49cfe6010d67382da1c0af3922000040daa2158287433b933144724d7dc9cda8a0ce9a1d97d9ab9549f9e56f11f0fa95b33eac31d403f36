/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
export const TokenEndpointAuthMethod = {
    ClientSecretBasic: "client_secret_basic",
    ClientSecretPost: "client_secret_post",
    None: "none",
};
export const GrantTypes = {
    AuthorizationCode: "authorization_code",
    RefreshToken: "refresh_token",
};
/** @internal */
export const TokenEndpointAuthMethod$inboundSchema = z.nativeEnum(TokenEndpointAuthMethod);
/** @internal */
export const TokenEndpointAuthMethod$outboundSchema = TokenEndpointAuthMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TokenEndpointAuthMethod$;
(function (TokenEndpointAuthMethod$) {
    /** @deprecated use `TokenEndpointAuthMethod$inboundSchema` instead. */
    TokenEndpointAuthMethod$.inboundSchema = TokenEndpointAuthMethod$inboundSchema;
    /** @deprecated use `TokenEndpointAuthMethod$outboundSchema` instead. */
    TokenEndpointAuthMethod$.outboundSchema = TokenEndpointAuthMethod$outboundSchema;
})(TokenEndpointAuthMethod$ || (TokenEndpointAuthMethod$ = {}));
/** @internal */
export const GrantTypes$inboundSchema = z
    .nativeEnum(GrantTypes);
/** @internal */
export const GrantTypes$outboundSchema = GrantTypes$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantTypes$;
(function (GrantTypes$) {
    /** @deprecated use `GrantTypes$inboundSchema` instead. */
    GrantTypes$.inboundSchema = GrantTypes$inboundSchema;
    /** @deprecated use `GrantTypes$outboundSchema` instead. */
    GrantTypes$.outboundSchema = GrantTypes$outboundSchema;
})(GrantTypes$ || (GrantTypes$ = {}));
/** @internal */
export const OAuth2Client$inboundSchema = z.object({
    redirect_uris: z.array(z.string()),
    token_endpoint_auth_method: TokenEndpointAuthMethod$inboundSchema.default("client_secret_post"),
    grant_types: z.array(GrantTypes$inboundSchema).optional(),
    response_types: z.array(z.string()).optional(),
    scope: z.string().default("openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read refunds:read refunds:write metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write"),
    client_name: z.string(),
    client_uri: z.nullable(z.string()).optional(),
    logo_uri: z.nullable(z.string()).optional(),
    tos_uri: z.nullable(z.string()).optional(),
    policy_uri: z.nullable(z.string()).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    client_id: z.string(),
    client_secret: z.string(),
    client_id_issued_at: z.number().int(),
    client_secret_expires_at: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        "redirect_uris": "redirectUris",
        "token_endpoint_auth_method": "tokenEndpointAuthMethod",
        "grant_types": "grantTypes",
        "response_types": "responseTypes",
        "client_name": "clientName",
        "client_uri": "clientUri",
        "logo_uri": "logoUri",
        "tos_uri": "tosUri",
        "policy_uri": "policyUri",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "client_id": "clientId",
        "client_secret": "clientSecret",
        "client_id_issued_at": "clientIdIssuedAt",
        "client_secret_expires_at": "clientSecretExpiresAt",
    });
});
/** @internal */
export const OAuth2Client$outboundSchema = z.object({
    redirectUris: z.array(z.string()),
    tokenEndpointAuthMethod: TokenEndpointAuthMethod$outboundSchema.default("client_secret_post"),
    grantTypes: z.array(GrantTypes$outboundSchema).optional(),
    responseTypes: z.array(z.string()).optional(),
    scope: z.string().default("openid profile email user:read organizations:read organizations:write custom_fields:read custom_fields:write discounts:read discounts:write checkout_links:read checkout_links:write checkouts:read checkouts:write products:read products:write benefits:read benefits:write events:read events:write meters:read meters:write files:read files:write subscriptions:read subscriptions:write customers:read customers:write customer_sessions:write orders:read refunds:read refunds:write metrics:read webhooks:read webhooks:write external_organizations:read license_keys:read license_keys:write repositories:read repositories:write issues:read issues:write customer_portal:read customer_portal:write"),
    clientName: z.string(),
    clientUri: z.nullable(z.string()).optional(),
    logoUri: z.nullable(z.string()).optional(),
    tosUri: z.nullable(z.string()).optional(),
    policyUri: z.nullable(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    clientId: z.string(),
    clientSecret: z.string(),
    clientIdIssuedAt: z.number().int(),
    clientSecretExpiresAt: z.number().int(),
}).transform((v) => {
    return remap$(v, {
        redirectUris: "redirect_uris",
        tokenEndpointAuthMethod: "token_endpoint_auth_method",
        grantTypes: "grant_types",
        responseTypes: "response_types",
        clientName: "client_name",
        clientUri: "client_uri",
        logoUri: "logo_uri",
        tosUri: "tos_uri",
        policyUri: "policy_uri",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        clientId: "client_id",
        clientSecret: "client_secret",
        clientIdIssuedAt: "client_id_issued_at",
        clientSecretExpiresAt: "client_secret_expires_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OAuth2Client$;
(function (OAuth2Client$) {
    /** @deprecated use `OAuth2Client$inboundSchema` instead. */
    OAuth2Client$.inboundSchema = OAuth2Client$inboundSchema;
    /** @deprecated use `OAuth2Client$outboundSchema` instead. */
    OAuth2Client$.outboundSchema = OAuth2Client$outboundSchema;
})(OAuth2Client$ || (OAuth2Client$ = {}));
export function oAuth2ClientToJSON(oAuth2Client) {
    return JSON.stringify(OAuth2Client$outboundSchema.parse(oAuth2Client));
}
export function oAuth2ClientFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OAuth2Client$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OAuth2Client' from JSON`);
}
//# sourceMappingURL=oauth2client.js.map