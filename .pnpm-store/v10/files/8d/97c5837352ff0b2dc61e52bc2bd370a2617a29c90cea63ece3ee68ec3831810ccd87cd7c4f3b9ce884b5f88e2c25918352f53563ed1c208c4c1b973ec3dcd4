import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DownloadableFileRead, DownloadableFileRead$Outbound } from "../components/downloadablefileread.js";
import { FileUploadCompleted, FileUploadCompleted$Outbound } from "../components/fileuploadcompleted.js";
import { OrganizationAvatarFileRead, OrganizationAvatarFileRead$Outbound } from "../components/organizationavatarfileread.js";
import { ProductMediaFileRead, ProductMediaFileRead$Outbound } from "../components/productmediafileread.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type FilesUploadedRequest = {
    /**
     * The file ID.
     */
    id: string;
    fileUploadCompleted: FileUploadCompleted;
};
/**
 * File upload completed.
 */
export type FilesUploadedResponseFilesUploaded = (DownloadableFileRead & {
    service: "downloadable";
}) | (ProductMediaFileRead & {
    service: "product_media";
}) | (OrganizationAvatarFileRead & {
    service: "organization_avatar";
});
/** @internal */
export declare const FilesUploadedRequest$inboundSchema: z.ZodType<FilesUploadedRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type FilesUploadedRequest$Outbound = {
    id: string;
    FileUploadCompleted: FileUploadCompleted$Outbound;
};
/** @internal */
export declare const FilesUploadedRequest$outboundSchema: z.ZodType<FilesUploadedRequest$Outbound, z.ZodTypeDef, FilesUploadedRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FilesUploadedRequest$ {
    /** @deprecated use `FilesUploadedRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FilesUploadedRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `FilesUploadedRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FilesUploadedRequest$Outbound, z.ZodTypeDef, FilesUploadedRequest>;
    /** @deprecated use `FilesUploadedRequest$Outbound` instead. */
    type Outbound = FilesUploadedRequest$Outbound;
}
export declare function filesUploadedRequestToJSON(filesUploadedRequest: FilesUploadedRequest): string;
export declare function filesUploadedRequestFromJSON(jsonString: string): SafeParseResult<FilesUploadedRequest, SDKValidationError>;
/** @internal */
export declare const FilesUploadedResponseFilesUploaded$inboundSchema: z.ZodType<FilesUploadedResponseFilesUploaded, z.ZodTypeDef, unknown>;
/** @internal */
export type FilesUploadedResponseFilesUploaded$Outbound = (DownloadableFileRead$Outbound & {
    service: "downloadable";
}) | (ProductMediaFileRead$Outbound & {
    service: "product_media";
}) | (OrganizationAvatarFileRead$Outbound & {
    service: "organization_avatar";
});
/** @internal */
export declare const FilesUploadedResponseFilesUploaded$outboundSchema: z.ZodType<FilesUploadedResponseFilesUploaded$Outbound, z.ZodTypeDef, FilesUploadedResponseFilesUploaded>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FilesUploadedResponseFilesUploaded$ {
    /** @deprecated use `FilesUploadedResponseFilesUploaded$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FilesUploadedResponseFilesUploaded, z.ZodTypeDef, unknown>;
    /** @deprecated use `FilesUploadedResponseFilesUploaded$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FilesUploadedResponseFilesUploaded$Outbound, z.ZodTypeDef, FilesUploadedResponseFilesUploaded>;
    /** @deprecated use `FilesUploadedResponseFilesUploaded$Outbound` instead. */
    type Outbound = FilesUploadedResponseFilesUploaded$Outbound;
}
export declare function filesUploadedResponseFilesUploadedToJSON(filesUploadedResponseFilesUploaded: FilesUploadedResponseFilesUploaded): string;
export declare function filesUploadedResponseFilesUploadedFromJSON(jsonString: string): SafeParseResult<FilesUploadedResponseFilesUploaded, SDKValidationError>;
//# sourceMappingURL=filesuploaded.d.ts.map