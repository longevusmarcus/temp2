/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { MetadataQuery$inboundSchema, MetadataQuery$outboundSchema, } from "../components/customerslist.js";
import { EventSortProperty$inboundSchema, EventSortProperty$outboundSchema, } from "../components/eventsortproperty.js";
import { EventSource$inboundSchema, EventSource$outboundSchema, } from "../components/eventsource.js";
import { ListResourceEvent$inboundSchema, ListResourceEvent$outboundSchema, } from "../components/listresourceevent.js";
/** @internal */
export const EventsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const EventsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListQueryParamOrganizationIDFilter$;
(function (EventsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `EventsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    EventsListQueryParamOrganizationIDFilter$.inboundSchema = EventsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `EventsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    EventsListQueryParamOrganizationIDFilter$.outboundSchema = EventsListQueryParamOrganizationIDFilter$outboundSchema;
})(EventsListQueryParamOrganizationIDFilter$ || (EventsListQueryParamOrganizationIDFilter$ = {}));
export function eventsListQueryParamOrganizationIDFilterToJSON(eventsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(EventsListQueryParamOrganizationIDFilter$outboundSchema.parse(eventsListQueryParamOrganizationIDFilter));
}
export function eventsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const EventsListQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const EventsListQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListQueryParamCustomerIDFilter$;
(function (EventsListQueryParamCustomerIDFilter$) {
    /** @deprecated use `EventsListQueryParamCustomerIDFilter$inboundSchema` instead. */
    EventsListQueryParamCustomerIDFilter$.inboundSchema = EventsListQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `EventsListQueryParamCustomerIDFilter$outboundSchema` instead. */
    EventsListQueryParamCustomerIDFilter$.outboundSchema = EventsListQueryParamCustomerIDFilter$outboundSchema;
})(EventsListQueryParamCustomerIDFilter$ || (EventsListQueryParamCustomerIDFilter$ = {}));
export function eventsListQueryParamCustomerIDFilterToJSON(eventsListQueryParamCustomerIDFilter) {
    return JSON.stringify(EventsListQueryParamCustomerIDFilter$outboundSchema.parse(eventsListQueryParamCustomerIDFilter));
}
export function eventsListQueryParamCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
export const ExternalCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const ExternalCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExternalCustomerIDFilter$;
(function (ExternalCustomerIDFilter$) {
    /** @deprecated use `ExternalCustomerIDFilter$inboundSchema` instead. */
    ExternalCustomerIDFilter$.inboundSchema = ExternalCustomerIDFilter$inboundSchema;
    /** @deprecated use `ExternalCustomerIDFilter$outboundSchema` instead. */
    ExternalCustomerIDFilter$.outboundSchema = ExternalCustomerIDFilter$outboundSchema;
})(ExternalCustomerIDFilter$ || (ExternalCustomerIDFilter$ = {}));
export function externalCustomerIDFilterToJSON(externalCustomerIDFilter) {
    return JSON.stringify(ExternalCustomerIDFilter$outboundSchema.parse(externalCustomerIDFilter));
}
export function externalCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExternalCustomerIDFilter' from JSON`);
}
/** @internal */
export const SourceFilter$inboundSchema = z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)]);
/** @internal */
export const SourceFilter$outboundSchema = z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SourceFilter$;
(function (SourceFilter$) {
    /** @deprecated use `SourceFilter$inboundSchema` instead. */
    SourceFilter$.inboundSchema = SourceFilter$inboundSchema;
    /** @deprecated use `SourceFilter$outboundSchema` instead. */
    SourceFilter$.outboundSchema = SourceFilter$outboundSchema;
})(SourceFilter$ || (SourceFilter$ = {}));
export function sourceFilterToJSON(sourceFilter) {
    return JSON.stringify(SourceFilter$outboundSchema.parse(sourceFilter));
}
export function sourceFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SourceFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SourceFilter' from JSON`);
}
/** @internal */
export const EventsListRequest$inboundSchema = z.object({
    start_timestamp: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    end_timestamp: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    source: z.nullable(z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(EventSortProperty$inboundSchema)).optional(),
    metadata: z.nullable(z.record(MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "start_timestamp": "startTimestamp",
        "end_timestamp": "endTimestamp",
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
export const EventsListRequest$outboundSchema = z.object({
    startTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    endTimestamp: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    source: z.nullable(z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(EventSortProperty$outboundSchema)).optional(),
    metadata: z.nullable(z.record(MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        startTimestamp: "start_timestamp",
        endTimestamp: "end_timestamp",
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListRequest$;
(function (EventsListRequest$) {
    /** @deprecated use `EventsListRequest$inboundSchema` instead. */
    EventsListRequest$.inboundSchema = EventsListRequest$inboundSchema;
    /** @deprecated use `EventsListRequest$outboundSchema` instead. */
    EventsListRequest$.outboundSchema = EventsListRequest$outboundSchema;
})(EventsListRequest$ || (EventsListRequest$ = {}));
export function eventsListRequestToJSON(eventsListRequest) {
    return JSON.stringify(EventsListRequest$outboundSchema.parse(eventsListRequest));
}
export function eventsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListRequest' from JSON`);
}
/** @internal */
export const EventsListResponse$inboundSchema = z.object({
    Result: ListResourceEvent$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const EventsListResponse$outboundSchema = z.object({
    result: ListResourceEvent$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListResponse$;
(function (EventsListResponse$) {
    /** @deprecated use `EventsListResponse$inboundSchema` instead. */
    EventsListResponse$.inboundSchema = EventsListResponse$inboundSchema;
    /** @deprecated use `EventsListResponse$outboundSchema` instead. */
    EventsListResponse$.outboundSchema = EventsListResponse$outboundSchema;
})(EventsListResponse$ || (EventsListResponse$ = {}));
export function eventsListResponseToJSON(eventsListResponse) {
    return JSON.stringify(EventsListResponse$outboundSchema.parse(eventsListResponse));
}
export function eventsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListResponse' from JSON`);
}
//# sourceMappingURL=eventslist.js.map