"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Meters = void 0;
const metersCreate_js_1 = require("../funcs/metersCreate.js");
const metersEvents_js_1 = require("../funcs/metersEvents.js");
const metersGet_js_1 = require("../funcs/metersGet.js");
const metersList_js_1 = require("../funcs/metersList.js");
const metersQuantities_js_1 = require("../funcs/metersQuantities.js");
const metersUpdate_js_1 = require("../funcs/metersUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class Meters extends sdks_js_1.ClientSDK {
    /**
     * List Meters
     *
     * @remarks
     * List meters.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async list(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, metersList_js_1.metersList)(this, request, options));
    }
    /**
     * Create Meter
     *
     * @remarks
     * Create a meter.
     *
     * **Scopes**: `meters:write`
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, metersCreate_js_1.metersCreate)(this, request, options));
    }
    /**
     * Get Meter
     *
     * @remarks
     * Get a meter by ID.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, metersGet_js_1.metersGet)(this, request, options));
    }
    /**
     * Update Meter
     *
     * @remarks
     * Update a meter.
     *
     * **Scopes**: `meters:write`
     */
    async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, metersUpdate_js_1.metersUpdate)(this, request, options));
    }
    /**
     * Get Meter Events
     *
     * @remarks
     * Get events matching the filter of a meter.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async events(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, metersEvents_js_1.metersEvents)(this, request, options));
    }
    /**
     * Get Meter Quantities
     *
     * @remarks
     * Get quantities of a meter over a time period.
     *
     * **Scopes**: `meters:read` `meters:write`
     */
    async quantities(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, metersQuantities_js_1.metersQuantities)(this, request, options));
    }
}
exports.Meters = Meters;
//# sourceMappingURL=meters.js.map