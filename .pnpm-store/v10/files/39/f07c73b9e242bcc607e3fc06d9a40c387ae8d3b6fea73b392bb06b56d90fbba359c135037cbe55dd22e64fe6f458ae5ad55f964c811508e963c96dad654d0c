/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldCreateCheckbox$inboundSchema, CustomFieldCreateCheckbox$outboundSchema, } from "./customfieldcreatecheckbox.js";
import { CustomFieldCreateDate$inboundSchema, CustomFieldCreateDate$outboundSchema, } from "./customfieldcreatedate.js";
import { CustomFieldCreateNumber$inboundSchema, CustomFieldCreateNumber$outboundSchema, } from "./customfieldcreatenumber.js";
import { CustomFieldCreateSelect$inboundSchema, CustomFieldCreateSelect$outboundSchema, } from "./customfieldcreateselect.js";
import { CustomFieldCreateText$inboundSchema, CustomFieldCreateText$outboundSchema, } from "./customfieldcreatetext.js";
/** @internal */
export const CustomFieldCreate$inboundSchema = z.union([
    CustomFieldCreateCheckbox$inboundSchema.and(z.object({ type: z.literal("checkbox") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldCreateDate$inboundSchema.and(z.object({ type: z.literal("date") }).transform((v) => ({ type: v.type }))),
    CustomFieldCreateNumber$inboundSchema.and(z.object({ type: z.literal("number") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldCreateSelect$inboundSchema.and(z.object({ type: z.literal("select") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldCreateText$inboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
]);
/** @internal */
export const CustomFieldCreate$outboundSchema = z.union([
    CustomFieldCreateCheckbox$outboundSchema.and(z.object({ type: z.literal("checkbox") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldCreateDate$outboundSchema.and(z.object({ type: z.literal("date") }).transform((v) => ({ type: v.type }))),
    CustomFieldCreateNumber$outboundSchema.and(z.object({ type: z.literal("number") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldCreateSelect$outboundSchema.and(z.object({ type: z.literal("select") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldCreateText$outboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldCreate$;
(function (CustomFieldCreate$) {
    /** @deprecated use `CustomFieldCreate$inboundSchema` instead. */
    CustomFieldCreate$.inboundSchema = CustomFieldCreate$inboundSchema;
    /** @deprecated use `CustomFieldCreate$outboundSchema` instead. */
    CustomFieldCreate$.outboundSchema = CustomFieldCreate$outboundSchema;
})(CustomFieldCreate$ || (CustomFieldCreate$ = {}));
export function customFieldCreateToJSON(customFieldCreate) {
    return JSON.stringify(CustomFieldCreate$outboundSchema.parse(customFieldCreate));
}
export function customFieldCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldCreate' from JSON`);
}
//# sourceMappingURL=customfieldcreate.js.map