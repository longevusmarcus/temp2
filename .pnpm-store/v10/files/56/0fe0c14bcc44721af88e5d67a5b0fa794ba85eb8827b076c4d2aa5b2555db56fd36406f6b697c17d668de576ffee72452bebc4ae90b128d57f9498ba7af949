/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldCheckbox$inboundSchema, CustomFieldCheckbox$outboundSchema, } from "./customfieldcheckbox.js";
import { CustomFieldDate$inboundSchema, CustomFieldDate$outboundSchema, } from "./customfielddate.js";
import { CustomFieldNumber$inboundSchema, CustomFieldNumber$outboundSchema, } from "./customfieldnumber.js";
import { CustomFieldSelect$inboundSchema, CustomFieldSelect$outboundSchema, } from "./customfieldselect.js";
import { CustomFieldText$inboundSchema, CustomFieldText$outboundSchema, } from "./customfieldtext.js";
/** @internal */
export const CustomField$inboundSchema = z.union([
    CustomFieldCheckbox$inboundSchema.and(z.object({ type: z.literal("checkbox") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldDate$inboundSchema.and(z.object({ type: z.literal("date") }).transform((v) => ({ type: v.type }))),
    CustomFieldNumber$inboundSchema.and(z.object({ type: z.literal("number") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldSelect$inboundSchema.and(z.object({ type: z.literal("select") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldText$inboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
]);
/** @internal */
export const CustomField$outboundSchema = z.union([
    CustomFieldCheckbox$outboundSchema.and(z.object({ type: z.literal("checkbox") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldDate$outboundSchema.and(z.object({ type: z.literal("date") }).transform((v) => ({ type: v.type }))),
    CustomFieldNumber$outboundSchema.and(z.object({ type: z.literal("number") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldSelect$outboundSchema.and(z.object({ type: z.literal("select") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldText$outboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomField$;
(function (CustomField$) {
    /** @deprecated use `CustomField$inboundSchema` instead. */
    CustomField$.inboundSchema = CustomField$inboundSchema;
    /** @deprecated use `CustomField$outboundSchema` instead. */
    CustomField$.outboundSchema = CustomField$outboundSchema;
})(CustomField$ || (CustomField$ = {}));
export function customFieldToJSON(customField) {
    return JSON.stringify(CustomField$outboundSchema.parse(customField));
}
export function customFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomField' from JSON`);
}
//# sourceMappingURL=customfield.js.map