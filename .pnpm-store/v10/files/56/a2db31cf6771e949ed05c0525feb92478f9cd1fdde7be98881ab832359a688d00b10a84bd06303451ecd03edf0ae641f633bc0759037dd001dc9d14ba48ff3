/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const S3DownloadURL$inboundSchema = z.object({
    url: z.string(),
    headers: z.record(z.string()).optional(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return remap$(v, {
        "expires_at": "expiresAt",
    });
});
/** @internal */
export const S3DownloadURL$outboundSchema = z.object({
    url: z.string(),
    headers: z.record(z.string()).optional(),
    expiresAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return remap$(v, {
        expiresAt: "expires_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var S3DownloadURL$;
(function (S3DownloadURL$) {
    /** @deprecated use `S3DownloadURL$inboundSchema` instead. */
    S3DownloadURL$.inboundSchema = S3DownloadURL$inboundSchema;
    /** @deprecated use `S3DownloadURL$outboundSchema` instead. */
    S3DownloadURL$.outboundSchema = S3DownloadURL$outboundSchema;
})(S3DownloadURL$ || (S3DownloadURL$ = {}));
export function s3DownloadURLToJSON(s3DownloadURL) {
    return JSON.stringify(S3DownloadURL$outboundSchema.parse(s3DownloadURL));
}
export function s3DownloadURLFromJSON(jsonString) {
    return safeParse(jsonString, (x) => S3DownloadURL$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'S3DownloadURL' from JSON`);
}
//# sourceMappingURL=s3downloadurl.js.map