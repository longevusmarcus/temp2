/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const MeterQuantity$inboundSchema = z.object({
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    quantity: z.number(),
});
/** @internal */
export const MeterQuantity$outboundSchema = z.object({
    timestamp: z.date().transform(v => v.toISOString()),
    quantity: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterQuantity$;
(function (MeterQuantity$) {
    /** @deprecated use `MeterQuantity$inboundSchema` instead. */
    MeterQuantity$.inboundSchema = MeterQuantity$inboundSchema;
    /** @deprecated use `MeterQuantity$outboundSchema` instead. */
    MeterQuantity$.outboundSchema = MeterQuantity$outboundSchema;
})(MeterQuantity$ || (MeterQuantity$ = {}));
export function meterQuantityToJSON(meterQuantity) {
    return JSON.stringify(MeterQuantity$outboundSchema.parse(meterQuantity));
}
export function meterQuantityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterQuantity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterQuantity' from JSON`);
}
//# sourceMappingURL=meterquantity.js.map