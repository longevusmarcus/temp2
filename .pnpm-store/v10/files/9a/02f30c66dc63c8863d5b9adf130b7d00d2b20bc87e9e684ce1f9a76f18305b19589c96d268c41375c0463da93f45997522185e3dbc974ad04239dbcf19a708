/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { OrganizationDetails$inboundSchema, OrganizationDetails$outboundSchema, } from "./organizationdetails.js";
import { OrganizationFeatureSettings$inboundSchema, OrganizationFeatureSettings$outboundSchema, } from "./organizationfeaturesettings.js";
import { OrganizationProfileSettings$inboundSchema, OrganizationProfileSettings$outboundSchema, } from "./organizationprofilesettings.js";
import { OrganizationSocialLink$inboundSchema, OrganizationSocialLink$outboundSchema, } from "./organizationsociallink.js";
import { OrganizationSubscriptionSettings$inboundSchema, OrganizationSubscriptionSettings$outboundSchema, } from "./organizationsubscriptionsettings.js";
/** @internal */
export const OrganizationUpdate$inboundSchema = z.object({
    name: z.nullable(z.string()).optional(),
    avatar_url: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    website: z.nullable(z.string()).optional(),
    socials: z.nullable(z.array(OrganizationSocialLink$inboundSchema)).optional(),
    details: z.nullable(OrganizationDetails$inboundSchema).optional(),
    feature_settings: z.nullable(OrganizationFeatureSettings$inboundSchema)
        .optional(),
    subscription_settings: z.nullable(OrganizationSubscriptionSettings$inboundSchema).optional(),
    default_upfront_split_to_contributors: z.nullable(z.number().int())
        .optional(),
    pledge_badge_show_amount: z.boolean().default(false),
    billing_email: z.nullable(z.string()).optional(),
    default_badge_custom_content: z.nullable(z.string()).optional(),
    pledge_minimum_amount: z.number().int().default(2000),
    total_monthly_spending_limit: z.nullable(z.number().int()).optional(),
    per_user_monthly_spending_limit: z.nullable(z.number().int()).optional(),
    profile_settings: z.nullable(OrganizationProfileSettings$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "avatar_url": "avatarUrl",
        "feature_settings": "featureSettings",
        "subscription_settings": "subscriptionSettings",
        "default_upfront_split_to_contributors": "defaultUpfrontSplitToContributors",
        "pledge_badge_show_amount": "pledgeBadgeShowAmount",
        "billing_email": "billingEmail",
        "default_badge_custom_content": "defaultBadgeCustomContent",
        "pledge_minimum_amount": "pledgeMinimumAmount",
        "total_monthly_spending_limit": "totalMonthlySpendingLimit",
        "per_user_monthly_spending_limit": "perUserMonthlySpendingLimit",
        "profile_settings": "profileSettings",
    });
});
/** @internal */
export const OrganizationUpdate$outboundSchema = z.object({
    name: z.nullable(z.string()).optional(),
    avatarUrl: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    website: z.nullable(z.string()).optional(),
    socials: z.nullable(z.array(OrganizationSocialLink$outboundSchema))
        .optional(),
    details: z.nullable(OrganizationDetails$outboundSchema).optional(),
    featureSettings: z.nullable(OrganizationFeatureSettings$outboundSchema)
        .optional(),
    subscriptionSettings: z.nullable(OrganizationSubscriptionSettings$outboundSchema).optional(),
    defaultUpfrontSplitToContributors: z.nullable(z.number().int()).optional(),
    pledgeBadgeShowAmount: z.boolean().default(false),
    billingEmail: z.nullable(z.string()).optional(),
    defaultBadgeCustomContent: z.nullable(z.string()).optional(),
    pledgeMinimumAmount: z.number().int().default(2000),
    totalMonthlySpendingLimit: z.nullable(z.number().int()).optional(),
    perUserMonthlySpendingLimit: z.nullable(z.number().int()).optional(),
    profileSettings: z.nullable(OrganizationProfileSettings$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        avatarUrl: "avatar_url",
        featureSettings: "feature_settings",
        subscriptionSettings: "subscription_settings",
        defaultUpfrontSplitToContributors: "default_upfront_split_to_contributors",
        pledgeBadgeShowAmount: "pledge_badge_show_amount",
        billingEmail: "billing_email",
        defaultBadgeCustomContent: "default_badge_custom_content",
        pledgeMinimumAmount: "pledge_minimum_amount",
        totalMonthlySpendingLimit: "total_monthly_spending_limit",
        perUserMonthlySpendingLimit: "per_user_monthly_spending_limit",
        profileSettings: "profile_settings",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrganizationUpdate$;
(function (OrganizationUpdate$) {
    /** @deprecated use `OrganizationUpdate$inboundSchema` instead. */
    OrganizationUpdate$.inboundSchema = OrganizationUpdate$inboundSchema;
    /** @deprecated use `OrganizationUpdate$outboundSchema` instead. */
    OrganizationUpdate$.outboundSchema = OrganizationUpdate$outboundSchema;
})(OrganizationUpdate$ || (OrganizationUpdate$ = {}));
export function organizationUpdateToJSON(organizationUpdate) {
    return JSON.stringify(OrganizationUpdate$outboundSchema.parse(organizationUpdate));
}
export function organizationUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrganizationUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrganizationUpdate' from JSON`);
}
//# sourceMappingURL=organizationupdate.js.map