import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { ProductBillingType } from "../components/productbillingtype.js";
import { TimeInterval } from "../components/timeinterval.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Filter by organization ID.
 */
export type MetricsGetQueryParamOrganizationIDFilter = string | Array<string>;
/**
 * Filter by product ID.
 */
export type MetricsGetQueryParamProductIDFilter = string | Array<string>;
/**
 * Filter by billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
 */
export type QueryParamProductBillingTypeFilter = ProductBillingType | Array<ProductBillingType>;
/**
 * Filter by customer ID.
 */
export type MetricsGetQueryParamCustomerIDFilter = string | Array<string>;
export type MetricsGetRequest = {
    /**
     * Start date.
     */
    startDate: RFCDate;
    /**
     * End date.
     */
    endDate: RFCDate;
    /**
     * Interval between two timestamps.
     */
    interval: TimeInterval;
    /**
     * Filter by organization ID.
     */
    organizationId?: string | Array<string> | null | undefined;
    /**
     * Filter by product ID.
     */
    productId?: string | Array<string> | null | undefined;
    /**
     * Filter by billing type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
     */
    billingType?: ProductBillingType | Array<ProductBillingType> | null | undefined;
    /**
     * Filter by customer ID.
     */
    customerId?: string | Array<string> | null | undefined;
};
/** @internal */
export declare const MetricsGetQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetQueryParamOrganizationIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetricsGetQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamOrganizationIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetQueryParamOrganizationIDFilter$ {
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamOrganizationIDFilter>;
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$Outbound` instead. */
    type Outbound = MetricsGetQueryParamOrganizationIDFilter$Outbound;
}
export declare function metricsGetQueryParamOrganizationIDFilterToJSON(metricsGetQueryParamOrganizationIDFilter: MetricsGetQueryParamOrganizationIDFilter): string;
export declare function metricsGetQueryParamOrganizationIDFilterFromJSON(jsonString: string): SafeParseResult<MetricsGetQueryParamOrganizationIDFilter, SDKValidationError>;
/** @internal */
export declare const MetricsGetQueryParamProductIDFilter$inboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetQueryParamProductIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetricsGetQueryParamProductIDFilter$outboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamProductIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetQueryParamProductIDFilter$ {
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamProductIDFilter>;
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$Outbound` instead. */
    type Outbound = MetricsGetQueryParamProductIDFilter$Outbound;
}
export declare function metricsGetQueryParamProductIDFilterToJSON(metricsGetQueryParamProductIDFilter: MetricsGetQueryParamProductIDFilter): string;
export declare function metricsGetQueryParamProductIDFilterFromJSON(jsonString: string): SafeParseResult<MetricsGetQueryParamProductIDFilter, SDKValidationError>;
/** @internal */
export declare const QueryParamProductBillingTypeFilter$inboundSchema: z.ZodType<QueryParamProductBillingTypeFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamProductBillingTypeFilter$Outbound = string | Array<string>;
/** @internal */
export declare const QueryParamProductBillingTypeFilter$outboundSchema: z.ZodType<QueryParamProductBillingTypeFilter$Outbound, z.ZodTypeDef, QueryParamProductBillingTypeFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamProductBillingTypeFilter$ {
    /** @deprecated use `QueryParamProductBillingTypeFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamProductBillingTypeFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamProductBillingTypeFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamProductBillingTypeFilter$Outbound, z.ZodTypeDef, QueryParamProductBillingTypeFilter>;
    /** @deprecated use `QueryParamProductBillingTypeFilter$Outbound` instead. */
    type Outbound = QueryParamProductBillingTypeFilter$Outbound;
}
export declare function queryParamProductBillingTypeFilterToJSON(queryParamProductBillingTypeFilter: QueryParamProductBillingTypeFilter): string;
export declare function queryParamProductBillingTypeFilterFromJSON(jsonString: string): SafeParseResult<QueryParamProductBillingTypeFilter, SDKValidationError>;
/** @internal */
export declare const MetricsGetQueryParamCustomerIDFilter$inboundSchema: z.ZodType<MetricsGetQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetQueryParamCustomerIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetricsGetQueryParamCustomerIDFilter$outboundSchema: z.ZodType<MetricsGetQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamCustomerIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetQueryParamCustomerIDFilter$ {
    /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamCustomerIDFilter>;
    /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$Outbound` instead. */
    type Outbound = MetricsGetQueryParamCustomerIDFilter$Outbound;
}
export declare function metricsGetQueryParamCustomerIDFilterToJSON(metricsGetQueryParamCustomerIDFilter: MetricsGetQueryParamCustomerIDFilter): string;
export declare function metricsGetQueryParamCustomerIDFilterFromJSON(jsonString: string): SafeParseResult<MetricsGetQueryParamCustomerIDFilter, SDKValidationError>;
/** @internal */
export declare const MetricsGetRequest$inboundSchema: z.ZodType<MetricsGetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetRequest$Outbound = {
    start_date: string;
    end_date: string;
    interval: string;
    organization_id?: string | Array<string> | null | undefined;
    product_id?: string | Array<string> | null | undefined;
    billing_type?: string | Array<string> | null | undefined;
    customer_id?: string | Array<string> | null | undefined;
};
/** @internal */
export declare const MetricsGetRequest$outboundSchema: z.ZodType<MetricsGetRequest$Outbound, z.ZodTypeDef, MetricsGetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetRequest$ {
    /** @deprecated use `MetricsGetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetRequest$Outbound, z.ZodTypeDef, MetricsGetRequest>;
    /** @deprecated use `MetricsGetRequest$Outbound` instead. */
    type Outbound = MetricsGetRequest$Outbound;
}
export declare function metricsGetRequestToJSON(metricsGetRequest: MetricsGetRequest): string;
export declare function metricsGetRequestFromJSON(jsonString: string): SafeParseResult<MetricsGetRequest, SDKValidationError>;
//# sourceMappingURL=metricsget.d.ts.map