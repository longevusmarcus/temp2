/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const EventCreateExternalCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const EventCreateExternalCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventCreateExternalCustomerMetadata$;
(function (EventCreateExternalCustomerMetadata$) {
    /** @deprecated use `EventCreateExternalCustomerMetadata$inboundSchema` instead. */
    EventCreateExternalCustomerMetadata$.inboundSchema = EventCreateExternalCustomerMetadata$inboundSchema;
    /** @deprecated use `EventCreateExternalCustomerMetadata$outboundSchema` instead. */
    EventCreateExternalCustomerMetadata$.outboundSchema = EventCreateExternalCustomerMetadata$outboundSchema;
})(EventCreateExternalCustomerMetadata$ || (EventCreateExternalCustomerMetadata$ = {}));
export function eventCreateExternalCustomerMetadataToJSON(eventCreateExternalCustomerMetadata) {
    return JSON.stringify(EventCreateExternalCustomerMetadata$outboundSchema.parse(eventCreateExternalCustomerMetadata));
}
export function eventCreateExternalCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventCreateExternalCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventCreateExternalCustomerMetadata' from JSON`);
}
/** @internal */
export const EventCreateExternalCustomer$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    name: z.string(),
    organization_id: z.nullable(z.string()).optional(),
    external_customer_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
export const EventCreateExternalCustomer$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    timestamp: z.date().transform(v => v.toISOString()).optional(),
    name: z.string(),
    organizationId: z.nullable(z.string()).optional(),
    externalCustomerId: z.string(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventCreateExternalCustomer$;
(function (EventCreateExternalCustomer$) {
    /** @deprecated use `EventCreateExternalCustomer$inboundSchema` instead. */
    EventCreateExternalCustomer$.inboundSchema = EventCreateExternalCustomer$inboundSchema;
    /** @deprecated use `EventCreateExternalCustomer$outboundSchema` instead. */
    EventCreateExternalCustomer$.outboundSchema = EventCreateExternalCustomer$outboundSchema;
})(EventCreateExternalCustomer$ || (EventCreateExternalCustomer$ = {}));
export function eventCreateExternalCustomerToJSON(eventCreateExternalCustomer) {
    return JSON.stringify(EventCreateExternalCustomer$outboundSchema.parse(eventCreateExternalCustomer));
}
export function eventCreateExternalCustomerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventCreateExternalCustomer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventCreateExternalCustomer' from JSON`);
}
//# sourceMappingURL=eventcreateexternalcustomer.js.map