import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { RefundReason } from "./refundreason.js";
export type RefundCreateMetadata = string | number | boolean;
export type RefundCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    orderId: string;
    reason: RefundReason;
    /**
     * Amount to refund in cents. Minimum is 1.
     */
    amount: number;
    /**
     * An internal comment about the refund.
     */
    comment?: string | null | undefined;
    /**
     * Should this refund trigger the associated customer benefits to be revoked?
     *
     * @remarks
     *
     * **Note:**
     * Only allowed in case the `order` is a one-time purchase.
     * Subscriptions automatically revoke customer benefits once the
     * subscription itself is revoked, i.e fully canceled.
     */
    revokeBenefits?: boolean | undefined;
};
/** @internal */
export declare const RefundCreateMetadata$inboundSchema: z.ZodType<RefundCreateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type RefundCreateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const RefundCreateMetadata$outboundSchema: z.ZodType<RefundCreateMetadata$Outbound, z.ZodTypeDef, RefundCreateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RefundCreateMetadata$ {
    /** @deprecated use `RefundCreateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RefundCreateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `RefundCreateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RefundCreateMetadata$Outbound, z.ZodTypeDef, RefundCreateMetadata>;
    /** @deprecated use `RefundCreateMetadata$Outbound` instead. */
    type Outbound = RefundCreateMetadata$Outbound;
}
export declare function refundCreateMetadataToJSON(refundCreateMetadata: RefundCreateMetadata): string;
export declare function refundCreateMetadataFromJSON(jsonString: string): SafeParseResult<RefundCreateMetadata, SDKValidationError>;
/** @internal */
export declare const RefundCreate$inboundSchema: z.ZodType<RefundCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type RefundCreate$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    order_id: string;
    reason: string;
    amount: number;
    comment?: string | null | undefined;
    revoke_benefits: boolean;
};
/** @internal */
export declare const RefundCreate$outboundSchema: z.ZodType<RefundCreate$Outbound, z.ZodTypeDef, RefundCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RefundCreate$ {
    /** @deprecated use `RefundCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RefundCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `RefundCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RefundCreate$Outbound, z.ZodTypeDef, RefundCreate>;
    /** @deprecated use `RefundCreate$Outbound` instead. */
    type Outbound = RefundCreate$Outbound;
}
export declare function refundCreateToJSON(refundCreate: RefundCreate): string;
export declare function refundCreateFromJSON(jsonString: string): SafeParseResult<RefundCreate, SDKValidationError>;
//# sourceMappingURL=refundcreate.d.ts.map