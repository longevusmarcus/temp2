/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
/** @internal */
export const CheckoutProductsCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CheckoutProductsCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductsCreateMetadata$;
(function (CheckoutProductsCreateMetadata$) {
    /** @deprecated use `CheckoutProductsCreateMetadata$inboundSchema` instead. */
    CheckoutProductsCreateMetadata$.inboundSchema = CheckoutProductsCreateMetadata$inboundSchema;
    /** @deprecated use `CheckoutProductsCreateMetadata$outboundSchema` instead. */
    CheckoutProductsCreateMetadata$.outboundSchema = CheckoutProductsCreateMetadata$outboundSchema;
})(CheckoutProductsCreateMetadata$ || (CheckoutProductsCreateMetadata$ = {}));
export function checkoutProductsCreateMetadataToJSON(checkoutProductsCreateMetadata) {
    return JSON.stringify(CheckoutProductsCreateMetadata$outboundSchema.parse(checkoutProductsCreateMetadata));
}
export function checkoutProductsCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductsCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductsCreateMetadata' from JSON`);
}
/** @internal */
export const CheckoutProductsCreateCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CheckoutProductsCreateCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductsCreateCustomFieldData$;
(function (CheckoutProductsCreateCustomFieldData$) {
    /** @deprecated use `CheckoutProductsCreateCustomFieldData$inboundSchema` instead. */
    CheckoutProductsCreateCustomFieldData$.inboundSchema = CheckoutProductsCreateCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutProductsCreateCustomFieldData$outboundSchema` instead. */
    CheckoutProductsCreateCustomFieldData$.outboundSchema = CheckoutProductsCreateCustomFieldData$outboundSchema;
})(CheckoutProductsCreateCustomFieldData$ || (CheckoutProductsCreateCustomFieldData$ = {}));
export function checkoutProductsCreateCustomFieldDataToJSON(checkoutProductsCreateCustomFieldData) {
    return JSON.stringify(CheckoutProductsCreateCustomFieldData$outboundSchema.parse(checkoutProductsCreateCustomFieldData));
}
export function checkoutProductsCreateCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductsCreateCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductsCreateCustomFieldData' from JSON`);
}
/** @internal */
export const CheckoutProductsCreateCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CheckoutProductsCreateCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductsCreateCustomerMetadata$;
(function (CheckoutProductsCreateCustomerMetadata$) {
    /** @deprecated use `CheckoutProductsCreateCustomerMetadata$inboundSchema` instead. */
    CheckoutProductsCreateCustomerMetadata$.inboundSchema = CheckoutProductsCreateCustomerMetadata$inboundSchema;
    /** @deprecated use `CheckoutProductsCreateCustomerMetadata$outboundSchema` instead. */
    CheckoutProductsCreateCustomerMetadata$.outboundSchema = CheckoutProductsCreateCustomerMetadata$outboundSchema;
})(CheckoutProductsCreateCustomerMetadata$ || (CheckoutProductsCreateCustomerMetadata$ = {}));
export function checkoutProductsCreateCustomerMetadataToJSON(checkoutProductsCreateCustomerMetadata) {
    return JSON.stringify(CheckoutProductsCreateCustomerMetadata$outboundSchema.parse(checkoutProductsCreateCustomerMetadata));
}
export function checkoutProductsCreateCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductsCreateCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductsCreateCustomerMetadata' from JSON`);
}
/** @internal */
export const CheckoutProductsCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    discount_id: z.nullable(z.string()).optional(),
    allow_discount_codes: z.boolean().default(true),
    amount: z.nullable(z.number().int()).optional(),
    customer_id: z.nullable(z.string()).optional(),
    customer_external_id: z.nullable(z.string()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_ip_address: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    customer_metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])).optional(),
    subscription_id: z.nullable(z.string()).optional(),
    success_url: z.nullable(z.string()).optional(),
    embed_origin: z.nullable(z.string()).optional(),
    products: z.array(z.string()),
}).transform((v) => {
    return remap$(v, {
        "custom_field_data": "customFieldData",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "customer_id": "customerId",
        "customer_external_id": "customerExternalId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "customer_metadata": "customerMetadata",
        "subscription_id": "subscriptionId",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
    });
});
/** @internal */
export const CheckoutProductsCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
        .optional(),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    discountId: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.boolean().default(true),
    amount: z.nullable(z.number().int()).optional(),
    customerId: z.nullable(z.string()).optional(),
    customerExternalId: z.nullable(z.string()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerIpAddress: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    customerMetadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])).optional(),
    subscriptionId: z.nullable(z.string()).optional(),
    successUrl: z.nullable(z.string()).optional(),
    embedOrigin: z.nullable(z.string()).optional(),
    products: z.array(z.string()),
}).transform((v) => {
    return remap$(v, {
        customFieldData: "custom_field_data",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        customerId: "customer_id",
        customerExternalId: "customer_external_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        customerMetadata: "customer_metadata",
        subscriptionId: "subscription_id",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutProductsCreate$;
(function (CheckoutProductsCreate$) {
    /** @deprecated use `CheckoutProductsCreate$inboundSchema` instead. */
    CheckoutProductsCreate$.inboundSchema = CheckoutProductsCreate$inboundSchema;
    /** @deprecated use `CheckoutProductsCreate$outboundSchema` instead. */
    CheckoutProductsCreate$.outboundSchema = CheckoutProductsCreate$outboundSchema;
})(CheckoutProductsCreate$ || (CheckoutProductsCreate$ = {}));
export function checkoutProductsCreateToJSON(checkoutProductsCreate) {
    return JSON.stringify(CheckoutProductsCreate$outboundSchema.parse(checkoutProductsCreate));
}
export function checkoutProductsCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutProductsCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutProductsCreate' from JSON`);
}
//# sourceMappingURL=checkoutproductscreate.js.map