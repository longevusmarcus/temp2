/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceLicenseKeyRead$inboundSchema, ListResourceLicenseKeyRead$outboundSchema, } from "../components/listresourcelicensekeyread.js";
/** @internal */
export const CustomerPortalLicenseKeysListSecurity$inboundSchema = z.object({
    customer_session: z.string(),
}).transform((v) => {
    return remap$(v, {
        "customer_session": "customerSession",
    });
});
/** @internal */
export const CustomerPortalLicenseKeysListSecurity$outboundSchema = z.object({
    customerSession: z.string(),
}).transform((v) => {
    return remap$(v, {
        customerSession: "customer_session",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalLicenseKeysListSecurity$;
(function (CustomerPortalLicenseKeysListSecurity$) {
    /** @deprecated use `CustomerPortalLicenseKeysListSecurity$inboundSchema` instead. */
    CustomerPortalLicenseKeysListSecurity$.inboundSchema = CustomerPortalLicenseKeysListSecurity$inboundSchema;
    /** @deprecated use `CustomerPortalLicenseKeysListSecurity$outboundSchema` instead. */
    CustomerPortalLicenseKeysListSecurity$.outboundSchema = CustomerPortalLicenseKeysListSecurity$outboundSchema;
})(CustomerPortalLicenseKeysListSecurity$ || (CustomerPortalLicenseKeysListSecurity$ = {}));
export function customerPortalLicenseKeysListSecurityToJSON(customerPortalLicenseKeysListSecurity) {
    return JSON.stringify(CustomerPortalLicenseKeysListSecurity$outboundSchema.parse(customerPortalLicenseKeysListSecurity));
}
export function customerPortalLicenseKeysListSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalLicenseKeysListSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalLicenseKeysListSecurity' from JSON`);
}
/** @internal */
export const CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$;
(function (CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$.inboundSchema = CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$.outboundSchema = CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$outboundSchema;
})(CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$ || (CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$ = {}));
export function customerPortalLicenseKeysListQueryParamOrganizationIDFilterToJSON(customerPortalLicenseKeysListQueryParamOrganizationIDFilter) {
    return JSON.stringify(CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$outboundSchema
        .parse(customerPortalLicenseKeysListQueryParamOrganizationIDFilter));
}
export function customerPortalLicenseKeysListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'CustomerPortalLicenseKeysListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const CustomerPortalLicenseKeysListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    benefit_id: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "benefit_id": "benefitId",
    });
});
/** @internal */
export const CustomerPortalLicenseKeysListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    benefitId: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        benefitId: "benefit_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalLicenseKeysListRequest$;
(function (CustomerPortalLicenseKeysListRequest$) {
    /** @deprecated use `CustomerPortalLicenseKeysListRequest$inboundSchema` instead. */
    CustomerPortalLicenseKeysListRequest$.inboundSchema = CustomerPortalLicenseKeysListRequest$inboundSchema;
    /** @deprecated use `CustomerPortalLicenseKeysListRequest$outboundSchema` instead. */
    CustomerPortalLicenseKeysListRequest$.outboundSchema = CustomerPortalLicenseKeysListRequest$outboundSchema;
})(CustomerPortalLicenseKeysListRequest$ || (CustomerPortalLicenseKeysListRequest$ = {}));
export function customerPortalLicenseKeysListRequestToJSON(customerPortalLicenseKeysListRequest) {
    return JSON.stringify(CustomerPortalLicenseKeysListRequest$outboundSchema.parse(customerPortalLicenseKeysListRequest));
}
export function customerPortalLicenseKeysListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalLicenseKeysListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalLicenseKeysListRequest' from JSON`);
}
/** @internal */
export const CustomerPortalLicenseKeysListResponse$inboundSchema = z.object({
    Result: ListResourceLicenseKeyRead$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const CustomerPortalLicenseKeysListResponse$outboundSchema = z.object({
    result: ListResourceLicenseKeyRead$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalLicenseKeysListResponse$;
(function (CustomerPortalLicenseKeysListResponse$) {
    /** @deprecated use `CustomerPortalLicenseKeysListResponse$inboundSchema` instead. */
    CustomerPortalLicenseKeysListResponse$.inboundSchema = CustomerPortalLicenseKeysListResponse$inboundSchema;
    /** @deprecated use `CustomerPortalLicenseKeysListResponse$outboundSchema` instead. */
    CustomerPortalLicenseKeysListResponse$.outboundSchema = CustomerPortalLicenseKeysListResponse$outboundSchema;
})(CustomerPortalLicenseKeysListResponse$ || (CustomerPortalLicenseKeysListResponse$ = {}));
export function customerPortalLicenseKeysListResponseToJSON(customerPortalLicenseKeysListResponse) {
    return JSON.stringify(CustomerPortalLicenseKeysListResponse$outboundSchema.parse(customerPortalLicenseKeysListResponse));
}
export function customerPortalLicenseKeysListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalLicenseKeysListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalLicenseKeysListResponse' from JSON`);
}
//# sourceMappingURL=customerportallicensekeyslist.js.map