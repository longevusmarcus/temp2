/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitGrantCustomProperties$inboundSchema, BenefitGrantCustomProperties$outboundSchema, } from "./benefitgrantcustomproperties.js";
import { BenefitGrantDiscordProperties$inboundSchema, BenefitGrantDiscordProperties$outboundSchema, } from "./benefitgrantdiscordproperties.js";
import { BenefitGrantDownloadablesProperties$inboundSchema, BenefitGrantDownloadablesProperties$outboundSchema, } from "./benefitgrantdownloadablesproperties.js";
import { BenefitGrantGitHubRepositoryProperties$inboundSchema, BenefitGrantGitHubRepositoryProperties$outboundSchema, } from "./benefitgrantgithubrepositoryproperties.js";
import { BenefitGrantLicenseKeysProperties$inboundSchema, BenefitGrantLicenseKeysProperties$outboundSchema, } from "./benefitgrantlicensekeysproperties.js";
import { BenefitType$inboundSchema, BenefitType$outboundSchema, } from "./benefittype.js";
/** @internal */
export const CustomerStateBenefitGrantProperties$inboundSchema = z.union([
    BenefitGrantCustomProperties$inboundSchema,
    BenefitGrantDownloadablesProperties$inboundSchema,
    BenefitGrantLicenseKeysProperties$inboundSchema,
    BenefitGrantDiscordProperties$inboundSchema,
    BenefitGrantGitHubRepositoryProperties$inboundSchema,
]);
/** @internal */
export const CustomerStateBenefitGrantProperties$outboundSchema = z.union([
    BenefitGrantCustomProperties$outboundSchema,
    BenefitGrantDownloadablesProperties$outboundSchema,
    BenefitGrantLicenseKeysProperties$outboundSchema,
    BenefitGrantDiscordProperties$outboundSchema,
    BenefitGrantGitHubRepositoryProperties$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerStateBenefitGrantProperties$;
(function (CustomerStateBenefitGrantProperties$) {
    /** @deprecated use `CustomerStateBenefitGrantProperties$inboundSchema` instead. */
    CustomerStateBenefitGrantProperties$.inboundSchema = CustomerStateBenefitGrantProperties$inboundSchema;
    /** @deprecated use `CustomerStateBenefitGrantProperties$outboundSchema` instead. */
    CustomerStateBenefitGrantProperties$.outboundSchema = CustomerStateBenefitGrantProperties$outboundSchema;
})(CustomerStateBenefitGrantProperties$ || (CustomerStateBenefitGrantProperties$ = {}));
export function customerStateBenefitGrantPropertiesToJSON(customerStateBenefitGrantProperties) {
    return JSON.stringify(CustomerStateBenefitGrantProperties$outboundSchema.parse(customerStateBenefitGrantProperties));
}
export function customerStateBenefitGrantPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerStateBenefitGrantProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateBenefitGrantProperties' from JSON`);
}
/** @internal */
export const CustomerStateBenefitGrant$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    granted_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    benefit_id: z.string(),
    benefit_type: BenefitType$inboundSchema,
    properties: z.union([
        BenefitGrantCustomProperties$inboundSchema,
        BenefitGrantDownloadablesProperties$inboundSchema,
        BenefitGrantLicenseKeysProperties$inboundSchema,
        BenefitGrantDiscordProperties$inboundSchema,
        BenefitGrantGitHubRepositoryProperties$inboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "granted_at": "grantedAt",
        "benefit_id": "benefitId",
        "benefit_type": "benefitType",
    });
});
/** @internal */
export const CustomerStateBenefitGrant$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    grantedAt: z.date().transform(v => v.toISOString()),
    benefitId: z.string(),
    benefitType: BenefitType$outboundSchema,
    properties: z.union([
        BenefitGrantCustomProperties$outboundSchema,
        BenefitGrantDownloadablesProperties$outboundSchema,
        BenefitGrantLicenseKeysProperties$outboundSchema,
        BenefitGrantDiscordProperties$outboundSchema,
        BenefitGrantGitHubRepositoryProperties$outboundSchema,
    ]),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        grantedAt: "granted_at",
        benefitId: "benefit_id",
        benefitType: "benefit_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerStateBenefitGrant$;
(function (CustomerStateBenefitGrant$) {
    /** @deprecated use `CustomerStateBenefitGrant$inboundSchema` instead. */
    CustomerStateBenefitGrant$.inboundSchema = CustomerStateBenefitGrant$inboundSchema;
    /** @deprecated use `CustomerStateBenefitGrant$outboundSchema` instead. */
    CustomerStateBenefitGrant$.outboundSchema = CustomerStateBenefitGrant$outboundSchema;
})(CustomerStateBenefitGrant$ || (CustomerStateBenefitGrant$ = {}));
export function customerStateBenefitGrantToJSON(customerStateBenefitGrant) {
    return JSON.stringify(CustomerStateBenefitGrant$outboundSchema.parse(customerStateBenefitGrant));
}
export function customerStateBenefitGrantFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerStateBenefitGrant$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerStateBenefitGrant' from JSON`);
}
//# sourceMappingURL=customerstatebenefitgrant.js.map