/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldDateProperties$inboundSchema, CustomFieldDateProperties$outboundSchema, } from "./customfielddateproperties.js";
/** @internal */
export const CustomFieldDateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomFieldDateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldDateMetadata$;
(function (CustomFieldDateMetadata$) {
    /** @deprecated use `CustomFieldDateMetadata$inboundSchema` instead. */
    CustomFieldDateMetadata$.inboundSchema = CustomFieldDateMetadata$inboundSchema;
    /** @deprecated use `CustomFieldDateMetadata$outboundSchema` instead. */
    CustomFieldDateMetadata$.outboundSchema = CustomFieldDateMetadata$outboundSchema;
})(CustomFieldDateMetadata$ || (CustomFieldDateMetadata$ = {}));
export function customFieldDateMetadataToJSON(customFieldDateMetadata) {
    return JSON.stringify(CustomFieldDateMetadata$outboundSchema.parse(customFieldDateMetadata));
}
export function customFieldDateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldDateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldDateMetadata' from JSON`);
}
/** @internal */
export const CustomFieldDate$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("date").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.string(),
    properties: CustomFieldDateProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CustomFieldDate$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("date").default("date"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.string(),
    properties: CustomFieldDateProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldDate$;
(function (CustomFieldDate$) {
    /** @deprecated use `CustomFieldDate$inboundSchema` instead. */
    CustomFieldDate$.inboundSchema = CustomFieldDate$inboundSchema;
    /** @deprecated use `CustomFieldDate$outboundSchema` instead. */
    CustomFieldDate$.outboundSchema = CustomFieldDate$outboundSchema;
})(CustomFieldDate$ || (CustomFieldDate$ = {}));
export function customFieldDateToJSON(customFieldDate) {
    return JSON.stringify(CustomFieldDate$outboundSchema.parse(customFieldDate));
}
export function customFieldDateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldDate' from JSON`);
}
//# sourceMappingURL=customfielddate.js.map