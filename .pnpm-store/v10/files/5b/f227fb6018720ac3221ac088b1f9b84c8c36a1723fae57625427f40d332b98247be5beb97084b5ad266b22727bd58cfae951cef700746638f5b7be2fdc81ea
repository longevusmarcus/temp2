/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { customersCreate } from "../funcs/customersCreate.js";
import { customersDelete } from "../funcs/customersDelete.js";
import { customersDeleteExternal } from "../funcs/customersDeleteExternal.js";
import { customersGet } from "../funcs/customersGet.js";
import { customersGetExternal } from "../funcs/customersGetExternal.js";
import { customersGetState } from "../funcs/customersGetState.js";
import { customersGetStateExternal } from "../funcs/customersGetStateExternal.js";
import { customersList } from "../funcs/customersList.js";
import { customersUpdate } from "../funcs/customersUpdate.js";
import { customersUpdateExternal } from "../funcs/customersUpdateExternal.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class Customers extends ClientSDK {
    /**
     * List Customers
     *
     * @remarks
     * List customers.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async list(request, options) {
        return unwrapResultIterator(customersList(this, request, options));
    }
    /**
     * Create Customer
     *
     * @remarks
     * Create a customer.
     *
     * **Scopes**: `customers:write`
     */
    async create(request, options) {
        return unwrapAsync(customersCreate(this, request, options));
    }
    /**
     * Get Customer
     *
     * @remarks
     * Get a customer by ID.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async get(request, options) {
        return unwrapAsync(customersGet(this, request, options));
    }
    /**
     * Update Customer
     *
     * @remarks
     * Update a customer.
     *
     * **Scopes**: `customers:write`
     */
    async update(request, options) {
        return unwrapAsync(customersUpdate(this, request, options));
    }
    /**
     * Delete Customer
     *
     * @remarks
     * Delete a customer.
     *
     * This action cannot be undone and will immediately:
     * - Cancel any active subscriptions for the customer
     * - Revoke all their benefits
     * - Clear any `external_id`
     *
     * Use it only in the context of deleting a user within your
     * own service. Otherwise, use more granular API endpoints to cancel
     * a specific subscription or revoke certain benefits.
     *
     * Note: The customers information will nonetheless be retained for historic
     * orders and subscriptions.
     *
     * **Scopes**: `customers:write`
     */
    async delete(request, options) {
        return unwrapAsync(customersDelete(this, request, options));
    }
    /**
     * Get Customer by External ID
     *
     * @remarks
     * Get a customer by external ID.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async getExternal(request, options) {
        return unwrapAsync(customersGetExternal(this, request, options));
    }
    /**
     * Update Customer by External ID
     *
     * @remarks
     * Update a customer by external ID.
     *
     * **Scopes**: `customers:write`
     */
    async updateExternal(request, options) {
        return unwrapAsync(customersUpdateExternal(this, request, options));
    }
    /**
     * Delete Customer by External ID
     *
     * @remarks
     * Delete a customer by external ID.
     *
     * Immediately cancels any active subscriptions and revokes any active benefits.
     *
     * **Scopes**: `customers:write`
     */
    async deleteExternal(request, options) {
        return unwrapAsync(customersDeleteExternal(this, request, options));
    }
    /**
     * Get Customer State
     *
     * @remarks
     * Get a customer state by ID.
     *
     * The customer state includes information about
     * the customer's active subscriptions and benefits.
     *
     * It's the ideal endpoint to use when you need to get a full overview
     * of a customer's status.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async getState(request, options) {
        return unwrapAsync(customersGetState(this, request, options));
    }
    /**
     * Get Customer State by External ID
     *
     * @remarks
     * Get a customer state by external ID.
     *
     * The customer state includes information about
     * the customer's active subscriptions and benefits.
     *
     * It's the ideal endpoint to use when you need to get a full overview
     * of a customer's status.
     *
     * **Scopes**: `customers:read` `customers:write`
     */
    async getStateExternal(request, options) {
        return unwrapAsync(customersGetStateExternal(this, request, options));
    }
}
//# sourceMappingURL=customers.js.map