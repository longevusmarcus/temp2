/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { AttachedCustomFieldCreate$inboundSchema, AttachedCustomFieldCreate$outboundSchema, } from "./attachedcustomfieldcreate.js";
import { ExistingProductPrice$inboundSchema, ExistingProductPrice$outboundSchema, } from "./existingproductprice.js";
import { ProductPriceCustomCreate$inboundSchema, ProductPriceCustomCreate$outboundSchema, } from "./productpricecustomcreate.js";
import { ProductPriceFixedCreate$inboundSchema, ProductPriceFixedCreate$outboundSchema, } from "./productpricefixedcreate.js";
import { ProductPriceFreeCreate$inboundSchema, ProductPriceFreeCreate$outboundSchema, } from "./productpricefreecreate.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
/** @internal */
export const ProductUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const ProductUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductUpdateMetadata$;
(function (ProductUpdateMetadata$) {
    /** @deprecated use `ProductUpdateMetadata$inboundSchema` instead. */
    ProductUpdateMetadata$.inboundSchema = ProductUpdateMetadata$inboundSchema;
    /** @deprecated use `ProductUpdateMetadata$outboundSchema` instead. */
    ProductUpdateMetadata$.outboundSchema = ProductUpdateMetadata$outboundSchema;
})(ProductUpdateMetadata$ || (ProductUpdateMetadata$ = {}));
export function productUpdateMetadataToJSON(productUpdateMetadata) {
    return JSON.stringify(ProductUpdateMetadata$outboundSchema.parse(productUpdateMetadata));
}
export function productUpdateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductUpdateMetadata' from JSON`);
}
/** @internal */
export const ProductUpdatePrices$inboundSchema = z.union([
    ExistingProductPrice$inboundSchema,
    ProductPriceFreeCreate$inboundSchema,
    ProductPriceFixedCreate$inboundSchema,
    ProductPriceCustomCreate$inboundSchema,
]);
/** @internal */
export const ProductUpdatePrices$outboundSchema = z.union([
    ExistingProductPrice$outboundSchema,
    ProductPriceFreeCreate$outboundSchema,
    ProductPriceFixedCreate$outboundSchema,
    ProductPriceCustomCreate$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductUpdatePrices$;
(function (ProductUpdatePrices$) {
    /** @deprecated use `ProductUpdatePrices$inboundSchema` instead. */
    ProductUpdatePrices$.inboundSchema = ProductUpdatePrices$inboundSchema;
    /** @deprecated use `ProductUpdatePrices$outboundSchema` instead. */
    ProductUpdatePrices$.outboundSchema = ProductUpdatePrices$outboundSchema;
})(ProductUpdatePrices$ || (ProductUpdatePrices$ = {}));
export function productUpdatePricesToJSON(productUpdatePrices) {
    return JSON.stringify(ProductUpdatePrices$outboundSchema.parse(productUpdatePrices));
}
export function productUpdatePricesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductUpdatePrices$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductUpdatePrices' from JSON`);
}
/** @internal */
export const ProductUpdate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    recurring_interval: z.nullable(SubscriptionRecurringInterval$inboundSchema)
        .optional(),
    is_archived: z.nullable(z.boolean()).optional(),
    prices: z.nullable(z.array(z.union([
        ExistingProductPrice$inboundSchema,
        ProductPriceFreeCreate$inboundSchema,
        ProductPriceFixedCreate$inboundSchema,
        ProductPriceCustomCreate$inboundSchema,
    ]))).optional(),
    medias: z.nullable(z.array(z.string())).optional(),
    attached_custom_fields: z.nullable(z.array(AttachedCustomFieldCreate$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "recurring_interval": "recurringInterval",
        "is_archived": "isArchived",
        "attached_custom_fields": "attachedCustomFields",
    });
});
/** @internal */
export const ProductUpdate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    recurringInterval: z.nullable(SubscriptionRecurringInterval$outboundSchema)
        .optional(),
    isArchived: z.nullable(z.boolean()).optional(),
    prices: z.nullable(z.array(z.union([
        ExistingProductPrice$outboundSchema,
        ProductPriceFreeCreate$outboundSchema,
        ProductPriceFixedCreate$outboundSchema,
        ProductPriceCustomCreate$outboundSchema,
    ]))).optional(),
    medias: z.nullable(z.array(z.string())).optional(),
    attachedCustomFields: z.nullable(z.array(AttachedCustomFieldCreate$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        recurringInterval: "recurring_interval",
        isArchived: "is_archived",
        attachedCustomFields: "attached_custom_fields",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductUpdate$;
(function (ProductUpdate$) {
    /** @deprecated use `ProductUpdate$inboundSchema` instead. */
    ProductUpdate$.inboundSchema = ProductUpdate$inboundSchema;
    /** @deprecated use `ProductUpdate$outboundSchema` instead. */
    ProductUpdate$.outboundSchema = ProductUpdate$outboundSchema;
})(ProductUpdate$ || (ProductUpdate$ = {}));
export function productUpdateToJSON(productUpdate) {
    return JSON.stringify(ProductUpdate$outboundSchema.parse(productUpdate));
}
export function productUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductUpdate' from JSON`);
}
//# sourceMappingURL=productupdate.js.map