/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CheckoutLinkSortProperty$inboundSchema, CheckoutLinkSortProperty$outboundSchema, } from "../components/checkoutlinksortproperty.js";
import { ListResourceCheckoutLink$inboundSchema, ListResourceCheckoutLink$outboundSchema, } from "../components/listresourcecheckoutlink.js";
/** @internal */
export const CheckoutLinksListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CheckoutLinksListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinksListQueryParamOrganizationIDFilter$;
(function (CheckoutLinksListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `CheckoutLinksListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    CheckoutLinksListQueryParamOrganizationIDFilter$.inboundSchema = CheckoutLinksListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `CheckoutLinksListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    CheckoutLinksListQueryParamOrganizationIDFilter$.outboundSchema = CheckoutLinksListQueryParamOrganizationIDFilter$outboundSchema;
})(CheckoutLinksListQueryParamOrganizationIDFilter$ || (CheckoutLinksListQueryParamOrganizationIDFilter$ = {}));
export function checkoutLinksListQueryParamOrganizationIDFilterToJSON(checkoutLinksListQueryParamOrganizationIDFilter) {
    return JSON.stringify(CheckoutLinksListQueryParamOrganizationIDFilter$outboundSchema.parse(checkoutLinksListQueryParamOrganizationIDFilter));
}
export function checkoutLinksListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinksListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinksListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const CheckoutLinksListQueryParamProductIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CheckoutLinksListQueryParamProductIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinksListQueryParamProductIDFilter$;
(function (CheckoutLinksListQueryParamProductIDFilter$) {
    /** @deprecated use `CheckoutLinksListQueryParamProductIDFilter$inboundSchema` instead. */
    CheckoutLinksListQueryParamProductIDFilter$.inboundSchema = CheckoutLinksListQueryParamProductIDFilter$inboundSchema;
    /** @deprecated use `CheckoutLinksListQueryParamProductIDFilter$outboundSchema` instead. */
    CheckoutLinksListQueryParamProductIDFilter$.outboundSchema = CheckoutLinksListQueryParamProductIDFilter$outboundSchema;
})(CheckoutLinksListQueryParamProductIDFilter$ || (CheckoutLinksListQueryParamProductIDFilter$ = {}));
export function checkoutLinksListQueryParamProductIDFilterToJSON(checkoutLinksListQueryParamProductIDFilter) {
    return JSON.stringify(CheckoutLinksListQueryParamProductIDFilter$outboundSchema.parse(checkoutLinksListQueryParamProductIDFilter));
}
export function checkoutLinksListQueryParamProductIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinksListQueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinksListQueryParamProductIDFilter' from JSON`);
}
/** @internal */
export const CheckoutLinksListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CheckoutLinkSortProperty$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "product_id": "productId",
    });
});
/** @internal */
export const CheckoutLinksListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CheckoutLinkSortProperty$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        productId: "product_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinksListRequest$;
(function (CheckoutLinksListRequest$) {
    /** @deprecated use `CheckoutLinksListRequest$inboundSchema` instead. */
    CheckoutLinksListRequest$.inboundSchema = CheckoutLinksListRequest$inboundSchema;
    /** @deprecated use `CheckoutLinksListRequest$outboundSchema` instead. */
    CheckoutLinksListRequest$.outboundSchema = CheckoutLinksListRequest$outboundSchema;
})(CheckoutLinksListRequest$ || (CheckoutLinksListRequest$ = {}));
export function checkoutLinksListRequestToJSON(checkoutLinksListRequest) {
    return JSON.stringify(CheckoutLinksListRequest$outboundSchema.parse(checkoutLinksListRequest));
}
export function checkoutLinksListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinksListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinksListRequest' from JSON`);
}
/** @internal */
export const CheckoutLinksListResponse$inboundSchema = z.object({
    Result: ListResourceCheckoutLink$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const CheckoutLinksListResponse$outboundSchema = z.object({
    result: ListResourceCheckoutLink$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinksListResponse$;
(function (CheckoutLinksListResponse$) {
    /** @deprecated use `CheckoutLinksListResponse$inboundSchema` instead. */
    CheckoutLinksListResponse$.inboundSchema = CheckoutLinksListResponse$inboundSchema;
    /** @deprecated use `CheckoutLinksListResponse$outboundSchema` instead. */
    CheckoutLinksListResponse$.outboundSchema = CheckoutLinksListResponse$outboundSchema;
})(CheckoutLinksListResponse$ || (CheckoutLinksListResponse$ = {}));
export function checkoutLinksListResponseToJSON(checkoutLinksListResponse) {
    return JSON.stringify(CheckoutLinksListResponse$outboundSchema.parse(checkoutLinksListResponse));
}
export function checkoutLinksListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinksListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinksListResponse' from JSON`);
}
//# sourceMappingURL=checkoutlinkslist.js.map