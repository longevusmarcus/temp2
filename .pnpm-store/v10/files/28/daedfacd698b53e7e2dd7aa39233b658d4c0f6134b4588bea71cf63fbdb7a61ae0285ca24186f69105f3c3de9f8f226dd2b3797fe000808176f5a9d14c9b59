import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type TokenResponse = {
    accessToken: string;
    tokenType?: "Bearer" | undefined;
    expiresIn: number;
    refreshToken: string | null;
    scope: string;
    idToken: string;
};
/** @internal */
export declare const TokenResponse$inboundSchema: z.ZodType<TokenResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type TokenResponse$Outbound = {
    access_token: string;
    token_type: "Bearer";
    expires_in: number;
    refresh_token: string | null;
    scope: string;
    id_token: string;
};
/** @internal */
export declare const TokenResponse$outboundSchema: z.ZodType<TokenResponse$Outbound, z.ZodTypeDef, TokenResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TokenResponse$ {
    /** @deprecated use `TokenResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TokenResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `TokenResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TokenResponse$Outbound, z.ZodTypeDef, TokenResponse>;
    /** @deprecated use `TokenResponse$Outbound` instead. */
    type Outbound = TokenResponse$Outbound;
}
export declare function tokenResponseToJSON(tokenResponse: TokenResponse): string;
export declare function tokenResponseFromJSON(jsonString: string): SafeParseResult<TokenResponse, SDKValidationError>;
//# sourceMappingURL=tokenresponse.d.ts.map