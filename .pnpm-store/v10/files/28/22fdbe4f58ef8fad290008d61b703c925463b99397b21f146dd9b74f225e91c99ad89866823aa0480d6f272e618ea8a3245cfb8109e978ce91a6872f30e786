/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResourceLicenseKeyRead$inboundSchema, ListResourceLicenseKeyRead$outboundSchema, } from "../components/listresourcelicensekeyread.js";
/** @internal */
export const LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeysListQueryParamOrganizationIDFilter$;
(function (LicenseKeysListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    LicenseKeysListQueryParamOrganizationIDFilter$.inboundSchema = LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    LicenseKeysListQueryParamOrganizationIDFilter$.outboundSchema = LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema;
})(LicenseKeysListQueryParamOrganizationIDFilter$ || (LicenseKeysListQueryParamOrganizationIDFilter$ = {}));
export function licenseKeysListQueryParamOrganizationIDFilterToJSON(licenseKeysListQueryParamOrganizationIDFilter) {
    return JSON.stringify(LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema.parse(licenseKeysListQueryParamOrganizationIDFilter));
}
export function licenseKeysListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeysListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const QueryParamBenefitIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const QueryParamBenefitIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamBenefitIDFilter$;
(function (QueryParamBenefitIDFilter$) {
    /** @deprecated use `QueryParamBenefitIDFilter$inboundSchema` instead. */
    QueryParamBenefitIDFilter$.inboundSchema = QueryParamBenefitIDFilter$inboundSchema;
    /** @deprecated use `QueryParamBenefitIDFilter$outboundSchema` instead. */
    QueryParamBenefitIDFilter$.outboundSchema = QueryParamBenefitIDFilter$outboundSchema;
})(QueryParamBenefitIDFilter$ || (QueryParamBenefitIDFilter$ = {}));
export function queryParamBenefitIDFilterToJSON(queryParamBenefitIDFilter) {
    return JSON.stringify(QueryParamBenefitIDFilter$outboundSchema.parse(queryParamBenefitIDFilter));
}
export function queryParamBenefitIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamBenefitIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamBenefitIDFilter' from JSON`);
}
/** @internal */
export const LicenseKeysListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    benefit_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "benefit_id": "benefitId",
    });
});
/** @internal */
export const LicenseKeysListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    benefitId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        benefitId: "benefit_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeysListRequest$;
(function (LicenseKeysListRequest$) {
    /** @deprecated use `LicenseKeysListRequest$inboundSchema` instead. */
    LicenseKeysListRequest$.inboundSchema = LicenseKeysListRequest$inboundSchema;
    /** @deprecated use `LicenseKeysListRequest$outboundSchema` instead. */
    LicenseKeysListRequest$.outboundSchema = LicenseKeysListRequest$outboundSchema;
})(LicenseKeysListRequest$ || (LicenseKeysListRequest$ = {}));
export function licenseKeysListRequestToJSON(licenseKeysListRequest) {
    return JSON.stringify(LicenseKeysListRequest$outboundSchema.parse(licenseKeysListRequest));
}
export function licenseKeysListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeysListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeysListRequest' from JSON`);
}
/** @internal */
export const LicenseKeysListResponse$inboundSchema = z.object({
    Result: ListResourceLicenseKeyRead$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const LicenseKeysListResponse$outboundSchema = z.object({
    result: ListResourceLicenseKeyRead$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseKeysListResponse$;
(function (LicenseKeysListResponse$) {
    /** @deprecated use `LicenseKeysListResponse$inboundSchema` instead. */
    LicenseKeysListResponse$.inboundSchema = LicenseKeysListResponse$inboundSchema;
    /** @deprecated use `LicenseKeysListResponse$outboundSchema` instead. */
    LicenseKeysListResponse$.outboundSchema = LicenseKeysListResponse$outboundSchema;
})(LicenseKeysListResponse$ || (LicenseKeysListResponse$ = {}));
export function licenseKeysListResponseToJSON(licenseKeysListResponse) {
    return JSON.stringify(LicenseKeysListResponse$outboundSchema.parse(licenseKeysListResponse));
}
export function licenseKeysListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseKeysListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseKeysListResponse' from JSON`);
}
//# sourceMappingURL=licensekeyslist.js.map