"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkoutsList = checkoutsList;
const dlv_js_1 = require("../lib/dlv.js");
const encodings_js_1 = require("../lib/encodings.js");
const M = __importStar(require("../lib/matchers.js"));
const primitives_js_1 = require("../lib/primitives.js");
const schemas_js_1 = require("../lib/schemas.js");
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const httpvalidationerror_js_1 = require("../models/errors/httpvalidationerror.js");
const checkoutslist_js_1 = require("../models/operations/checkoutslist.js");
const async_js_1 = require("../types/async.js");
const operations_js_1 = require("../types/operations.js");
/**
 * List Checkout Sessions
 *
 * @remarks
 * List checkout sessions.
 *
 * **Scopes**: `checkouts:read` `checkouts:write`
 */
function checkoutsList(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value) => checkoutslist_js_1.CheckoutsListRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [(0, operations_js_1.haltIterator)(parsed), { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/v1/checkouts/")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "limit": payload.limit,
        "organization_id": payload.organization_id,
        "page": payload.page,
        "product_id": payload.product_id,
        "sorting": payload.sorting,
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json",
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.accessToken);
    const securityInput = secConfig == null ? {} : { accessToken: secConfig };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "checkouts:list",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.accessToken,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [(0, operations_js_1.haltIterator)(requestRes), { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [(0, operations_js_1.haltIterator)(doResult), { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result, raw] = await M.match(M.json(200, checkoutslist_js_1.CheckoutsListResponse$inboundSchema, { key: "Result" }), M.jsonErr(422, httpvalidationerror_js_1.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
    if (!result.ok) {
        return [(0, operations_js_1.haltIterator)(result), {
                status: "complete",
                request: req,
                response,
            }];
    }
    const nextFunc = (responseData) => {
        const page = request?.page ?? 1;
        const nextPage = page + 1;
        const numPages = (0, dlv_js_1.dlv)(responseData, "pagination.max_page");
        if (typeof numPages !== "number" || numPages <= page) {
            return { next: () => null };
        }
        if (!responseData) {
            return { next: () => null };
        }
        const results = (0, dlv_js_1.dlv)(responseData, "items");
        if (!Array.isArray(results) || !results.length) {
            return { next: () => null };
        }
        const limit = request?.limit ?? 10;
        if (results.length < limit) {
            return { next: () => null };
        }
        const nextVal = () => checkoutsList(client, {
            ...request,
            page: nextPage,
        }, options);
        return { next: nextVal, "~next": { page: nextPage } };
    };
    const page = { ...result, ...nextFunc(raw) };
    return [{ ...page, ...(0, operations_js_1.createPageIterator)(page, (v) => !v.ok) }, {
            status: "complete",
            request: req,
            response,
        }];
}
//# sourceMappingURL=checkoutsList.js.map