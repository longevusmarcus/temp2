/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).
 */
export const BenefitGitHubRepositoryCreatePropertiesPermission = {
    Pull: "pull",
    Triage: "triage",
    Push: "push",
    Maintain: "maintain",
    Admin: "admin",
};
/** @internal */
export const BenefitGitHubRepositoryCreatePropertiesPermission$inboundSchema = z
    .nativeEnum(BenefitGitHubRepositoryCreatePropertiesPermission);
/** @internal */
export const BenefitGitHubRepositoryCreatePropertiesPermission$outboundSchema = BenefitGitHubRepositoryCreatePropertiesPermission$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGitHubRepositoryCreatePropertiesPermission$;
(function (BenefitGitHubRepositoryCreatePropertiesPermission$) {
    /** @deprecated use `BenefitGitHubRepositoryCreatePropertiesPermission$inboundSchema` instead. */
    BenefitGitHubRepositoryCreatePropertiesPermission$.inboundSchema = BenefitGitHubRepositoryCreatePropertiesPermission$inboundSchema;
    /** @deprecated use `BenefitGitHubRepositoryCreatePropertiesPermission$outboundSchema` instead. */
    BenefitGitHubRepositoryCreatePropertiesPermission$.outboundSchema = BenefitGitHubRepositoryCreatePropertiesPermission$outboundSchema;
})(BenefitGitHubRepositoryCreatePropertiesPermission$ || (BenefitGitHubRepositoryCreatePropertiesPermission$ = {}));
/** @internal */
export const BenefitGitHubRepositoryCreateProperties$inboundSchema = z.object({
    repository_owner: z.string(),
    repository_name: z.string(),
    permission: BenefitGitHubRepositoryCreatePropertiesPermission$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "repository_owner": "repositoryOwner",
        "repository_name": "repositoryName",
    });
});
/** @internal */
export const BenefitGitHubRepositoryCreateProperties$outboundSchema = z.object({
    repositoryOwner: z.string(),
    repositoryName: z.string(),
    permission: BenefitGitHubRepositoryCreatePropertiesPermission$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        repositoryOwner: "repository_owner",
        repositoryName: "repository_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGitHubRepositoryCreateProperties$;
(function (BenefitGitHubRepositoryCreateProperties$) {
    /** @deprecated use `BenefitGitHubRepositoryCreateProperties$inboundSchema` instead. */
    BenefitGitHubRepositoryCreateProperties$.inboundSchema = BenefitGitHubRepositoryCreateProperties$inboundSchema;
    /** @deprecated use `BenefitGitHubRepositoryCreateProperties$outboundSchema` instead. */
    BenefitGitHubRepositoryCreateProperties$.outboundSchema = BenefitGitHubRepositoryCreateProperties$outboundSchema;
})(BenefitGitHubRepositoryCreateProperties$ || (BenefitGitHubRepositoryCreateProperties$ = {}));
export function benefitGitHubRepositoryCreatePropertiesToJSON(benefitGitHubRepositoryCreateProperties) {
    return JSON.stringify(BenefitGitHubRepositoryCreateProperties$outboundSchema.parse(benefitGitHubRepositoryCreateProperties));
}
export function benefitGitHubRepositoryCreatePropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGitHubRepositoryCreateProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGitHubRepositoryCreateProperties' from JSON`);
}
//# sourceMappingURL=benefitgithubrepositorycreateproperties.js.map