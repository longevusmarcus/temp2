/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { S3FileCreateMultipart$inboundSchema, S3FileCreateMultipart$outboundSchema, } from "./s3filecreatemultipart.js";
/** @internal */
export const DownloadableFileCreate$inboundSchema = z.object({
    organization_id: z.nullable(z.string()).optional(),
    name: z.string(),
    mime_type: z.string(),
    size: z.number().int(),
    checksum_sha256_base64: z.nullable(z.string()).optional(),
    upload: S3FileCreateMultipart$inboundSchema,
    service: z.literal("downloadable").optional(),
    version: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "mime_type": "mimeType",
        "checksum_sha256_base64": "checksumSha256Base64",
    });
});
/** @internal */
export const DownloadableFileCreate$outboundSchema = z.object({
    organizationId: z.nullable(z.string()).optional(),
    name: z.string(),
    mimeType: z.string(),
    size: z.number().int(),
    checksumSha256Base64: z.nullable(z.string()).optional(),
    upload: S3FileCreateMultipart$outboundSchema,
    service: z.literal("downloadable").default("downloadable"),
    version: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        mimeType: "mime_type",
        checksumSha256Base64: "checksum_sha256_base64",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DownloadableFileCreate$;
(function (DownloadableFileCreate$) {
    /** @deprecated use `DownloadableFileCreate$inboundSchema` instead. */
    DownloadableFileCreate$.inboundSchema = DownloadableFileCreate$inboundSchema;
    /** @deprecated use `DownloadableFileCreate$outboundSchema` instead. */
    DownloadableFileCreate$.outboundSchema = DownloadableFileCreate$outboundSchema;
})(DownloadableFileCreate$ || (DownloadableFileCreate$ = {}));
export function downloadableFileCreateToJSON(downloadableFileCreate) {
    return JSON.stringify(DownloadableFileCreate$outboundSchema.parse(downloadableFileCreate));
}
export function downloadableFileCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DownloadableFileCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DownloadableFileCreate' from JSON`);
}
//# sourceMappingURL=downloadablefilecreate.js.map