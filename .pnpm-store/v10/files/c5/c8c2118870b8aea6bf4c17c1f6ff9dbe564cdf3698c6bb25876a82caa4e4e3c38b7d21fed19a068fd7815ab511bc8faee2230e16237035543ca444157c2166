/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldNumberProperties$inboundSchema, CustomFieldNumberProperties$outboundSchema, } from "./customfieldnumberproperties.js";
/** @internal */
export const CustomFieldNumberMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
export const CustomFieldNumberMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldNumberMetadata$;
(function (CustomFieldNumberMetadata$) {
    /** @deprecated use `CustomFieldNumberMetadata$inboundSchema` instead. */
    CustomFieldNumberMetadata$.inboundSchema = CustomFieldNumberMetadata$inboundSchema;
    /** @deprecated use `CustomFieldNumberMetadata$outboundSchema` instead. */
    CustomFieldNumberMetadata$.outboundSchema = CustomFieldNumberMetadata$outboundSchema;
})(CustomFieldNumberMetadata$ || (CustomFieldNumberMetadata$ = {}));
export function customFieldNumberMetadataToJSON(customFieldNumberMetadata) {
    return JSON.stringify(CustomFieldNumberMetadata$outboundSchema.parse(customFieldNumberMetadata));
}
export function customFieldNumberMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldNumberMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldNumberMetadata' from JSON`);
}
/** @internal */
export const CustomFieldNumber$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("number").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.string(),
    properties: CustomFieldNumberProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CustomFieldNumber$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("number").default("number"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.string(),
    properties: CustomFieldNumberProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldNumber$;
(function (CustomFieldNumber$) {
    /** @deprecated use `CustomFieldNumber$inboundSchema` instead. */
    CustomFieldNumber$.inboundSchema = CustomFieldNumber$inboundSchema;
    /** @deprecated use `CustomFieldNumber$outboundSchema` instead. */
    CustomFieldNumber$.outboundSchema = CustomFieldNumber$outboundSchema;
})(CustomFieldNumber$ || (CustomFieldNumber$ = {}));
export function customFieldNumberToJSON(customFieldNumber) {
    return JSON.stringify(CustomFieldNumber$outboundSchema.parse(customFieldNumber));
}
export function customFieldNumberFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldNumber$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldNumber' from JSON`);
}
//# sourceMappingURL=customfieldnumber.js.map