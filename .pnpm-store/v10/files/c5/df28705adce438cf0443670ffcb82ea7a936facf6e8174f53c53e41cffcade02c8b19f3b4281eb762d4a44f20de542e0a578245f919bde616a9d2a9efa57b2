/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { PaymentMethodCardData$inboundSchema, PaymentMethodCardData$outboundSchema, } from "./paymentmethodcarddata.js";
/** @internal */
export const PaymentMethodCard$inboundSchema = z.object({
    id: z.string(),
    type: z.literal("card").optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    default: z.boolean(),
    card: PaymentMethodCardData$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
    });
});
/** @internal */
export const PaymentMethodCard$outboundSchema = z.object({
    id: z.string(),
    type: z.literal("card").default("card"),
    createdAt: z.date().transform(v => v.toISOString()),
    default: z.boolean(),
    card: PaymentMethodCardData$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentMethodCard$;
(function (PaymentMethodCard$) {
    /** @deprecated use `PaymentMethodCard$inboundSchema` instead. */
    PaymentMethodCard$.inboundSchema = PaymentMethodCard$inboundSchema;
    /** @deprecated use `PaymentMethodCard$outboundSchema` instead. */
    PaymentMethodCard$.outboundSchema = PaymentMethodCard$outboundSchema;
})(PaymentMethodCard$ || (PaymentMethodCard$ = {}));
export function paymentMethodCardToJSON(paymentMethodCard) {
    return JSON.stringify(PaymentMethodCard$outboundSchema.parse(paymentMethodCard));
}
export function paymentMethodCardFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentMethodCard$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentMethodCard' from JSON`);
}
//# sourceMappingURL=paymentmethodcard.js.map