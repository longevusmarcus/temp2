/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Benefit$inboundSchema, Benefit$outboundSchema, } from "./benefit.js";
import { BenefitGrantCustomProperties$inboundSchema, BenefitGrantCustomProperties$outboundSchema, } from "./benefitgrantcustomproperties.js";
import { BenefitGrantDiscordProperties$inboundSchema, BenefitGrantDiscordProperties$outboundSchema, } from "./benefitgrantdiscordproperties.js";
import { BenefitGrantDownloadablesProperties$inboundSchema, BenefitGrantDownloadablesProperties$outboundSchema, } from "./benefitgrantdownloadablesproperties.js";
import { BenefitGrantGitHubRepositoryProperties$inboundSchema, BenefitGrantGitHubRepositoryProperties$outboundSchema, } from "./benefitgrantgithubrepositoryproperties.js";
import { BenefitGrantLicenseKeysProperties$inboundSchema, BenefitGrantLicenseKeysProperties$outboundSchema, } from "./benefitgrantlicensekeysproperties.js";
import { Customer$inboundSchema, Customer$outboundSchema, } from "./customer.js";
/** @internal */
export const BenefitGrantWebhookProperties$inboundSchema = z.union([
    BenefitGrantCustomProperties$inboundSchema,
    BenefitGrantDownloadablesProperties$inboundSchema,
    BenefitGrantLicenseKeysProperties$inboundSchema,
    BenefitGrantDiscordProperties$inboundSchema,
    BenefitGrantGitHubRepositoryProperties$inboundSchema,
]);
/** @internal */
export const BenefitGrantWebhookProperties$outboundSchema = z.union([
    BenefitGrantCustomProperties$outboundSchema,
    BenefitGrantDownloadablesProperties$outboundSchema,
    BenefitGrantLicenseKeysProperties$outboundSchema,
    BenefitGrantDiscordProperties$outboundSchema,
    BenefitGrantGitHubRepositoryProperties$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGrantWebhookProperties$;
(function (BenefitGrantWebhookProperties$) {
    /** @deprecated use `BenefitGrantWebhookProperties$inboundSchema` instead. */
    BenefitGrantWebhookProperties$.inboundSchema = BenefitGrantWebhookProperties$inboundSchema;
    /** @deprecated use `BenefitGrantWebhookProperties$outboundSchema` instead. */
    BenefitGrantWebhookProperties$.outboundSchema = BenefitGrantWebhookProperties$outboundSchema;
})(BenefitGrantWebhookProperties$ || (BenefitGrantWebhookProperties$ = {}));
export function benefitGrantWebhookPropertiesToJSON(benefitGrantWebhookProperties) {
    return JSON.stringify(BenefitGrantWebhookProperties$outboundSchema.parse(benefitGrantWebhookProperties));
}
export function benefitGrantWebhookPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGrantWebhookProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGrantWebhookProperties' from JSON`);
}
/** @internal */
export const PreviousProperties$inboundSchema = z.union([
    BenefitGrantCustomProperties$inboundSchema,
    BenefitGrantDownloadablesProperties$inboundSchema,
    BenefitGrantLicenseKeysProperties$inboundSchema,
    BenefitGrantDiscordProperties$inboundSchema,
    BenefitGrantGitHubRepositoryProperties$inboundSchema,
]);
/** @internal */
export const PreviousProperties$outboundSchema = z.union([
    BenefitGrantCustomProperties$outboundSchema,
    BenefitGrantDownloadablesProperties$outboundSchema,
    BenefitGrantLicenseKeysProperties$outboundSchema,
    BenefitGrantDiscordProperties$outboundSchema,
    BenefitGrantGitHubRepositoryProperties$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PreviousProperties$;
(function (PreviousProperties$) {
    /** @deprecated use `PreviousProperties$inboundSchema` instead. */
    PreviousProperties$.inboundSchema = PreviousProperties$inboundSchema;
    /** @deprecated use `PreviousProperties$outboundSchema` instead. */
    PreviousProperties$.outboundSchema = PreviousProperties$outboundSchema;
})(PreviousProperties$ || (PreviousProperties$ = {}));
export function previousPropertiesToJSON(previousProperties) {
    return JSON.stringify(PreviousProperties$outboundSchema.parse(previousProperties));
}
export function previousPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PreviousProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PreviousProperties' from JSON`);
}
/** @internal */
export const BenefitGrantWebhook$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    granted_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    is_granted: z.boolean(),
    revoked_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    is_revoked: z.boolean(),
    subscription_id: z.nullable(z.string()),
    order_id: z.nullable(z.string()),
    customer_id: z.string(),
    user_id: z.string(),
    benefit_id: z.string(),
    customer: Customer$inboundSchema,
    properties: z.union([
        BenefitGrantCustomProperties$inboundSchema,
        BenefitGrantDownloadablesProperties$inboundSchema,
        BenefitGrantLicenseKeysProperties$inboundSchema,
        BenefitGrantDiscordProperties$inboundSchema,
        BenefitGrantGitHubRepositoryProperties$inboundSchema,
    ]),
    benefit: Benefit$inboundSchema,
    previous_properties: z.nullable(z.union([
        BenefitGrantCustomProperties$inboundSchema,
        BenefitGrantDownloadablesProperties$inboundSchema,
        BenefitGrantLicenseKeysProperties$inboundSchema,
        BenefitGrantDiscordProperties$inboundSchema,
        BenefitGrantGitHubRepositoryProperties$inboundSchema,
    ])).optional(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "granted_at": "grantedAt",
        "is_granted": "isGranted",
        "revoked_at": "revokedAt",
        "is_revoked": "isRevoked",
        "subscription_id": "subscriptionId",
        "order_id": "orderId",
        "customer_id": "customerId",
        "user_id": "userId",
        "benefit_id": "benefitId",
        "previous_properties": "previousProperties",
    });
});
/** @internal */
export const BenefitGrantWebhook$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    grantedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    isGranted: z.boolean(),
    revokedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    isRevoked: z.boolean(),
    subscriptionId: z.nullable(z.string()),
    orderId: z.nullable(z.string()),
    customerId: z.string(),
    userId: z.string(),
    benefitId: z.string(),
    customer: Customer$outboundSchema,
    properties: z.union([
        BenefitGrantCustomProperties$outboundSchema,
        BenefitGrantDownloadablesProperties$outboundSchema,
        BenefitGrantLicenseKeysProperties$outboundSchema,
        BenefitGrantDiscordProperties$outboundSchema,
        BenefitGrantGitHubRepositoryProperties$outboundSchema,
    ]),
    benefit: Benefit$outboundSchema,
    previousProperties: z.nullable(z.union([
        BenefitGrantCustomProperties$outboundSchema,
        BenefitGrantDownloadablesProperties$outboundSchema,
        BenefitGrantLicenseKeysProperties$outboundSchema,
        BenefitGrantDiscordProperties$outboundSchema,
        BenefitGrantGitHubRepositoryProperties$outboundSchema,
    ])).optional(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        grantedAt: "granted_at",
        isGranted: "is_granted",
        revokedAt: "revoked_at",
        isRevoked: "is_revoked",
        subscriptionId: "subscription_id",
        orderId: "order_id",
        customerId: "customer_id",
        userId: "user_id",
        benefitId: "benefit_id",
        previousProperties: "previous_properties",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGrantWebhook$;
(function (BenefitGrantWebhook$) {
    /** @deprecated use `BenefitGrantWebhook$inboundSchema` instead. */
    BenefitGrantWebhook$.inboundSchema = BenefitGrantWebhook$inboundSchema;
    /** @deprecated use `BenefitGrantWebhook$outboundSchema` instead. */
    BenefitGrantWebhook$.outboundSchema = BenefitGrantWebhook$outboundSchema;
})(BenefitGrantWebhook$ || (BenefitGrantWebhook$ = {}));
export function benefitGrantWebhookToJSON(benefitGrantWebhook) {
    return JSON.stringify(BenefitGrantWebhook$outboundSchema.parse(benefitGrantWebhook));
}
export function benefitGrantWebhookFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGrantWebhook$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGrantWebhook' from JSON`);
}
//# sourceMappingURL=benefitgrantwebhook.js.map