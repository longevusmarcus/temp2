import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Order, Order$Outbound } from "./order.js";
/**
 * Sent when a new order is created.
 *
 * @remarks
 *
 * A new order is created when:
 *
 * * A customer purchases a one-time product. In this case, `billing_reason` is set to `purchase`.
 * * A customer starts a subscription. In this case, `billing_reason` is set to `subscription_create`.
 * * A subscription is renewed. In this case, `billing_reason` is set to `subscription_cycle`.
 * * A subscription is upgraded or downgraded with an immediate proration invoice. In this case, `billing_reason` is set to `subscription_update`.
 *
 * <Warning>The order might not be paid yet, so the `status` field might be `pending`.</Warning>
 *
 * **Discord & Slack support:** Full
 */
export type WebhookOrderCreatedPayload = {
    type?: "order.created" | undefined;
    data: Order;
};
/** @internal */
export declare const WebhookOrderCreatedPayload$inboundSchema: z.ZodType<WebhookOrderCreatedPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookOrderCreatedPayload$Outbound = {
    type: "order.created";
    data: Order$Outbound;
};
/** @internal */
export declare const WebhookOrderCreatedPayload$outboundSchema: z.ZodType<WebhookOrderCreatedPayload$Outbound, z.ZodTypeDef, WebhookOrderCreatedPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookOrderCreatedPayload$ {
    /** @deprecated use `WebhookOrderCreatedPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookOrderCreatedPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookOrderCreatedPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookOrderCreatedPayload$Outbound, z.ZodTypeDef, WebhookOrderCreatedPayload>;
    /** @deprecated use `WebhookOrderCreatedPayload$Outbound` instead. */
    type Outbound = WebhookOrderCreatedPayload$Outbound;
}
export declare function webhookOrderCreatedPayloadToJSON(webhookOrderCreatedPayload: WebhookOrderCreatedPayload): string;
export declare function webhookOrderCreatedPayloadFromJSON(jsonString: string): SafeParseResult<WebhookOrderCreatedPayload, SDKValidationError>;
//# sourceMappingURL=webhookordercreatedpayload.d.ts.map