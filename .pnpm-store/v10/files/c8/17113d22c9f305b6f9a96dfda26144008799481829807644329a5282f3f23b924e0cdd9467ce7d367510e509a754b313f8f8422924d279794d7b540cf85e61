"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetersEventsResponse$ = exports.MetersEventsResponse$outboundSchema = exports.MetersEventsResponse$inboundSchema = exports.MetersEventsRequest$ = exports.MetersEventsRequest$outboundSchema = exports.MetersEventsRequest$inboundSchema = void 0;
exports.metersEventsRequestToJSON = metersEventsRequestToJSON;
exports.metersEventsRequestFromJSON = metersEventsRequestFromJSON;
exports.metersEventsResponseToJSON = metersEventsResponseToJSON;
exports.metersEventsResponseFromJSON = metersEventsResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const listresourceevent_js_1 = require("../components/listresourceevent.js");
/** @internal */
exports.MetersEventsRequest$inboundSchema = z.object({
    id: z.string(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
});
/** @internal */
exports.MetersEventsRequest$outboundSchema = z.object({
    id: z.string(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersEventsRequest$;
(function (MetersEventsRequest$) {
    /** @deprecated use `MetersEventsRequest$inboundSchema` instead. */
    MetersEventsRequest$.inboundSchema = exports.MetersEventsRequest$inboundSchema;
    /** @deprecated use `MetersEventsRequest$outboundSchema` instead. */
    MetersEventsRequest$.outboundSchema = exports.MetersEventsRequest$outboundSchema;
})(MetersEventsRequest$ || (exports.MetersEventsRequest$ = MetersEventsRequest$ = {}));
function metersEventsRequestToJSON(metersEventsRequest) {
    return JSON.stringify(exports.MetersEventsRequest$outboundSchema.parse(metersEventsRequest));
}
function metersEventsRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersEventsRequest' from JSON`);
}
/** @internal */
exports.MetersEventsResponse$inboundSchema = z.object({
    Result: listresourceevent_js_1.ListResourceEvent$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Result": "result",
    });
});
/** @internal */
exports.MetersEventsResponse$outboundSchema = z.object({
    result: listresourceevent_js_1.ListResourceEvent$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersEventsResponse$;
(function (MetersEventsResponse$) {
    /** @deprecated use `MetersEventsResponse$inboundSchema` instead. */
    MetersEventsResponse$.inboundSchema = exports.MetersEventsResponse$inboundSchema;
    /** @deprecated use `MetersEventsResponse$outboundSchema` instead. */
    MetersEventsResponse$.outboundSchema = exports.MetersEventsResponse$outboundSchema;
})(MetersEventsResponse$ || (exports.MetersEventsResponse$ = MetersEventsResponse$ = {}));
function metersEventsResponseToJSON(metersEventsResponse) {
    return JSON.stringify(exports.MetersEventsResponse$outboundSchema.parse(metersEventsResponse));
}
function metersEventsResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersEventsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersEventsResponse' from JSON`);
}
//# sourceMappingURL=metersevents.js.map