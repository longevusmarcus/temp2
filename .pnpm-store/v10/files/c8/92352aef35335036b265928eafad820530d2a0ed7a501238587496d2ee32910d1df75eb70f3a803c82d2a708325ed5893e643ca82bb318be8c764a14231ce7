import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { HTTPValidationError } from "../models/errors/httpvalidationerror.js";
import { ResourceNotFound } from "../models/errors/resourcenotfound.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { CustomersDeleteRequest } from "../models/operations/customersdelete.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Delete Customer
 *
 * @remarks
 * Delete a customer.
 *
 * This action cannot be undone and will immediately:
 * - Cancel any active subscriptions for the customer
 * - Revoke all their benefits
 * - Clear any `external_id`
 *
 * Use it only in the context of deleting a user within your
 * own service. Otherwise, use more granular API endpoints to cancel
 * a specific subscription or revoke certain benefits.
 *
 * Note: The customers information will nonetheless be retained for historic
 * orders and subscriptions.
 *
 * **Scopes**: `customers:write`
 */
export declare function customersDelete(client: PolarCore, request: CustomersDeleteRequest, options?: RequestOptions): APIPromise<Result<void, ResourceNotFound | HTTPValidationError | SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=customersDelete.d.ts.map