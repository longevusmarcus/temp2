"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Meter$ = exports.Meter$outboundSchema = exports.Meter$inboundSchema = exports.MeterAggregation$ = exports.MeterAggregation$outboundSchema = exports.MeterAggregation$inboundSchema = exports.MeterMetadata$ = exports.MeterMetadata$outboundSchema = exports.MeterMetadata$inboundSchema = void 0;
exports.meterMetadataToJSON = meterMetadataToJSON;
exports.meterMetadataFromJSON = meterMetadataFromJSON;
exports.meterAggregationToJSON = meterAggregationToJSON;
exports.meterAggregationFromJSON = meterAggregationFromJSON;
exports.meterToJSON = meterToJSON;
exports.meterFromJSON = meterFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const countaggregation_js_1 = require("./countaggregation.js");
const filter_js_1 = require("./filter.js");
const propertyaggregation_js_1 = require("./propertyaggregation.js");
/** @internal */
exports.MeterMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.MeterMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterMetadata$;
(function (MeterMetadata$) {
    /** @deprecated use `MeterMetadata$inboundSchema` instead. */
    MeterMetadata$.inboundSchema = exports.MeterMetadata$inboundSchema;
    /** @deprecated use `MeterMetadata$outboundSchema` instead. */
    MeterMetadata$.outboundSchema = exports.MeterMetadata$outboundSchema;
})(MeterMetadata$ || (exports.MeterMetadata$ = MeterMetadata$ = {}));
function meterMetadataToJSON(meterMetadata) {
    return JSON.stringify(exports.MeterMetadata$outboundSchema.parse(meterMetadata));
}
function meterMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterMetadata' from JSON`);
}
/** @internal */
exports.MeterAggregation$inboundSchema = z.union([
    countaggregation_js_1.CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/** @internal */
exports.MeterAggregation$outboundSchema = z.union([
    countaggregation_js_1.CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
    propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterAggregation$;
(function (MeterAggregation$) {
    /** @deprecated use `MeterAggregation$inboundSchema` instead. */
    MeterAggregation$.inboundSchema = exports.MeterAggregation$inboundSchema;
    /** @deprecated use `MeterAggregation$outboundSchema` instead. */
    MeterAggregation$.outboundSchema = exports.MeterAggregation$outboundSchema;
})(MeterAggregation$ || (exports.MeterAggregation$ = MeterAggregation$ = {}));
function meterAggregationToJSON(meterAggregation) {
    return JSON.stringify(exports.MeterAggregation$outboundSchema.parse(meterAggregation));
}
function meterAggregationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterAggregation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterAggregation' from JSON`);
}
/** @internal */
exports.Meter$inboundSchema = z
    .object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    name: z.string(),
    filter: filter_js_1.Filter$inboundSchema,
    aggregation: z.union([
        countaggregation_js_1.CountAggregation$inboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$inboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({
            func: v.func,
        }))),
    ]),
    organization_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.Meter$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    name: z.string(),
    filter: filter_js_1.Filter$outboundSchema,
    aggregation: z.union([
        countaggregation_js_1.CountAggregation$outboundSchema.and(z.object({ func: z.literal("count") }).transform((v) => ({
            func: v.func,
        }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("avg") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("max") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("min") }).transform((v) => ({ func: v.func }))),
        propertyaggregation_js_1.PropertyAggregation$outboundSchema.and(z.object({ func: z.literal("sum") }).transform((v) => ({ func: v.func }))),
    ]),
    organizationId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Meter$;
(function (Meter$) {
    /** @deprecated use `Meter$inboundSchema` instead. */
    Meter$.inboundSchema = exports.Meter$inboundSchema;
    /** @deprecated use `Meter$outboundSchema` instead. */
    Meter$.outboundSchema = exports.Meter$outboundSchema;
})(Meter$ || (exports.Meter$ = Meter$ = {}));
function meterToJSON(meter) {
    return JSON.stringify(exports.Meter$outboundSchema.parse(meter));
}
function meterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Meter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Meter' from JSON`);
}
//# sourceMappingURL=meter.js.map