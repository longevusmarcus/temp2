/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
/** @internal */
export const CheckoutConfirmStripeCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CheckoutConfirmStripeCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutConfirmStripeCustomFieldData$;
(function (CheckoutConfirmStripeCustomFieldData$) {
    /** @deprecated use `CheckoutConfirmStripeCustomFieldData$inboundSchema` instead. */
    CheckoutConfirmStripeCustomFieldData$.inboundSchema = CheckoutConfirmStripeCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutConfirmStripeCustomFieldData$outboundSchema` instead. */
    CheckoutConfirmStripeCustomFieldData$.outboundSchema = CheckoutConfirmStripeCustomFieldData$outboundSchema;
})(CheckoutConfirmStripeCustomFieldData$ || (CheckoutConfirmStripeCustomFieldData$ = {}));
export function checkoutConfirmStripeCustomFieldDataToJSON(checkoutConfirmStripeCustomFieldData) {
    return JSON.stringify(CheckoutConfirmStripeCustomFieldData$outboundSchema.parse(checkoutConfirmStripeCustomFieldData));
}
export function checkoutConfirmStripeCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutConfirmStripeCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutConfirmStripeCustomFieldData' from JSON`);
}
/** @internal */
export const CheckoutConfirmStripe$inboundSchema = z.object({
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    product_id: z.nullable(z.string()).optional(),
    product_price_id: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    discount_code: z.nullable(z.string()).optional(),
    confirmation_token_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "custom_field_data": "customFieldData",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "discount_code": "discountCode",
        "confirmation_token_id": "confirmationTokenId",
    });
});
/** @internal */
export const CheckoutConfirmStripe$outboundSchema = z.object({
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    productId: z.nullable(z.string()).optional(),
    productPriceId: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    discountCode: z.nullable(z.string()).optional(),
    confirmationTokenId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        customFieldData: "custom_field_data",
        productId: "product_id",
        productPriceId: "product_price_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        discountCode: "discount_code",
        confirmationTokenId: "confirmation_token_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutConfirmStripe$;
(function (CheckoutConfirmStripe$) {
    /** @deprecated use `CheckoutConfirmStripe$inboundSchema` instead. */
    CheckoutConfirmStripe$.inboundSchema = CheckoutConfirmStripe$inboundSchema;
    /** @deprecated use `CheckoutConfirmStripe$outboundSchema` instead. */
    CheckoutConfirmStripe$.outboundSchema = CheckoutConfirmStripe$outboundSchema;
})(CheckoutConfirmStripe$ || (CheckoutConfirmStripe$ = {}));
export function checkoutConfirmStripeToJSON(checkoutConfirmStripe) {
    return JSON.stringify(CheckoutConfirmStripe$outboundSchema.parse(checkoutConfirmStripe));
}
export function checkoutConfirmStripeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutConfirmStripe$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutConfirmStripe' from JSON`);
}
//# sourceMappingURL=checkoutconfirmstripe.js.map