/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { customerPortalSubscriptionsCancel } from "../funcs/customerPortalSubscriptionsCancel.js";
import { customerPortalSubscriptionsGet } from "../funcs/customerPortalSubscriptionsGet.js";
import { customerPortalSubscriptionsList } from "../funcs/customerPortalSubscriptionsList.js";
import { customerPortalSubscriptionsUpdate } from "../funcs/customerPortalSubscriptionsUpdate.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class PolarSubscriptions extends ClientSDK {
    /**
     * List Subscriptions
     *
     * @remarks
     * List subscriptions of the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async list(security, request, options) {
        return unwrapResultIterator(customerPortalSubscriptionsList(this, security, request, options));
    }
    /**
     * Get Subscription
     *
     * @remarks
     * Get a subscription for the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async get(security, request, options) {
        return unwrapAsync(customerPortalSubscriptionsGet(this, security, request, options));
    }
    /**
     * Update Subscription
     *
     * @remarks
     * Update a subscription of the authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    async update(security, request, options) {
        return unwrapAsync(customerPortalSubscriptionsUpdate(this, security, request, options));
    }
    /**
     * Cancel Subscription
     *
     * @remarks
     * Cancel a subscription of the authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    async cancel(security, request, options) {
        return unwrapAsync(customerPortalSubscriptionsCancel(this, security, request, options));
    }
}
//# sourceMappingURL=polarsubscriptions.js.map