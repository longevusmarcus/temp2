/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { CustomFieldUpdateCheckbox$inboundSchema, CustomFieldUpdateCheckbox$outboundSchema, } from "./customfieldupdatecheckbox.js";
import { CustomFieldUpdateDate$inboundSchema, CustomFieldUpdateDate$outboundSchema, } from "./customfieldupdatedate.js";
import { CustomFieldUpdateNumber$inboundSchema, CustomFieldUpdateNumber$outboundSchema, } from "./customfieldupdatenumber.js";
import { CustomFieldUpdateSelect$inboundSchema, CustomFieldUpdateSelect$outboundSchema, } from "./customfieldupdateselect.js";
import { CustomFieldUpdateText$inboundSchema, CustomFieldUpdateText$outboundSchema, } from "./customfieldupdatetext.js";
/** @internal */
export const CustomFieldUpdate$inboundSchema = z.union([
    CustomFieldUpdateCheckbox$inboundSchema.and(z.object({ type: z.literal("checkbox") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldUpdateDate$inboundSchema.and(z.object({ type: z.literal("date") }).transform((v) => ({ type: v.type }))),
    CustomFieldUpdateNumber$inboundSchema.and(z.object({ type: z.literal("number") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldUpdateSelect$inboundSchema.and(z.object({ type: z.literal("select") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldUpdateText$inboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
]);
/** @internal */
export const CustomFieldUpdate$outboundSchema = z.union([
    CustomFieldUpdateCheckbox$outboundSchema.and(z.object({ type: z.literal("checkbox") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldUpdateDate$outboundSchema.and(z.object({ type: z.literal("date") }).transform((v) => ({ type: v.type }))),
    CustomFieldUpdateNumber$outboundSchema.and(z.object({ type: z.literal("number") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldUpdateSelect$outboundSchema.and(z.object({ type: z.literal("select") }).transform((v) => ({
        type: v.type,
    }))),
    CustomFieldUpdateText$outboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldUpdate$;
(function (CustomFieldUpdate$) {
    /** @deprecated use `CustomFieldUpdate$inboundSchema` instead. */
    CustomFieldUpdate$.inboundSchema = CustomFieldUpdate$inboundSchema;
    /** @deprecated use `CustomFieldUpdate$outboundSchema` instead. */
    CustomFieldUpdate$.outboundSchema = CustomFieldUpdate$outboundSchema;
})(CustomFieldUpdate$ || (CustomFieldUpdate$ = {}));
export function customFieldUpdateToJSON(customFieldUpdate) {
    return JSON.stringify(CustomFieldUpdate$outboundSchema.parse(customFieldUpdate));
}
export function customFieldUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldUpdate' from JSON`);
}
//# sourceMappingURL=customfieldupdate.js.map