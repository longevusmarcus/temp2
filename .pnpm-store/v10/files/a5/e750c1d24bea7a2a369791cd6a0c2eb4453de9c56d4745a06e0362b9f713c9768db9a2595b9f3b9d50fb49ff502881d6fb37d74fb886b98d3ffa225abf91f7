"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Refund$ = exports.Refund$outboundSchema = exports.Refund$inboundSchema = exports.RefundMetadata$ = exports.RefundMetadata$outboundSchema = exports.RefundMetadata$inboundSchema = void 0;
exports.refundMetadataToJSON = refundMetadataToJSON;
exports.refundMetadataFromJSON = refundMetadataFromJSON;
exports.refundToJSON = refundToJSON;
exports.refundFromJSON = refundFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const refundreason_js_1 = require("./refundreason.js");
const refundstatus_js_1 = require("./refundstatus.js");
/** @internal */
exports.RefundMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.RefundMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RefundMetadata$;
(function (RefundMetadata$) {
    /** @deprecated use `RefundMetadata$inboundSchema` instead. */
    RefundMetadata$.inboundSchema = exports.RefundMetadata$inboundSchema;
    /** @deprecated use `RefundMetadata$outboundSchema` instead. */
    RefundMetadata$.outboundSchema = exports.RefundMetadata$outboundSchema;
})(RefundMetadata$ || (exports.RefundMetadata$ = RefundMetadata$ = {}));
function refundMetadataToJSON(refundMetadata) {
    return JSON.stringify(exports.RefundMetadata$outboundSchema.parse(refundMetadata));
}
function refundMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RefundMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RefundMetadata' from JSON`);
}
/** @internal */
exports.Refund$inboundSchema = z
    .object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    status: refundstatus_js_1.RefundStatus$inboundSchema,
    reason: refundreason_js_1.RefundReason$inboundSchema,
    amount: z.number().int(),
    tax_amount: z.number().int(),
    currency: z.string(),
    organization_id: z.string(),
    order_id: z.string(),
    subscription_id: z.nullable(z.string()),
    customer_id: z.string(),
    revoke_benefits: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "tax_amount": "taxAmount",
        "organization_id": "organizationId",
        "order_id": "orderId",
        "subscription_id": "subscriptionId",
        "customer_id": "customerId",
        "revoke_benefits": "revokeBenefits",
    });
});
/** @internal */
exports.Refund$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    status: refundstatus_js_1.RefundStatus$outboundSchema,
    reason: refundreason_js_1.RefundReason$outboundSchema,
    amount: z.number().int(),
    taxAmount: z.number().int(),
    currency: z.string(),
    organizationId: z.string(),
    orderId: z.string(),
    subscriptionId: z.nullable(z.string()),
    customerId: z.string(),
    revokeBenefits: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        taxAmount: "tax_amount",
        organizationId: "organization_id",
        orderId: "order_id",
        subscriptionId: "subscription_id",
        customerId: "customer_id",
        revokeBenefits: "revoke_benefits",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Refund$;
(function (Refund$) {
    /** @deprecated use `Refund$inboundSchema` instead. */
    Refund$.inboundSchema = exports.Refund$inboundSchema;
    /** @deprecated use `Refund$outboundSchema` instead. */
    Refund$.outboundSchema = exports.Refund$outboundSchema;
})(Refund$ || (exports.Refund$ = Refund$ = {}));
function refundToJSON(refund) {
    return JSON.stringify(exports.Refund$outboundSchema.parse(refund));
}
function refundFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Refund$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Refund' from JSON`);
}
//# sourceMappingURL=refund.js.map